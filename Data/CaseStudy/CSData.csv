keynum,methodName,methodOfClass,projectName,SIZE,LCOM1,LCOM2,LCOM4,COH,CC,DR,NOAV,WMA,code
1,main(String[]),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\Test.java,jsmooth,9,24,12,3,0.3333,0.2238,0.5,3,1,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args) throws Exception {
  String[] d=new String[2];
  d[0]=""test"";
  d[1]=""test2"";
  JSmoothModelBean model=new JSmoothModelBean();
  model.setJarLocation(""MyJarLocation"");
  model.setClassPath(d);
  JSmoothModelPersistency.save(new File(""c:/result.xml""),model);
}
"
13,"compile(File,SkeletonBean,File,JSmoothModelBean,File)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\ExeCompiler.java,jsmooth,49,1089,1002,8,0.0593,0.0336,0.4,18,10,"public boolean compile(File skelroot,SkeletonBean skel,File basedir,JSmoothModelBean data,File out) throws Exception {
  try {
    fireStepChange(0,""Starting compilation"");
    File pattern=new File(skelroot,skel.getExecutableName());
    if (pattern.exists() == false) {
      m_errors.add(""Error: Can't find any skeleton at "" + skelroot);
      fireFailedChange();
      return false;
    }
    fireStepChange(10,""Scanning skeleton..."");
    PEFile pe=new PEFile(pattern);
    pe.open();
    PEResourceDirectory resdir=pe.getResourceDirectory();
    boolean resb=false;
    if (data.getEmbeddedJar() == true) {
      if (data.getJarLocation() == null) {
        m_errors.add(""Error: Jar is not specified!"");
        fireFailedChange();
        return false;
      }
      fireStepChange(40,""Loading Jar..."");
      File jarloc=concFile(basedir,new File(data.getJarLocation()));
      if (jarloc.exists() == false) {
        m_errors.add(""Error: Can't find jar at "" + jarloc);
        fireFailedChange();
        return false;
      }
      ByteBuffer jardata=load(jarloc);
      fireStepChange(60,""Adding Jar to Resources..."");
      resb=resdir.replaceResource(skel.getResourceCategory(),skel.getResourceJarId(),1033,jardata);
      if (resb == false) {
        m_errors.add(""Error: Can't replace jar resource! It is probably missing from the skeleton."");
        fireFailedChange();
        return false;
      }
    }
    fireStepChange(70,""Adding Properties to Resources..."");
    String props=PropertiesBuilder.makeProperties(basedir,data);
    ByteBuffer propdata=convert(props);
    resb=resdir.replaceResource(skel.getResourceCategory(),skel.getResourcePropsId(),1033,propdata);
    if (data.getIconLocation() != null) {
      fireStepChange(80,""Loading icon..."");
      String iconpath;
      if (new java.io.File(data.getIconLocation()).isAbsolute())       iconpath=data.getIconLocation();
 else       iconpath=new java.io.File(basedir,data.getIconLocation()).getAbsolutePath();
      Image img=getScaledImage(iconpath,32,32);
      Hashtable set=calculateColorCount(img);
      if (img != null) {
        net.charabia.jsmoothgen.pe.res.ResIcon resicon=new net.charabia.jsmoothgen.pe.res.ResIcon(img);
        pe.replaceDefaultIcon(resicon);
      }
    }
    fireStepChange(90,""Saving exe..."");
    pe.dumpTo(out);
    fireCompleteChange();
    return true;
  }
 catch (  Exception exc) {
    m_errors.add(""Error: "" + exc.getMessage());
    exc.printStackTrace();
    fireFailedChange();
    return false;
  }
}
"
14,loadImages(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\ExeCompiler.java,jsmooth,13,63,48,4,0.1731,0.0877,0,4,1,"public Image[] loadImages(String path){
  File f=new File(path);
  if (path.toUpperCase().endsWith("".ICO"")) {
    try {
      java.awt.Image[] images=net.charabia.util.codec.IcoCodec.loadImages(f);
      if ((images != null) && (images.length > 0)) {
        return images;
      }
    }
 catch (    java.io.IOException exc) {
      exc.printStackTrace();
    }
  }
  javax.swing.ImageIcon icon=new javax.swing.ImageIcon(path,""default icon"");
  java.awt.Image[] imgs=new java.awt.Image[1];
  imgs[0]=icon.getImage();
  return imgs;
}
"
15,checkImageLoaded(Image),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\ExeCompiler.java,jsmooth,6,12,9,4,0.25,0.0952,0,3,2,"public void checkImageLoaded(Image img){
  MediaTracker mtrack=new MediaTracker(new Canvas());
  mtrack.addImage(img,1);
  try {
    mtrack.waitForAll();
  }
 catch (  InterruptedException e) {
  }
}
"
16,calculateColorCount(Image),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\ExeCompiler.java,jsmooth,23,230,207,9,0.0897,0.0347,0,12,5,"private Hashtable calculateColorCount(Image img){
  int width=img.getWidth(null);
  int height=img.getHeight(null);
  int[] pixels=new int[width * height];
  PixelGrabber grabber=new PixelGrabber(img,0,0,width,height,pixels,0,width);
  try {
    grabber.grabPixels();
  }
 catch (  InterruptedException e) {
    System.err.println(""interrupted waiting for pixels!"");
  }
  Hashtable result=new Hashtable();
  int colorindex=0;
  for (int i=0; i < pixels.length; i++) {
    int pix=pixels[i];
    if (((pix >> 24) & 0xFF) > 0) {
      pix&=0x00FFFFFF;
      Integer pixi=new Integer(pix);
      Object o=result.get(pixi);
      if (o == null) {
        result.put(pixi,new Integer(colorindex++));
      }
    }
  }
  return result;
}
"
21,convert(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\ExeCompiler.java,jsmooth,9,19,2,3,0.2889,0.2405,0,3,2,"private ByteBuffer convert(String data){
  ByteBuffer result=ByteBuffer.allocate(data.length() + 1);
  result.position(0);
  for (int i=0; i < data.length(); i++) {
    result.put((byte)data.charAt(i));
  }
  result.put((byte)0);
  result.position(0);
  return result;
}
"
86,"normalizePaths(java.io.File,boolean)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\JSmoothModelBean.java,jsmooth,18,98,43,3,0.1898,0.1327,0,6,8,"public String[] normalizePaths(java.io.File filebase,boolean toRelativePath){
  Vector result=new Vector();
  m_iconLocation=checkRelativePath(filebase,m_iconLocation,result,""Icon location"",toRelativePath);
  m_jarLocation=checkRelativePath(filebase,m_jarLocation,result,""Jar location"",toRelativePath);
  m_bundledJVM=checkRelativePath(filebase,m_bundledJVM,result,""Bundle JVM location"",toRelativePath);
  m_executableName=checkRelativePath(filebase,m_executableName,result,""Executable location"",toRelativePath);
  if (m_executableName != null) {
    File exebase=new File(m_executableName);
    if (exebase.isAbsolute() == false)     exebase=new File(filebase,exebase.toString()).getParentFile();
    if ((m_currentDirectory != null) && (m_currentDirectory.indexOf(""${"") >= 0))     m_currentDirectory=checkRelativePath(exebase,m_currentDirectory,result,""Current directory"",toRelativePath);
  }
  if (m_classPath != null) {
    for (int i=0; i < m_classPath.length; i++) {
      m_classPath[i]=checkRelativePath(filebase,m_classPath[i],result,""Classpath entry ("" + i + "")"",toRelativePath);
    }
  }
  if (result.size() == 0)   return null;
  String[] res=new String[result.size()];
  result.toArray(res);
  return res;
}
"
87,"checkRelativePath(java.io.File,String,java.util.Vector,String,boolean)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\JSmoothModelBean.java,jsmooth,14,63,35,4,0.1643,0.161,1,8,6,"private String checkRelativePath(java.io.File root,String value,java.util.Vector errors,String name,boolean toRelativePath){
  if (value == null)   return value;
  if (toRelativePath) {
    File nf=JSmoothModelPersistency.makePathRelativeIfPossible(root,new File(value));
    if (nf.isAbsolute()) {
      errors.add(name);
    }
    return nf.toString();
  }
 else {
    File nf=new File(value);
    if (nf.isAbsolute() == false) {
      nf=new File(root,value);
      nf=nf.getAbsoluteFile();
      try {
        nf=nf.getCanonicalFile();
        nf=nf.getAbsoluteFile();
      }
 catch (      IOException iox) {
      }
    }
    return nf.toString();
  }
}
"
88,load(File),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\JSmoothModelPersistency.java,jsmooth,29,363,320,9,0.1069,0.0673,0.2,10,8,"public static JSmoothModelBean load(File fin) throws IOException {
  FileReader fr=new FileReader(fin);
  try {
    JSmoothModelBean jobj=new JSmoothModelBean();
    String INVALID=""INVALID"";
    jobj.setSkeletonName(INVALID);
    JOXBeanReader jbr=new JOXBeanReader(fr);
    jbr.readObject(jobj);
    jbr.close();
    fr.close();
    if (jobj.getSkeletonName() == INVALID) {
      throw new Exception(""Not a JOX File"");
    }
    if ((jobj.getJarLocation() != null) && (jobj.getJarLocation().length() > 0)) {
      jobj.setEmbeddedJar(true);
    }
    return jobj;
  }
 catch (  Exception exc) {
    fr.close();
    try {
      FileInputStream fis=new FileInputStream(fin);
      XMLDecoder dec=new XMLDecoder(fis);
      JSmoothModelBean xobj=(JSmoothModelBean)dec.readObject();
      fis.close();
      if ((xobj.getJarLocation() != null) && (xobj.getJarLocation().length() > 0))       xobj.setEmbeddedJar(true);
      return xobj;
    }
 catch (    Exception exc2) {
      exc2.printStackTrace();
      throw new IOException(exc2.toString());
    }
  }
}
"
89,"save(File,JSmoothModelBean)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\JSmoothModelPersistency.java,jsmooth,11,47,39,5,0.1818,0.0769,0.333333333,6,3,"public static void save(File fout,JSmoothModelBean obj) throws IOException {
  try {
    String jarloc=obj.getJarLocation();
    if (obj.getEmbeddedJar() == false)     obj.setJarLocation(null);
    FileWriter fw=new FileWriter(fout);
    JOXBeanWriter jbw=new JOXBeanWriter(fw);
    jbw.writeObject(""jsmoothproject"",obj);
    jbw.close();
    fw.close();
    obj.setJarLocation(jarloc);
  }
 catch (  Exception ex) {
    throw new IOException(ex.toString());
  }
 finally {
  }
}
"
90,"makePathRelativeIfPossible(File,File)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\JSmoothModelPersistency.java,jsmooth,39,597,453,4,0.106,0.0962,0,13,16,"static public File makePathRelativeIfPossible(File root,File f){
  if (f.toString().indexOf(""${"") >= 0)   return f;
  File orgfile=f;
  try {
    if (f.isAbsolute() == false) {
      f=new File(root,f.toString());
    }
    f=f.getCanonicalFile();
    f=f.getAbsoluteFile();
    root=root.getCanonicalFile();
    root=root.getAbsoluteFile();
  }
 catch (  IOException iox) {
    iox.printStackTrace();
    System.out.println(""Failed, returning "" + orgfile);
    return orgfile;
  }
  Vector rootvec=new Vector();
  Vector targetvec=new Vector();
  File cur;
  cur=root;
  while (cur != null) {
    String n=cur.getName();
    if (n.equals(""""))     n=cur.getAbsolutePath();
    rootvec.add(0,n);
    cur=cur.getParentFile();
  }
  cur=f;
  while (cur != null) {
    String n=cur.getName();
    if (n.equals(""""))     n=cur.getAbsolutePath();
    targetvec.add(0,n);
    cur=cur.getParentFile();
  }
  int cursor=0;
  while ((cursor < rootvec.size()) && (cursor < targetvec.size())) {
    if (rootvec.elementAt(cursor).equals(targetvec.elementAt(cursor)) == false)     break;
    cursor++;
  }
  if (cursor == 0)   return f;
  if ((cursor == rootvec.size()) && (cursor == targetvec.size()))   return new File(""."");
  StringBuffer buffer=new StringBuffer();
  for (int i=cursor; i < rootvec.size(); i++) {
    buffer.append(""../"");
  }
  for (int i=cursor; i < targetvec.size(); i++) {
    buffer.append(targetvec.elementAt(i).toString());
    buffer.append(""/"");
  }
  return new File(buffer.toString());
}
"
91,main(String[]),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\JSmoothModelPersistency.java,jsmooth,15,89,73,5,0.15,0.0673,0,9,1,"static public void main(String[] args){
  File root=new File(""z:/a/b/c/d"");
  File t1=new File(""z:/a/b/e/f"");
  File t2=new File(""c:/t/r"");
  File t3=new File(""z:/a/b/c/d/i/m"");
  File t4=new File(""z:/a/b/c/d"");
  System.out.println(""Rel root, t1: "" + makePathRelativeIfPossible(root,t1));
  System.out.println(""Rel root, t2: "" + makePathRelativeIfPossible(root,t2));
  System.out.println(""Rel root, t3: "" + makePathRelativeIfPossible(root,t3));
  System.out.println(""Rel root, t4: "" + makePathRelativeIfPossible(root,t4));
  File f1=new File(""f:\\a\\b"");
  File f2=new File(""f:\\a\\c"");
  File f3=new File(f1,f2.toString());
  System.out.println(""f3 = "" + f3.toString());
}
"
98,"makeProperties(File,JSmoothModelBean)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\PropertiesBuilder.java,jsmooth,50,837,449,8,0.1169,0.1548,0.157894737,14,19,"/** 
 * Creates a text containing all the relevant properties of a
 * JSmoothModelBean object. The properties are output in the form
 * ""key=value"".
 * <p>
 * Note that all the paths are converted to be made relative to
 * the basedir parameter provided. All the paths converted are
 * expected to be relative to the targetted executable binary
 * (before the conversion is applied, that is).
 */
static public String makeProperties(File basedir,JSmoothModelBean obj){
  StringBuffer out=new StringBuffer();
  addPair(""arguments"",obj.getArguments(),out);
  addPair(""mainclassname"",obj.getMainClassName(),out);
  addPair(""jvmsearch"",makePathConc(obj.getJVMSearchPath()),out);
  addPair(""minversion"",obj.getMinimumVersion(),out);
  addPair(""maxversion"",obj.getMaximumVersion(),out);
  addPair(""currentdir"",obj.getCurrentDirectory(),out);
  if (obj.getEmbeddedJar() && (obj.getJarLocation().trim().length() > 0)) {
    addPair(""embedjar"",""true"",out);
  }
 else {
    addPair(""embedjar"",""false"",out);
  }
  if (obj.getMaximumMemoryHeap() > 1) {
    addPair(""maxheap"",Integer.toString(obj.getMaximumMemoryHeap()),out);
  }
  if (obj.getInitialMemoryHeap() > 1) {
    addPair(""initialheap"",Integer.toString(obj.getInitialMemoryHeap()),out);
  }
  File curdir=new File(obj.getExecutableName()).getParentFile();
  if (curdir == null)   curdir=basedir.getAbsoluteFile();
  if (curdir.isAbsolute() == false) {
    curdir=new File(basedir,curdir.toString());
  }
  if (obj.getCurrentDirectory() != null) {
    File newcurdir=new File(obj.getCurrentDirectory());
    if (!""${EXECUTABLEPATH}"".equalsIgnoreCase(obj.getCurrentDirectory())) {
      if (newcurdir.isAbsolute() == false) {
        curdir=new File(curdir,newcurdir.toString());
      }
 else       curdir=newcurdir;
    }
  }
  if (obj.getBundledJVMPath() != null)   addPair(""bundledvm"",getRenormalizedPathIfNeeded(obj.getBundledJVMPath(),basedir,curdir),out);
  if (obj.getClassPath() != null) {
    String[] relcp=new String[obj.getClassPath().length];
    for (int i=0; i < relcp.length; i++) {
      relcp[i]=getRenormalizedPathIfNeeded(obj.getClassPath()[i],basedir,curdir);
    }
    addPair(""classpath"",makePathConc(relcp),out);
  }
  if (obj.getSkeletonProperties() != null) {
    for (int i=0; i < obj.getSkeletonProperties().length; i++) {
      JSmoothModelBean.Property prop=obj.getSkeletonProperties()[i];
      if (prop.getKey() != null) {
        String val=prop.getValue();
        if (val == null)         val="""";
        addPair(""skel_"" + prop.getKey(),val,out);
      }
    }
  }
  JavaPropertyPair[] javapairs=obj.getJavaProperties();
  if (javapairs != null) {
    addPair(""javapropertiescount"",new Integer(javapairs.length).toString(),out);
    for (int i=0; i < javapairs.length; i++) {
      addPair(""javaproperty_name_"" + i,javapairs[i].getName(),out);
      addPair(""javaproperty_value_"" + i,javapairs[i].getValue(),out);
    }
  }
  return out.toString();
}
"
100,escapeString(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\PropertiesBuilder.java,jsmooth,10,29,13,2,0.3333,0.3636,0,4,7,"static public String escapeString(String str){
  if (str == null)   return """";
  StringBuffer out=new StringBuffer();
  for (int i=0; i < str.length(); i++) {
    char c=str.charAt(i);
switch (c) {
case '\n':
      out.append(""\\n"");
    break;
case '\t':
  out.append(""\\t"");
break;
case '\r':
out.append(""\\r"");
break;
case '\\':
out.append(""\\\\"");
break;
default :
out.append(c);
}
}
return out.toString();
}
"
101,"addPair(String,String,StringBuffer)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\PropertiesBuilder.java,jsmooth,6,9,3,3,0.3333,0.2381,0,3,1,"static private void addPair(String name,String value,StringBuffer out){
  out.append(escapeString(name));
  out.append(""="");
  out.append(escapeString(value));
  out.append(""\n"");
}
"
102,makePathConc(String[]),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\PropertiesBuilder.java,jsmooth,7,13,5,3,0.4762,0.2333,0,3,4,"static public String makePathConc(String[] elements){
  StringBuffer buf=new StringBuffer();
  if (elements != null)   for (int i=0; i < elements.length; i++) {
    buf.append(elements[i]);
    if ((i + 1) < elements.length)     buf.append("";"");
  }
  return buf.toString();
}
"
105,open(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEFile.java,jsmooth,30,404,373,11,0.0652,0.0217,0.5,10,4,"public void open() throws FileNotFoundException, IOException {
  m_in=new FileInputStream(m_file);
  m_channel=m_in.getChannel();
  m_oldmsheader=new PEOldMSHeader(this);
  m_oldmsheader.read();
  long headoffset=m_oldmsheader.e_lfanew;
  m_header=new PEHeader(this,headoffset);
  m_header.read();
  int seccount=m_header.NumberOfSections;
  long offset=headoffset + (m_header.NumberOfRvaAndSizes * 8) + 24+ 96;
  for (int i=0; i < seccount; i++) {
    PESection sect=new PESection(this,offset);
    sect.read();
    m_sections.add(sect);
    offset+=40;
  }
  ByteBuffer resbuf=null;
  long resourceoffset=m_header.ResourceDirectory_VA;
  for (int i=0; i < seccount; i++) {
    PESection sect=(PESection)m_sections.get(i);
    if (sect.VirtualAddress == resourceoffset) {
      PEResourceDirectory prd=new PEResourceDirectory(this,sect);
      resbuf=prd.buildResource(sect.VirtualAddress);
      break;
    }
  }
}
"
107,main(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEFile.java,jsmooth,70,2387,2359,53,0.0341,0.0109,1,12,2,"public static void main(String args[]) throws IOException, CloneNotSupportedException, Exception {
  PEFile pe=new PEFile(new File(""F:/Documents and Settings/Rodrigo/Mes documents/projects/jsmooth/skeletons/simplewrap/JWrap.exe""));
  pe.open();
  File fout=new File(""F:/Documents and Settings/Rodrigo/Mes documents/projects/jsmooth/skeletons/simplewrap/gen-application.jar"");
  FileInputStream fis=new FileInputStream(fout);
  ByteBuffer data=ByteBuffer.allocate((int)fout.length());
  data.order(ByteOrder.LITTLE_ENDIAN);
  FileChannel fischan=fis.getChannel();
  fischan.read(data);
  data.position(0);
  fis.close();
  PEResourceDirectory resdir=pe.getResourceDirectory();
  java.awt.Image img=java.awt.Toolkit.getDefaultToolkit().getImage(""c:\\gnome-color-browser2.png"");
  java.awt.MediaTracker mt=new java.awt.MediaTracker(new javax.swing.JLabel(""toto""));
  mt.addImage(img,1);
  try {
    mt.waitForAll();
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
  ResIcon newicon=new ResIcon(img);
  pe.replaceDefaultIcon(newicon);
  File out=new File(""F:/Documents and Settings/Rodrigo/Mes documents/projects/jsmooth/skeletons/simplewrap/COPIE.exe"");
  pe.dumpTo(out);
}
"
109,dumpTo(File),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEFile.java,jsmooth,101,4374,3698,19,0.0458,0.0449,0.5,54,15,"public void dumpTo(File destination) throws IOException, CloneNotSupportedException {
  int outputcount=0;
  FileOutputStream fos=new FileOutputStream(destination);
  FileChannel out=fos.getChannel();
  PEOldMSHeader oldmsheader=(PEOldMSHeader)this.m_oldmsheader.clone();
  PEHeader peheader=(PEHeader)m_header.clone();
  Vector sections=new Vector();
  for (int i=0; i < m_sections.size(); i++) {
    PESection sect=(PESection)m_sections.get(i);
    PESection cs=(PESection)sect.clone();
    sections.add(cs);
  }
  long newexeoffset=oldmsheader.e_lfanew;
  ByteBuffer msheadbuffer=oldmsheader.get();
  outputcount=out.write(msheadbuffer);
  this.m_channel.position(64);
  out.transferFrom(this.m_channel,64,newexeoffset - 64);
  ByteBuffer headbuffer=peheader.get();
  out.position(newexeoffset);
  outputcount=out.write(headbuffer);
  long offset=oldmsheader.e_lfanew + (m_header.NumberOfRvaAndSizes * 8) + 24+ 96;
  out.position(offset);
  for (int i=0; i < sections.size(); i++) {
    PESection sect=(PESection)sections.get(i);
    ByteBuffer buf=sect.get();
    outputcount=out.write(buf);
  }
  offset=1024;
  long virtualAddress=offset;
  if ((virtualAddress % peheader.SectionAlignment) > 0)   virtualAddress+=peheader.SectionAlignment - (virtualAddress % peheader.SectionAlignment);
  long resourceoffset=m_header.ResourceDirectory_VA;
  for (int i=0; i < sections.size(); i++) {
    PESection sect=(PESection)sections.get(i);
    if (resourceoffset == sect.VirtualAddress) {
      out.position(offset);
      long sectoffset=offset;
      PEResourceDirectory prd=this.getResourceDirectory();
      ByteBuffer resbuf=prd.buildResource(sect.VirtualAddress);
      resbuf.position(0);
      out.write(resbuf);
      offset+=resbuf.capacity();
      long rem=offset % this.m_header.FileAlignment;
      if (rem != 0)       offset+=this.m_header.FileAlignment - rem;
      if (out.size() + 1 < offset) {
        ByteBuffer padder=ByteBuffer.allocate(1);
        out.write(padder,offset - 1);
      }
      long virtualSize=resbuf.capacity();
      if ((virtualSize % peheader.FileAlignment) > 0)       virtualSize+=peheader.SectionAlignment - (virtualSize % peheader.SectionAlignment);
      sect.PointerToRawData=sectoffset;
      sect.SizeOfRawData=resbuf.capacity();
      if ((sect.SizeOfRawData % this.m_header.FileAlignment) > 0)       sect.SizeOfRawData+=(this.m_header.FileAlignment - (sect.SizeOfRawData % this.m_header.FileAlignment));
      sect.VirtualAddress=virtualAddress;
      sect.VirtualSize=virtualSize;
      virtualAddress+=virtualSize;
    }
 else     if (sect.PointerToRawData > 0) {
      out.position(offset);
      this.m_channel.position(sect.PointerToRawData);
      long sectoffset=offset;
      out.position(offset + sect.SizeOfRawData);
      ByteBuffer padder=ByteBuffer.allocate(1);
      out.write(padder,offset + sect.SizeOfRawData - 1);
      long outted=out.transferFrom(this.m_channel,offset,sect.SizeOfRawData);
      offset+=sect.SizeOfRawData;
      long rem=offset % this.m_header.FileAlignment;
      if (rem != 0) {
        offset+=this.m_header.FileAlignment - rem;
      }
      sect.PointerToRawData=sectoffset;
      sect.VirtualAddress=virtualAddress;
      virtualAddress+=sect.VirtualSize;
      if ((virtualAddress % peheader.SectionAlignment) > 0)       virtualAddress+=peheader.SectionAlignment - (virtualAddress % peheader.SectionAlignment);
    }
 else {
      long virtualSize=sect.VirtualSize;
      if ((virtualSize % peheader.SectionAlignment) > 0)       virtualSize+=peheader.SectionAlignment - (virtualSize % peheader.SectionAlignment);
      sect.VirtualAddress=virtualAddress;
      virtualAddress+=virtualSize;
    }
  }
  peheader.updateVAAndSize(m_sections,sections);
  headbuffer=peheader.get();
  out.position(newexeoffset);
  outputcount=out.write(headbuffer);
  offset=oldmsheader.e_lfanew + (m_header.NumberOfRvaAndSizes * 8) + 24+ 96;
  out.position(offset);
  for (int i=0; i < sections.size(); i++) {
    PESection sect=(PESection)sections.get(i);
    ByteBuffer buf=sect.get();
    outputcount=out.write(buf);
  }
  fos.flush();
  fos.close();
}
"
110,replaceDefaultIcon(ResIcon),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEFile.java,jsmooth,26,279,233,10,0.1538,0.09,0.666666667,12,2,"public void replaceDefaultIcon(ResIcon icon) throws Exception {
  PEResourceDirectory resdir=getResourceDirectory();
  PEResourceDirectory.DataEntry entry=resdir.getData(""#14"",null,null);
  if (entry == null) {
    throw new Exception(""Can't find any icon group in the file!"");
  }
  entry.Data.position(0);
  entry.Data.position(0);
  ResIconDir rid=new ResIconDir(entry.Data);
  int iconid=rid.getEntries()[0].dwImageOffset;
  PEResourceDirectory.DataEntry iconentry=resdir.getData(""#3"",""#"" + iconid,null);
  iconentry.Data.position(0);
  rid.getEntries()[0].bWidth=(short)icon.Width;
  rid.getEntries()[0].bHeight=(short)(icon.Height / 2);
  rid.getEntries()[0].bColorCount=(short)(1 << icon.BitsPerPixel);
  rid.getEntries()[0].wBitCount=icon.BitsPerPixel;
  rid.getEntries()[0].dwBytesInRes=icon.getData().remaining();
  iconentry.Data=icon.getData();
  iconentry.Size=iconentry.Data.remaining();
  entry.setData(rid.getData());
}
"
113,read(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEHeader.java,jsmooth,77,367,0,4,0.0265,0.3132,1,3,1,"public void read() throws IOException {
  FileChannel ch=m_pe.getChannel();
  ByteBuffer head=ByteBuffer.allocate(255);
  head.order(ByteOrder.LITTLE_ENDIAN);
  ch.position(m_baseoffset);
  ch.read(head);
  head.position(0);
  int pemagic=head.getInt();
  Machine=head.getShort();
  NumberOfSections=head.getShort();
  TimeDateStamp=head.getInt();
  PointerToSymbolTable=head.getInt();
  NumberOfSymbols=head.getInt();
  SizeOfOptionalHeader=head.getShort();
  Characteristics=head.getShort();
  Magic=head.getShort();
  MajorLinkerVersion=head.get();
  MinorLinkerVersion=head.get();
  SizeOfCode=head.getInt();
  SizeOfInitializedData=head.getInt();
  SizeOfUninitializedData=head.getInt();
  AddressOfEntryPoint=head.getInt();
  BaseOfCode=head.getInt();
  BaseOfData=head.getInt();
  ImageBase=head.getInt();
  SectionAlignment=head.getInt();
  FileAlignment=head.getInt();
  MajorOperatingSystemVersion=head.getShort();
  MinorOperatingSystemVersion=head.getShort();
  MajorImageVersion=head.getShort();
  MinorImageVersion=head.getShort();
  MajorSubsystemVersion=head.getShort();
  MinorSubsystemVersion=head.getShort();
  Reserved1=head.getInt();
  SizeOfImage=head.getInt();
  SizeOfHeaders=head.getInt();
  CheckSum=head.getInt();
  Subsystem=head.getShort();
  DllCharacteristics=head.getShort();
  SizeOfStackReserve=head.getInt();
  SizeOfStackCommit=head.getInt();
  SizeOfHeapReserve=head.getInt();
  SizeOfHeapCommit=head.getInt();
  LoaderFlags=head.getInt();
  NumberOfRvaAndSizes=head.getInt();
  ExportDirectory_VA=head.getInt();
  ExportDirectory_Size=head.getInt();
  ImportDirectory_VA=head.getInt();
  ImportDirectory_Size=head.getInt();
  ResourceDirectory_VA=head.getInt();
  ResourceDirectory_Size=head.getInt();
  ExceptionDirectory_VA=head.getInt();
  ExceptionDirectory_Size=head.getInt();
  SecurityDirectory_VA=head.getInt();
  SecurityDirectory_Size=head.getInt();
  BaseRelocationTable_VA=head.getInt();
  BaseRelocationTable_Size=head.getInt();
  DebugDirectory_VA=head.getInt();
  DebugDirectory_Size=head.getInt();
  ArchitectureSpecificData_VA=head.getInt();
  ArchitectureSpecificData_Size=head.getInt();
  RVAofGP_VA=head.getInt();
  RVAofGP_Size=head.getInt();
  TLSDirectory_VA=head.getInt();
  TLSDirectory_Size=head.getInt();
  LoadConfigurationDirectory_VA=head.getInt();
  LoadConfigurationDirectory_Size=head.getInt();
  BoundImportDirectoryinheaders_VA=head.getInt();
  BoundImportDirectoryinheaders_Size=head.getInt();
  ImportAddressTable_VA=head.getInt();
  ImportAddressTable_Size=head.getInt();
  DelayLoadImportDescriptors_VA=head.getInt();
  DelayLoadImportDescriptors_Size=head.getInt();
  COMRuntimedescriptor_VA=head.getInt();
  COMRuntimedescriptor_Size=head.getInt();
}
"
114,dump(PrintStream),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEHeader.java,jsmooth,70,137,0,3,0.029,0.3339,0,1,1,"public void dump(PrintStream out){
  out.println(""HEADER:"");
  out.println(""int  Machine="" + Machine + "" //  4"");
  out.println(""int  NumberOfSections="" + NumberOfSections + ""     //  6"");
  out.println(""long   TimeDateStamp="" + TimeDateStamp + "" //  8"");
  out.println(""long   PointerToSymbolTable="" + PointerToSymbolTable + ""     //  C"");
  out.println(""long   NumberOfSymbols="" + NumberOfSymbols + "" // 10"");
  out.println(""int  SizeOfOptionalHeader="" + SizeOfOptionalHeader + ""     // 14"");
  out.println(""int  Characteristics="" + Characteristics + "" // 16"");
  out.println(""int    Magic="" + Magic + ""     // 18"");
  out.println(""short   MajorLinkerVersion="" + MajorLinkerVersion + ""     // 1a"");
  out.println(""short   MinorLinkerVersion="" + MinorLinkerVersion + "" // 1b"");
  out.println(""long   SizeOfCode="" + SizeOfCode + ""     // 1c"");
  out.println(""long   SizeOfInitializedData="" + SizeOfInitializedData + "" // 20"");
  out.println(""long   SizeOfUninitializedData="" + SizeOfUninitializedData + ""     // 24"");
  out.println(""long   AddressOfEntryPoint="" + AddressOfEntryPoint + "" // 28"");
  out.println(""long   BaseOfCode="" + BaseOfCode + ""     // 2c"");
  out.println(""long   BaseOfData="" + BaseOfData + ""    //    // NT additional fields. // 30"");
  out.println(""long   ImageBase="" + ImageBase + ""     // 34"");
  out.println(""long   SectionAlignment="" + SectionAlignment + "" // 38"");
  out.println(""long   FileAlignment="" + FileAlignment + ""     // 3c"");
  out.println(""int    MajorOperatingSystemVersion="" + MajorOperatingSystemVersion + "" // 40"");
  out.println(""int    MinorOperatingSystemVersion="" + MinorOperatingSystemVersion + ""     // 42"");
  out.println(""int    MajorImageVersion="" + MajorImageVersion + "" // 44"");
  out.println(""int    MinorImageVersion="" + MinorImageVersion + ""     // 46"");
  out.println(""int    MajorSubsystemVersion="" + MajorSubsystemVersion + "" // 48"");
  out.println(""int    MinorSubsystemVersion="" + MinorSubsystemVersion + ""     // 4a"");
  out.println(""long   Reserved1="" + Reserved1 + ""     // 4c"");
  out.println(""long   SizeOfImage="" + SizeOfImage + "" // 50"");
  out.println(""long   SizeOfHeaders="" + SizeOfHeaders + ""     // 54"");
  out.println(""long   CheckSum="" + CheckSum + ""     // 58"");
  out.println(""int    Subsystem="" + Subsystem + "" // 5c"");
  out.println(""int    DllCharacteristics="" + DllCharacteristics + ""     // 5e"");
  out.println(""long   SizeOfStackReserve="" + SizeOfStackReserve + "" // 60"");
  out.println(""long   SizeOfStackCommit="" + SizeOfStackCommit + ""     // 64"");
  out.println(""long   SizeOfHeapReserve="" + SizeOfHeapReserve + "" // 68"");
  out.println(""long   SizeOfHeapCommit="" + SizeOfHeapCommit + ""     // 6c"");
  out.println(""long   LoaderFlags="" + LoaderFlags + "" // 70"");
  out.println(""long   NumberOfRvaAndSizes="" + NumberOfRvaAndSizes + "" // 74"");
  out.println(""long ExportDirectory_VA="" + ExportDirectory_VA + "" // 78"");
  out.println(""long ExportDirectory_Size="" + ExportDirectory_Size + "" // 7c"");
  out.println(""long ImportDirectory_VA="" + ImportDirectory_VA + "" // 80"");
  out.println(""long ImportDirectory_Size="" + ImportDirectory_Size + "" // 84"");
  out.println(""long ResourceDirectory_VA="" + ResourceDirectory_VA + "" // 88"");
  out.println(""long ResourceDirectory_Size="" + ResourceDirectory_Size + "" // 8c"");
  out.println(""long ExceptionDirectory_VA="" + ExceptionDirectory_VA + "" // 90"");
  out.println(""long ExceptionDirectory_Size="" + ExceptionDirectory_Size + "" // 94"");
  out.println(""long SecurityDirectory_VA="" + SecurityDirectory_VA + "" // 98"");
  out.println(""long SecurityDirectory_Size="" + SecurityDirectory_Size + "" // 9c"");
  out.println(""long BaseRelocationTable_VA="" + BaseRelocationTable_VA + "" // a0"");
  out.println(""long BaseRelocationTable_Size="" + BaseRelocationTable_Size + "" // a4"");
  out.println(""long DebugDirectory_VA="" + DebugDirectory_VA + "" // a8"");
  out.println(""long DebugDirectory_Size="" + DebugDirectory_Size + "" // ac"");
  out.println(""long ArchitectureSpecificData_VA="" + ArchitectureSpecificData_VA + "" // b0"");
  out.println(""long ArchitectureSpecificData_Size="" + ArchitectureSpecificData_Size + "" // b4"");
  out.println(""long RVAofGP_VA="" + RVAofGP_VA + "" // b8"");
  out.println(""long RVAofGP_Size="" + RVAofGP_Size + "" // bc"");
  out.println(""long TLSDirectory_VA="" + TLSDirectory_VA + "" // c0"");
  out.println(""long TLSDirectory_Size="" + TLSDirectory_Size + "" // c4"");
  out.println(""long LoadConfigurationDirectory_VA="" + LoadConfigurationDirectory_VA + "" // c8"");
  out.println(""long LoadConfigurationDirectory_Size="" + LoadConfigurationDirectory_Size + "" // cc"");
  out.println(""long BoundImportDirectoryinheaders_VA="" + BoundImportDirectoryinheaders_VA + "" // d0"");
  out.println(""long BoundImportDirectoryinheaders_Size="" + BoundImportDirectoryinheaders_Size + "" // d4"");
  out.println(""long ImportAddressTable_VA="" + ImportAddressTable_VA + "" // d8"");
  out.println(""long ImportAddressTable_Size="" + ImportAddressTable_Size + "" // dc"");
  out.println(""long DelayLoadImportDescriptors_VA="" + DelayLoadImportDescriptors_VA + "" // e0"");
  out.println(""long DelayLoadImportDescriptors_Size="" + DelayLoadImportDescriptors_Size + "" // e4"");
  out.println(""long COMRuntimedescriptor_VA="" + COMRuntimedescriptor_VA + "" // e8"");
  out.println(""long COMRuntimedescriptor_Size="" + COMRuntimedescriptor_Size + "" // ec"");
}
"
116,"updateVAAndSize(Vector,Vector)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEHeader.java,jsmooth,49,501,0,7,0.0655,0.2355,0,20,3,"public void updateVAAndSize(Vector oldsections,Vector newsections){
  long codebase=findNewVA(this.BaseOfCode,oldsections,newsections);
  long codesize=findNewSize(this.BaseOfCode,oldsections,newsections);
  this.BaseOfCode=codebase;
  this.SizeOfCode=codesize;
  this.AddressOfEntryPoint=findNewVA(this.AddressOfEntryPoint,oldsections,newsections);
  long database=findNewVA(this.BaseOfData,oldsections,newsections);
  long datasize=findNewSize(this.BaseOfData,oldsections,newsections);
  this.BaseOfData=database;
  long imagesize=0;
  for (int i=0; i < newsections.size(); i++) {
    PESection sect=(PESection)newsections.get(i);
    long curmax=sect.VirtualAddress + sect.VirtualSize;
    if (curmax > imagesize)     imagesize=curmax;
  }
  this.SizeOfImage=imagesize;
  ExportDirectory_Size=findNewSize(ExportDirectory_VA,oldsections,newsections);
  ExportDirectory_VA=findNewVA(ExportDirectory_VA,oldsections,newsections);
  ImportDirectory_Size=findNewSize(ImportDirectory_VA,oldsections,newsections);
  ImportDirectory_VA=findNewVA(ImportDirectory_VA,oldsections,newsections);
  ResourceDirectory_Size=findNewSize(ResourceDirectory_VA,oldsections,newsections);
  ResourceDirectory_VA=findNewVA(ResourceDirectory_VA,oldsections,newsections);
  ExceptionDirectory_Size=findNewSize(ExceptionDirectory_VA,oldsections,newsections);
  ExceptionDirectory_VA=findNewVA(ExceptionDirectory_VA,oldsections,newsections);
  SecurityDirectory_Size=findNewSize(SecurityDirectory_VA,oldsections,newsections);
  SecurityDirectory_VA=findNewVA(SecurityDirectory_VA,oldsections,newsections);
  BaseRelocationTable_Size=findNewSize(BaseRelocationTable_VA,oldsections,newsections);
  BaseRelocationTable_VA=findNewVA(BaseRelocationTable_VA,oldsections,newsections);
  DebugDirectory_Size=findNewSize(DebugDirectory_VA,oldsections,newsections);
  DebugDirectory_VA=findNewVA(DebugDirectory_VA,oldsections,newsections);
  ArchitectureSpecificData_Size=findNewSize(ArchitectureSpecificData_VA,oldsections,newsections);
  ArchitectureSpecificData_VA=findNewVA(ArchitectureSpecificData_VA,oldsections,newsections);
  RVAofGP_Size=findNewSize(RVAofGP_VA,oldsections,newsections);
  RVAofGP_VA=findNewVA(RVAofGP_VA,oldsections,newsections);
  TLSDirectory_Size=findNewSize(TLSDirectory_VA,oldsections,newsections);
  TLSDirectory_VA=findNewVA(TLSDirectory_VA,oldsections,newsections);
  LoadConfigurationDirectory_Size=findNewSize(LoadConfigurationDirectory_VA,oldsections,newsections);
  LoadConfigurationDirectory_VA=findNewVA(LoadConfigurationDirectory_VA,oldsections,newsections);
  BoundImportDirectoryinheaders_Size=findNewSize(BoundImportDirectoryinheaders_VA,oldsections,newsections);
  BoundImportDirectoryinheaders_VA=findNewVA(BoundImportDirectoryinheaders_VA,oldsections,newsections);
  ImportAddressTable_Size=findNewSize(ImportAddressTable_VA,oldsections,newsections);
  ImportAddressTable_VA=findNewVA(ImportAddressTable_VA,oldsections,newsections);
  DelayLoadImportDescriptors_Size=findNewSize(DelayLoadImportDescriptors_VA,oldsections,newsections);
  DelayLoadImportDescriptors_VA=findNewVA(DelayLoadImportDescriptors_VA,oldsections,newsections);
  COMRuntimedescriptor_Size=findNewSize(COMRuntimedescriptor_VA,oldsections,newsections);
  COMRuntimedescriptor_VA=findNewVA(COMRuntimedescriptor_VA,oldsections,newsections);
}
"
117,"findNewVA(long,Vector,Vector)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEHeader.java,jsmooth,13,64,50,5,0.1923,0.0715,0,8,5,"private long findNewVA(long current,Vector oldsections,Vector newsections){
  for (int i=0; i < oldsections.size(); i++) {
    PESection sect=(PESection)oldsections.get(i);
    if (sect.VirtualAddress == current) {
      PESection newsect=(PESection)newsections.get(i);
      return newsect.VirtualAddress;
    }
 else     if ((current > sect.VirtualAddress) && (current < (sect.VirtualAddress + sect.VirtualSize))) {
      long diff=current - sect.VirtualAddress;
      PESection newsect=(PESection)newsections.get(i);
      return newsect.VirtualAddress + diff;
    }
  }
  return 0;
}
"
118,"findNewSize(long,Vector,Vector)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEHeader.java,jsmooth,8,23,18,4,0.2292,0.068,0,6,3,"private long findNewSize(long current,Vector oldsections,Vector newsections){
  for (int i=0; i < oldsections.size(); i++) {
    PESection sect=(PESection)oldsections.get(i);
    if (sect.VirtualAddress == current) {
      PESection newsect=(PESection)newsections.get(i);
      return newsect.VirtualSize;
    }
  }
  return 0;
}
"
121,read(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEOldMSHeader.java,jsmooth,28,99,0,3,0.0714,0.2569,1,6,5,"public void read() throws IOException {
  FileChannel ch=m_pe.getChannel();
  ByteBuffer mz=ByteBuffer.allocate(64);
  mz.order(ByteOrder.LITTLE_ENDIAN);
  ch.read(mz,0);
  mz.position(0);
  byte m=mz.get();
  byte z=mz.get();
  if ((m == 77) && (z == 90)) {
  }
  e_cblp=mz.getShort();
  e_cp=mz.getShort();
  e_crlc=mz.getShort();
  e_cparhdr=mz.getShort();
  e_minalloc=mz.getShort();
  e_maxalloc=mz.getShort();
  e_ss=mz.getShort();
  e_sp=mz.getShort();
  e_csum=mz.getShort();
  e_ip=mz.getShort();
  e_cs=mz.getShort();
  e_lfarlc=mz.getShort();
  e_ovno=mz.getShort();
  for (int i=0; i < 4; i++)   e_res[i]=mz.getShort();
  e_oemid=mz.getShort();
  e_oeminfo=mz.getShort();
  for (int i=0; i < 10; i++)   e_res2[i]=mz.getShort();
  e_lfanew=mz.getInt();
}
"
122,dump(PrintStream),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEOldMSHeader.java,jsmooth,19,35,0,3,0.1022,0.2824,0,1,1,"public void dump(PrintStream out){
  out.println(""MSHeader:"");
  out.println(""e_cblp: "" + e_cblp + "" // Bytes on last page of file //  2"");
  out.println(""e_cp: "" + e_cp + "" // Pages in file //  4"");
  out.println(""e_crlc: "" + e_crlc + "" // Relocations //  6"");
  out.println(""e_cparhdr: "" + e_cparhdr + "" // Size of header in paragraphs //  8"");
  out.println(""e_minalloc: "" + e_minalloc + "" // Minimum extra paragraphs needed //  A"");
  out.println(""e_maxalloc: "" + e_maxalloc + "" // Maximum extra paragraphs needed //  C"");
  out.println(""e_ss: "" + e_ss + "" // Initial (relative) SS value //  E"");
  out.println(""e_sp: "" + e_sp + "" // Initial SP value // 10"");
  out.println(""e_csum: "" + e_csum + "" // Checksum // 12"");
  out.println(""e_ip: "" + e_ip + "" // Initial IP value // 14"");
  out.println(""e_cs: "" + e_cs + "" // Initial (relative) CS value // 16"");
  out.println(""e_lfarlc: "" + e_lfarlc + "" // File address of relocation table // 18"");
  out.println(""e_ovno: "" + e_ovno + "" // Overlay number // 1A"");
  out.println(""e_oemid: "" + e_oemid + "" // OEM identifier (for e_oeminfo) // 24"");
  out.println(""e_oeminfo: "" + e_oeminfo + "" // OEM information; e_oemid specific // 26"");
  out.println(""e_lfanew: "" + e_lfanew + "" // File address of new exe header // 3C"");
}
"
156,buildResource(long),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEResourceDirectory.java,jsmooth,7,9,0,2,0.3143,0.2714,0.5,3,1,"public ByteBuffer buildResource(long virtualBaseOffset){
  int resourceSize=m_root.diskSize();
  ByteBuffer resbuf=ByteBuffer.allocate(resourceSize);
  resbuf.order(ByteOrder.LITTLE_ENDIAN);
  resbuf.position(0);
  m_root.buildBuffer(resbuf,virtualBaseOffset);
  return resbuf;
}
"
158,"replaceResource(String,int,int,ByteBuffer)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEResourceDirectory.java,jsmooth,10,31,17,4,0.1909,0.103,1,8,7,"public boolean replaceResource(String catId,int resourceId,int langId,ByteBuffer data){
  ResourceEntry catEntry=m_root.getResourceEntry(catId);
  if ((catEntry != null) && (catEntry.Directory != null)) {
    ResourceEntry identEntry=catEntry.Directory.getResourceEntry(resourceId);
    if ((identEntry != null) && (identEntry.Directory != null)) {
      ResourceEntry langEntry=identEntry.Directory.getResourceEntry(langId);
      if ((langEntry != null) && (langEntry.Data != null)) {
        DataEntry dataslot=langEntry.Data;
        dataslot.setData(data);
        return true;
      }
    }
  }
  return false;
}
"
159,"addNewResource(String,String,String,ByteBuffer)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PEResourceDirectory.java,jsmooth,13,61,44,3,0.1429,0.0636,0.666666667,10,1,"public void addNewResource(String catId,String resourceId,String languageId,ByteBuffer data){
  DataEntry dataEntry=new DataEntry(data);
  ResourceEntry languageEntry=buildResourceEntry(languageId,dataEntry);
  ImageResourceDirectory languageDir=new ImageResourceDirectory();
  languageDir.TimeDateStamp=0x3F2CCF64;
  languageDir.addEntry(languageEntry);
  ResourceEntry identEntry=buildResourceEntry(resourceId,languageDir);
  ImageResourceDirectory identDir=new ImageResourceDirectory();
  identDir.TimeDateStamp=0x3F2CCF64;
  identDir.addEntry(identEntry);
  ResourceEntry catEntry=buildResourceEntry(catId,identDir);
  m_root.addEntry(catEntry);
}
"
166,read(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PESection.java,jsmooth,19,76,0,3,0.1022,0.2059,1,3,2,"public void read() throws IOException {
  FileChannel ch=m_pe.getChannel();
  ByteBuffer head=ByteBuffer.allocate(40);
  head.order(ByteOrder.LITTLE_ENDIAN);
  ch.position(m_baseoffset);
  ch.read(head);
  head.position(0);
  ANSI_Name=new byte[8];
  for (int i=0; i < 8; i++)   ANSI_Name[i]=head.get();
  VirtualSize=head.getInt();
  VirtualAddress=head.getInt();
  SizeOfRawData=head.getInt();
  PointerToRawData=head.getInt();
  PointerToRelocations=head.getInt();
  PointerToLinenumbers=head.getInt();
  NumberOfRelocations=head.getShort();
  NumberOfLinenumbers=head.getShort();
  Characteristics=head.getInt();
}
"
167,dump(PrintStream),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\PESection.java,jsmooth,14,13,0,2,0.1429,0.3489,0,2,2,"public void dump(PrintStream out){
  out.println(""SECTION:"");
  out.print(""  Name= "");
  for (int i=0; i < 8; i++)   out.print((char)ANSI_Name[i]);
  out.println("""");
  out.println(""  VirtualSize= "" + VirtualSize + ""  // 	The size of the section when it is mapped to memory. Must be a multiple of 4096. (8)(DWORD)"");
  out.println(""  VirtualAddress= "" + VirtualAddress + ""   // 	An rva to where it should be mapped in memory. (12)(DWORD)"");
  out.println(""  SizeOfRawData= "" + SizeOfRawData + ""   // 	The size of the section in the PE file. Must be a multiple of 512 (16)(DWORD)"");
  out.println(""  PointerToRawData= "" + PointerToRawData + ""   // 	A file based offset which points to the location of this sections data (20)(DWORD)"");
  out.println(""  PointerToRelocations= "" + PointerToRelocations + ""   // 	In EXE's this field is meaningless, and is set 0 (24)(DWORD)"");
  out.println(""  PointerToLinenumbers= "" + PointerToLinenumbers + ""   // 	This is the file-based offset of the line number table. This field is only used for debug purposes, and is usualy set to 0 (28)(DWORD)"");
  out.println(""  NumberOfRelocations= "" + NumberOfRelocations + ""   // 	In EXE's this field is meaningless, and is set 0 (32)(WORD)"");
  out.println(""  NumberOfLinenumbers= "" + NumberOfLinenumbers + ""   // 	The number of line numbers in the line number table for this section. This field is only used for debug purposes, and is usualy set to 0 (34)(WORD)"");
  out.println(""  Characteristics= "" + Characteristics + ""   // 	The kind of data stored in this section ie. Code, Data, Import data, Relocation data (36)(DWORD)"");
}
"
170,SkeletonBean(SkeletonBean),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonBean.java,jsmooth,12,28,0,3,0.1742,0.1792,1,2,2,"public SkeletonBean(SkeletonBean sb){
  m_executableName=sb.m_executableName;
  m_shortName=sb.m_shortName;
  m_description=sb.m_description;
  m_resourceCategory=sb.m_resourceCategory;
  m_resourceJarId=sb.m_resourceJarId;
  m_resourcePropsId=sb.m_resourcePropsId;
  m_skelproperties=new SkeletonProperty[sb.m_skelproperties.length];
  for (int i=0; i < m_skelproperties.length; i++) {
    m_skelproperties[i]=new SkeletonProperty(sb.m_skelproperties[i]);
  }
  m_debug=sb.m_debug;
}
"
191,initComponents(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonEditor.java,jsmooth,37,663,660,3,0.0293,0.003,0,18,1,"/** 
 * This method is called from within the constructor to
 * initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
 */
private void initComponents(){
  java.awt.GridBagConstraints gridBagConstraints;
  m_fileChooser=new javax.swing.JFileChooser();
  m_popupMenu=new javax.swing.JPopupMenu();
  m_menuAddItem=new javax.swing.JMenuItem();
  m_menuRemoveItem=new javax.swing.JMenuItem();
  jSeparator3=new javax.swing.JSeparator();
  m_menuItemUp=new javax.swing.JMenuItem();
  jPanel1=new javax.swing.JPanel();
  jLabel5=new javax.swing.JLabel();
  m_exeName=new javax.swing.JTextField();
  m_labelName=new javax.swing.JLabel();
  m_name=new javax.swing.JTextField();
  jLabel1=new javax.swing.JLabel();
  jScrollPane1=new javax.swing.JScrollPane();
  m_description=new javax.swing.JEditorPane();
  jLabel2=new javax.swing.JLabel();
  m_categoryName=new javax.swing.JTextField();
  jLabel3=new javax.swing.JLabel();
  m_jarId=new javax.swing.JTextField();
  jLabel4=new javax.swing.JLabel();
  m_propsId=new javax.swing.JTextField();
  m_cbDebug=new javax.swing.JCheckBox();
  m_tablescrollpane=new javax.swing.JScrollPane();
  m_propTable=new javax.swing.JTable();
  jMenuBar1=new javax.swing.JMenuBar();
  jMenu1=new javax.swing.JMenu();
  m_menuNew=new javax.swing.JMenuItem();
  m_menuLoadKBML=new javax.swing.JMenuItem();
  m_menuLoad=new javax.swing.JMenuItem();
  jSeparator1=new javax.swing.JSeparator();
  m_menuSaveKbml=new javax.swing.JMenuItem();
  m_menuSave=new javax.swing.JMenuItem();
  jSeparator2=new javax.swing.JSeparator();
  m_menuExit=new javax.swing.JMenuItem();
  m_fileChooser.setCurrentDirectory(new java.io.File(""c:\\""));
  m_fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter(){
    public boolean accept(    File f){
      if (f.toString().endsWith("".skel""))       return true;
      if (f.isDirectory())       return true;
      return false;
    }
    public String getDescription(){
      return ""JSmooth Skeletons (*.skel)"";
    }
  }
);
  m_fileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
  m_menuAddItem.setText(""Add item"");
  m_menuAddItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      menuAddItemActionPerformed(evt);
    }
  }
);
  m_popupMenu.add(m_menuAddItem);
  m_menuRemoveItem.setText(""RemoveItems"");
  m_menuRemoveItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      menuRemoveItemActionPerformed(evt);
    }
  }
);
  m_popupMenu.add(m_menuRemoveItem);
  m_popupMenu.add(jSeparator3);
  m_menuItemUp.setText(""Item Up"");
  m_menuItemUp.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      menuItemUpActionPerformed(evt);
    }
  }
);
  m_popupMenu.add(m_menuItemUp);
  getContentPane().setLayout(new java.awt.GridBagLayout());
  setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
  setTitle(""JSmooth Skeleton Editor"");
  addWindowListener(new java.awt.event.WindowAdapter(){
    public void windowClosing(    java.awt.event.WindowEvent evt){
      exitForm(evt);
    }
  }
);
  jPanel1.setLayout(new java.awt.GridBagLayout());
  jPanel1.setBorder(new javax.swing.border.EtchedBorder());
  jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
  jLabel5.setText(""Executable Name"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.insets=new java.awt.Insets(0,0,0,5);
  jPanel1.add(jLabel5,gridBagConstraints);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=0.5;
  jPanel1.add(m_exeName,gridBagConstraints);
  m_labelName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
  m_labelName.setText(""Short Name"");
  m_labelName.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridy=1;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.insets=new java.awt.Insets(0,0,0,5);
  jPanel1.add(m_labelName,gridBagConstraints);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridy=1;
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=0.5;
  jPanel1.add(m_name,gridBagConstraints);
  jLabel1.setText(""Description"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.WEST;
  jPanel1.add(jLabel1,gridBagConstraints);
  jScrollPane1.setViewportView(m_description);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=0.5;
  gridBagConstraints.weighty=0.5;
  jPanel1.add(jScrollPane1,gridBagConstraints);
  jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
  jLabel2.setText(""Category Name"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.insets=new java.awt.Insets(0,0,0,5);
  jPanel1.add(jLabel2,gridBagConstraints);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=0.5;
  jPanel1.add(m_categoryName,gridBagConstraints);
  jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
  jLabel3.setText(""Resource Id for JAR"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.insets=new java.awt.Insets(0,0,0,5);
  jPanel1.add(jLabel3,gridBagConstraints);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  jPanel1.add(m_jarId,gridBagConstraints);
  jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
  jLabel4.setText(""Resource Id for Properties"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.insets=new java.awt.Insets(0,0,0,5);
  jPanel1.add(jLabel4,gridBagConstraints);
  m_propsId.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      m_propsIdActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  jPanel1.add(m_propsId,gridBagConstraints);
  m_cbDebug.setText(""Mark this wrapper for debugging only"");
  m_cbDebug.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  jPanel1.add(m_cbDebug,gridBagConstraints);
  m_tablescrollpane.addMouseListener(new java.awt.event.MouseAdapter(){
    public void mousePressed(    java.awt.event.MouseEvent evt){
      tablescrollpaneMousePressed(evt);
    }
    public void mouseReleased(    java.awt.event.MouseEvent evt){
      tablescrollpaneMouseReleased(evt);
    }
  }
);
  m_propTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{{null,null,null,null,null},{null,null,null,null,null},{null,null,null,null,null},{null,null,null,null,null}},new String[]{""Id"",""Label"",""Description"",""Type"",""Value""}));
  m_propTable.addMouseListener(new java.awt.event.MouseAdapter(){
    public void mouseClicked(    java.awt.event.MouseEvent evt){
      propTableMouseClicked(evt);
    }
    public void mousePressed(    java.awt.event.MouseEvent evt){
      propTableMousePressed(evt);
    }
    public void mouseReleased(    java.awt.event.MouseEvent evt){
      propTableMouseReleased(evt);
    }
  }
);
  m_tablescrollpane.setViewportView(m_propTable);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=1.0;
  gridBagConstraints.weighty=1.0;
  jPanel1.add(m_tablescrollpane,gridBagConstraints);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=1;
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.gridheight=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=0.9;
  gridBagConstraints.weighty=0.9;
  getContentPane().add(jPanel1,gridBagConstraints);
  jMenu1.setText(""System"");
  m_menuNew.setText(""New"");
  m_menuNew.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      menuNewActionPerformed(evt);
    }
  }
);
  jMenu1.add(m_menuNew);
  m_menuLoadKBML.setText(""Load"");
  m_menuLoadKBML.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      menuLoadKBMLActionPerformed(evt);
    }
  }
);
  jMenu1.add(m_menuLoadKBML);
  m_menuLoad.setText(""Load (deprecated)"");
  m_menuLoad.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      menuLoadActionPerformed(evt);
    }
  }
);
  jMenu1.add(m_menuLoad);
  jMenu1.add(jSeparator1);
  m_menuSaveKbml.setText(""Save"");
  m_menuSaveKbml.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      saveKbmlActionPerformed(evt);
    }
  }
);
  jMenu1.add(m_menuSaveKbml);
  m_menuSave.setText(""Save (deprecated)"");
  m_menuSave.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      menuSaveActionPerformed(evt);
    }
  }
);
  jMenu1.add(m_menuSave);
  jMenu1.add(jSeparator2);
  m_menuExit.setText(""Exit"");
  jMenu1.add(m_menuExit);
  jMenuBar1.add(jMenu1);
  setJMenuBar(jMenuBar1);
  java.awt.Dimension screenSize=java.awt.Toolkit.getDefaultToolkit().getScreenSize();
  setBounds((screenSize.width - 400) / 2,(screenSize.height - 254) / 2,400,254);
}
"
209,menuLoadKBMLActionPerformed(java.awt.event.ActionEvent),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonEditor.java,jsmooth,7,15,9,2,0.2619,0.1389,1,4,3,"private void menuLoadKBMLActionPerformed(java.awt.event.ActionEvent evt){
  if (m_fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    File f=m_fileChooser.getSelectedFile();
    System.out.println(""loading "" + m_fileChooser.getSelectedFile().toString());
    try {
      SkeletonBean skel=SkeletonPersistency.loadWithJox(f);
      setSkeleton(skel);
    }
 catch (    IOException iox) {
      iox.printStackTrace();
    }
  }
}
"
210,saveKbmlActionPerformed(java.awt.event.ActionEvent),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonEditor.java,jsmooth,9,23,10,2,0.2593,0.1759,1,4,4,"private void saveKbmlActionPerformed(java.awt.event.ActionEvent evt){
  if (m_fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
    File f=m_fileChooser.getSelectedFile();
    if (f.toString().endsWith("".skel"") == false) {
      f=new File(f.getAbsolutePath() + "".skel"");
    }
    System.out.println(""loading "" + m_fileChooser.getSelectedFile().toString());
    try {
      SkeletonBean skel=getSkeleton();
      SkeletonPersistency.saveWithJox(f,skel);
    }
 catch (    IOException iox) {
      iox.printStackTrace();
    }
  }
}
"
220,menuSaveActionPerformed(java.awt.event.ActionEvent),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonEditor.java,jsmooth,9,23,10,2,0.2593,0.1759,1,4,4,"private void menuSaveActionPerformed(java.awt.event.ActionEvent evt){
  if (m_fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
    File f=m_fileChooser.getSelectedFile();
    if (f.toString().endsWith("".skel"") == false) {
      f=new File(f.getAbsolutePath() + "".skel"");
    }
    System.out.println(""loading "" + m_fileChooser.getSelectedFile().toString());
    try {
      SkeletonBean skel=getSkeleton();
      SkeletonPersistency.save(f,skel);
    }
 catch (    IOException iox) {
      iox.printStackTrace();
    }
  }
}
"
221,menuLoadActionPerformed(java.awt.event.ActionEvent),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonEditor.java,jsmooth,7,15,9,2,0.2619,0.1389,1,4,3,"private void menuLoadActionPerformed(java.awt.event.ActionEvent evt){
  if (m_fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    File f=m_fileChooser.getSelectedFile();
    System.out.println(""loading "" + m_fileChooser.getSelectedFile().toString());
    try {
      SkeletonBean skel=SkeletonPersistency.load(f);
      setSkeleton(skel);
    }
 catch (    IOException iox) {
      iox.printStackTrace();
    }
  }
}
"
226,"showPopupMenu(java.awt.event.MouseEvent,JComponent)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonEditor.java,jsmooth,6,12,9,3,0.25,0.1071,0,3,2,"public void showPopupMenu(java.awt.event.MouseEvent evt,JComponent comp){
  int r=m_propTable.rowAtPoint(new Point(evt.getX(),evt.getY()));
  if (r != -1) {
    m_propTable.setRowSelectionInterval(r,r);
  }
  m_popupMenu.show(comp,evt.getX(),evt.getY());
}
"
229,SkeletonList(File),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonList.java,jsmooth,9,32,28,3,0.1852,0.0556,1,6,4,"/** 
 * Creates a new instance of SkeletonList 
 */
public SkeletonList(File directoryToScan){
  File[] subdirs=directoryToScan.listFiles();
  SkelSuffixFilter filter=new SkelSuffixFilter();
  for (int i=0; i < subdirs.length; i++) {
    if (subdirs[i].isDirectory()) {
      File[] skeldescs=subdirs[i].listFiles((java.io.FileFilter)filter);
      for (int si=0; si < skeldescs.length; si++) {
        addSkeletonDirectory(subdirs[i],skeldescs[si]);
      }
    }
  }
}
"
230,"addSkeletonDirectory(File,File)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonList.java,jsmooth,10,35,25,6,0.15,0.0821,0.666666667,4,5,"public void addSkeletonDirectory(File dir,File desc){
  try {
    SkeletonBean skel=SkeletonPersistency.loadWithJox(desc);
    if ((skel != null) && (skel.getShortName() != null)) {
      m_skelsToDirs.put(skel,dir);
      if (skel.isDebug() == false)       m_nameToNoDebugSkel.put(skel.getShortName(),skel);
 else       m_nameToDebugSkel.put(skel.getShortName(),skel);
      m_nameToSkel.put(skel.getShortName(),skel);
    }
  }
 catch (  Exception exc) {
  }
}
"
239,load(File),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonPersistency.java,jsmooth,10,37,29,4,0.22,0.0947,0,5,2,"public static SkeletonBean load(File fin) throws IOException {
  FileInputStream fis=new FileInputStream(fin);
  try {
    XMLDecoder dec=new XMLDecoder(fis);
    dec.setOwner(SkeletonPersistency.class);
    SkeletonBean obj=(SkeletonBean)dec.readObject();
    fis.close();
    return obj;
  }
 catch (  Exception exc) {
    throw new IOException(exc.toString());
  }
}
"
240,loadWithJox(File),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonPersistency.java,jsmooth,15,95,85,8,0.16,0.063,0,5,2,"public static SkeletonBean loadWithJox(File fin) throws IOException {
  Object bean=null;
  try {
    FileReader fr=new FileReader(fin);
    JOXBeanReader jbr=new JOXBeanReader(fr);
    bean=jbr.readObject(SkeletonBean.class);
    jbr.close();
    fr.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return (SkeletonBean)bean;
}
"
241,"save(File,SkeletonBean)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonPersistency.java,jsmooth,10,38,31,5,0.2,0.0873,0,5,2,"public static void save(File fout,SkeletonBean obj) throws IOException {
  FileOutputStream fos=new FileOutputStream(fout);
  try {
    XMLEncoder enc=new XMLEncoder(fos);
    enc.writeObject(obj);
    enc.close();
  }
 catch (  Exception ex) {
    throw new IOException(ex.toString());
  }
 finally {
    fos.close();
  }
}
"
242,"saveWithJox(File,SkeletonBean)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonPersistency.java,jsmooth,8,21,14,3,0.25,0.131,0,5,2,"public static void saveWithJox(File fout,SkeletonBean obj) throws IOException {
  try {
    FileWriter fw=new FileWriter(fout);
    JOXBeanWriter jbw=new JOXBeanWriter(fw);
    jbw.writeObject(""jsmoothskeleton"",obj);
    jbw.close();
    fw.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
244,SkeletonProperty(SkeletonProperty),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonProperty.java,jsmooth,7,11,1,3,0.2381,0.1667,0,1,1,"public SkeletonProperty(SkeletonProperty sp){
  m_idName=sp.m_idName;
  m_shortName=sp.m_shortName;
  m_description=sp.m_description;
  m_type=sp.m_type;
  m_value=sp.m_value;
}
"
270,initComponents(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonPropertyEditor.java,jsmooth,8,25,22,2,0.175,0.1071,0,5,1,"/** 
 * This method is called from within the constructor to
 * initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
 */
private void initComponents(){
  m_popupMenu=new javax.swing.JPopupMenu();
  m_menuAddItem=new javax.swing.JMenuItem();
  m_menuRemoveItem=new javax.swing.JMenuItem();
  jScrollPane1=new javax.swing.JScrollPane();
  m_table=new javax.swing.JTable();
  m_menuAddItem.setText(""Add item"");
  m_menuAddItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      m_menuAddItemActionPerformed(evt);
    }
  }
);
  m_popupMenu.add(m_menuAddItem);
  m_menuRemoveItem.setText(""RemoveItems"");
  m_menuRemoveItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      m_menuRemoveItemActionPerformed(evt);
    }
  }
);
  m_popupMenu.add(m_menuRemoveItem);
  setLayout(new java.awt.BorderLayout());
  jScrollPane1.setBorder(null);
  m_table.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{{null,null,null,null},{null,null,null,null},{null,null,null,null},{null,null,null,null}},new String[]{""Title 1"",""Title 2"",""Title 3"",""Title 4""}));
  m_table.setTableHeader(null);
  m_table.addMouseListener(new java.awt.event.MouseAdapter(){
    public void mouseClicked(    java.awt.event.MouseEvent evt){
      tableMousePressed(evt);
    }
    public void mousePressed(    java.awt.event.MouseEvent evt){
      tableMousePressed(evt);
    }
    public void mouseReleased(    java.awt.event.MouseEvent evt){
      tableMousePressed(evt);
    }
  }
);
  jScrollPane1.setViewportView(m_table);
  add(jScrollPane1,java.awt.BorderLayout.CENTER);
}
"
279,showPopupMenu(java.awt.event.MouseEvent),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonPropertyEditor.java,jsmooth,11,52,49,4,0.1157,0.0278,0,2,2,"public void showPopupMenu(java.awt.event.MouseEvent evt){
  int r=m_table.rowAtPoint(new Point(evt.getX(),evt.getY()));
  if (r != -1) {
    m_table.setRowSelectionInterval(r,r);
  }
  m_popupMenu.show(this,evt.getX(),evt.getY());
}
"
292,"swapItems(int,int)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\skeleton\SkeletonPropertyTableModel.java,jsmooth,7,6,0,2,0.4286,0.2714,0,4,5,"public void swapItems(int offset1,int offset2){
  if ((offset1 >= 0) && (offset1 < m_props.size()) && (offset2 >= 0)&& (offset2 < m_props.size())) {
    Object o1=m_props.get(offset1);
    Object o2=m_props.get(offset2);
    m_props.set(offset1,o2);
    m_props.set(offset2,o1);
  }
  fireTableRowsUpdated(Math.min(offset1,offset2),Math.max(offset1,offset2));
}
"
299,loadImages(File),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\util\codec\IcoCodec.java,jsmooth,31,402,339,10,0.0783,0.0458,0.8,15,7,"static public BufferedImage[] loadImages(File f) throws IOException {
  InputStream istream=new FileInputStream(f);
  BufferedInputStream buffin=new BufferedInputStream(istream);
  BinaryInputStream in=new BinaryInputStream(buffin);
  try {
    in.mark(32000);
    IconDir dir=new IconDir(in);
    IconEntry[] entries=new IconEntry[dir.idCount];
    BufferedImage[] images=new BufferedImage[dir.idCount];
    for (int i=0; i < dir.idCount; i++) {
      entries[i]=new IconEntry(in);
    }
    IconEntry entry=entries[0];
    for (int i=0; i < dir.idCount; i++) {
      in.reset();
      in.skip(entries[i].dwImageOffset);
      IconHeader header=new IconHeader(in);
      long toskip=header.Size - 40;
      if (toskip > 0)       in.skip((int)toskip);
      BufferedImage image=new BufferedImage((int)header.Width,(int)header.Height / 2,BufferedImage.TYPE_INT_ARGB);
switch (header.BitsPerPixel) {
case 4:
case 8:
        loadPalettedImage(in,entries[i],header,image);
      break;
default :
    throw new Exception(""Unsupported ICO color depth: "" + header.BitsPerPixel);
}
images[i]=image;
}
return images;
}
 catch (Exception exc) {
exc.printStackTrace();
}
return null;
}
"
300,"loadPalettedImage(BinaryInputStream,IconEntry,IconHeader,BufferedImage)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\util\codec\IcoCodec.java,jsmooth,41,734,648,10,0.0722,0.0332,1,24,13,"static private void loadPalettedImage(BinaryInputStream in,IconEntry entry,IconHeader header,BufferedImage image) throws Exception {
  int cols=(int)header.ColorsUsed;
  if (cols == 0) {
    if (entry.bColorCount != 0)     cols=entry.bColorCount;
 else     cols=1 << header.BitsPerPixel;
  }
  int[] redp=new int[cols];
  int[] greenp=new int[cols];
  int[] bluep=new int[cols];
  for (int i=0; i < cols; i++) {
    bluep[i]=in.readUByte();
    greenp[i]=in.readUByte();
    redp[i]=in.readUByte();
    in.readUByte();
  }
  int xorbytes=(((int)header.Height / 2) * (int)header.Width);
  int readbytes=0;
  for (int y=(int)(header.Height / 2) - 1; y >= 0; y--) {
    for (int x=0; x < header.Width; x++) {
switch (header.BitsPerPixel) {
case 4:
{
          int pix=in.readUByte();
          readbytes++;
          int col1=(pix >> 4) & 0x0F;
          int col2=pix & 0x0F;
          image.setRGB(x,y,(0xFF << 24) | (redp[col1] << 16) | (greenp[col1] << 8)| bluep[col1]);
          image.setRGB(++x,y,(0xFF << 24) | (redp[col2] << 16) | (greenp[col2] << 8)| bluep[col2]);
        }
      break;
case 8:
{
      int col1=in.readUByte();
      readbytes++;
      image.setRGB(x,y,(0xFF << 24) | (redp[col1] << 16) | (greenp[col1] << 8)| bluep[col1]);
    }
  break;
}
}
}
int height=(int)(header.Height / 2);
int rowsize=(int)header.Width / 8;
if ((rowsize % 4) > 0) {
rowsize+=4 - (rowsize % 4);
}
int[] andbytes=new int[rowsize * height];
for (int i=0; i < andbytes.length; i++) andbytes[i]=in.readUByte();
for (int y=height - 1; y >= 0; y--) {
for (int x=0; x < header.Width; x++) {
int offset=((height - (y + 1)) * rowsize) + (x / 8);
if ((andbytes[offset] & (1 << (7 - x % 8))) != 0) {
image.setRGB(x,y,0);
}
}
}
}
"
301,main(String[]),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\util\codec\IcoCodec.java,jsmooth,10,38,31,6,0.1667,0.0913,0,5,1,"static public void main(String[] args) throws Exception {
  File f=new File(args[0]);
  Image img=IcoCodec.loadImages(f)[0];
  javax.swing.JFrame jf=new javax.swing.JFrame(""Test"");
  javax.swing.JButton button=new javax.swing.JButton(new javax.swing.ImageIcon(img));
  jf.getContentPane().add(button);
  jf.pack();
  jf.setVisible(true);
}
"
302,"quantizeImage(int,int)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\util\codec\Quantize.java,jsmooth,15,95,85,11,0.0933,0.0719,0.25,3,1,"/** 
 * Reduce the image to the given number of colors. The pixels are
 * reduced in place.
 * @return The new color palette.
 */
public static int[] quantizeImage(int pixels[][],int max_colors){
  Cube cube=new Cube(pixels,max_colors);
  cube.classification();
  cube.reduction();
  cube.assignment();
  return cube.colormap;
}
"
324,readIntBE(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\util\io\BinaryInputStream.java,jsmooth,7,17,13,3,0.2857,0.05,0,4,1,"public int readIntBE() throws IOException {
  int a=read();
  int b=read();
  int c=read();
  int d=read();
  return ((a & 0xff) << 24) | ((b & 0xff) << 16) | ((c & 0xff) << 8)| (d & 0xff);
}
"
325,readUIntBE(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\util\io\BinaryInputStream.java,jsmooth,7,17,13,3,0.2857,0.05,0,4,1,"public long readUIntBE() throws IOException {
  int a=read();
  int b=read();
  int c=read();
  int d=read();
  return (long)((a & 0xff) << 24) | (long)((b & 0xff) << 16) | (long)((c & 0xff) << 8)| (long)(d & 0xff);
}
"
326,readIntLE(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\util\io\BinaryInputStream.java,jsmooth,7,17,13,3,0.2857,0.05,0,4,1,"public int readIntLE() throws IOException {
  int a=readByte();
  int b=readByte();
  int c=readByte();
  int d=readByte();
  return ((d & 0xff) << 24) | ((c & 0xff) << 16) | ((b & 0xff) << 8)| (a & 0xff);
}
"
327,readUIntLE(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\util\io\BinaryInputStream.java,jsmooth,7,17,13,3,0.2857,0.05,0,4,1,"public long readUIntLE() throws IOException {
  int a=readByte();
  int b=readByte();
  int c=readByte();
  int d=readByte();
  return (long)((d & 0xff) << 24) | (long)((c & 0xff) << 16) | (long)((b & 0xff) << 8)| (long)(a & 0xff);
}
"
329,main(String[]),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\cmdline\CommandLine.java,jsmooth,27,316,281,10,0.085,0.0458,0.5,13,6,"public static void main(String[] args){
  if (args.length != 1) {
    printUsage();
    System.exit(10);
  }
  File prj=new File(args[0]);
  if (prj.exists() == false) {
    prj=new File(prj.toString() + "".jsmooth"");
  }
  if (prj.exists() == false) {
    System.err.println(""Error: project file <"" + args[0] + ""> not found"");
    System.exit(10);
  }
  System.setProperty(""java.awt.headless"",""true"");
  java.awt.Toolkit tk=java.awt.Toolkit.getDefaultToolkit();
  String jsmoothbase=System.getProperty(""jsmooth.basedir"");
  try {
    JSmoothModelBean model=JSmoothModelPersistency.load(prj);
    File basedir=prj.getParentFile();
    File skelbase=new File(""skeletons"");
    if (jsmoothbase != null) {
      skelbase=new File(new File(jsmoothbase),""skeletons"");
    }
    SkeletonList skelList=new SkeletonList(skelbase);
    File out=new File(basedir,model.getExecutableName());
    SkeletonBean skel=skelList.getSkeleton(model.getSkeletonName());
    File skelroot=skelList.getDirectory(skel);
    ExeCompiler compiler=new ExeCompiler();
    compiler.compile(skelroot,skel,basedir,model,out);
    System.exit(0);
  }
 catch (  Exception exc) {
    System.err.println(""Incorrect project file!"");
  }
  System.exit(20);
}
"
332,initComponents(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\AboutBox.java,jsmooth,17,136,136,7,0.0588,0,0,4,1,"/** 
 * This method is called from within the constructor to
 * initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
 */
private void initComponents(){
  java.awt.GridBagConstraints gridBagConstraints;
  jPanel1=new javax.swing.JPanel();
  jLabel3=new javax.swing.JLabel();
  m_labelVersion=new javax.swing.JLabel();
  jLabel5=new javax.swing.JLabel();
  jLabel1=new javax.swing.JLabel();
  jLabel2=new javax.swing.JLabel();
  jScrollPane1=new javax.swing.JScrollPane();
  m_licenceTextArea=new javax.swing.JTextArea();
  jPanel2=new javax.swing.JPanel();
  m_buttonOk=new javax.swing.JButton();
  setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
  setTitle(""About JSmooth"");
  setModal(true);
  setResizable(false);
  addWindowListener(new java.awt.event.WindowAdapter(){
    public void windowClosing(    java.awt.event.WindowEvent evt){
      closeDialog(evt);
    }
  }
);
  jPanel1.setLayout(new java.awt.GridBagLayout());
  jPanel1.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5,5,5,5)),new javax.swing.border.EtchedBorder()));
  jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  jLabel3.setText(""<html><big>JSmooth</big></html>"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=2;
  gridBagConstraints.gridy=1;
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=0.5;
  jPanel1.add(jLabel3,gridBagConstraints);
  m_labelVersion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  m_labelVersion.setText(""Unknown Version"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridy=2;
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=0.5;
  jPanel1.add(m_labelVersion,gridBagConstraints);
  jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/icons/gnome-application-x-jar.png"")));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=0.1;
  jPanel1.add(jLabel5,gridBagConstraints);
  jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  jLabel1.setText(""<html><b>Author</b></html>"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.insets=new java.awt.Insets(5,0,0,0);
  jPanel1.add(jLabel1,gridBagConstraints);
  jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  jLabel2.setText(""Rodrigo Reyes <reyes@charabia.net>"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  jPanel1.add(jLabel2,gridBagConstraints);
  m_licenceTextArea.setEditable(false);
  m_licenceTextArea.setLineWrap(true);
  m_licenceTextArea.setText(""This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA."");
  m_licenceTextArea.setWrapStyleWord(true);
  jScrollPane1.setViewportView(m_licenceTextArea);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.gridheight=3;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.insets=new java.awt.Insets(10,10,10,10);
  gridBagConstraints.weightx=1.0;
  gridBagConstraints.weighty=1.0;
  jPanel1.add(jScrollPane1,gridBagConstraints);
  getContentPane().add(jPanel1,java.awt.BorderLayout.CENTER);
  m_buttonOk.setText(""OK"");
  m_buttonOk.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      buttonOkActionPerformed(evt);
    }
  }
);
  jPanel2.add(m_buttonOk);
  getContentPane().add(jPanel2,java.awt.BorderLayout.SOUTH);
  java.awt.Dimension screenSize=java.awt.Toolkit.getDefaultToolkit().getScreenSize();
  setBounds((screenSize.width - 450) / 2,(screenSize.height - 350) / 2,450,350);
}
"
350,EditorPool(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\EditorPool.java,jsmooth,18,153,153,3,-1,-1,0,0,1,"public EditorPool(){
  add(net.charabia.jsmoothgen.application.gui.editors.SkeletonChooser.class);
  add(net.charabia.jsmoothgen.application.gui.editors.SkeletonProperties.class);
  add(net.charabia.jsmoothgen.application.gui.editors.ExecutableName.class);
  add(net.charabia.jsmoothgen.application.gui.editors.ExecutableIcon.class);
  add(net.charabia.jsmoothgen.application.gui.editors.CurrentDirectory.class);
  add(net.charabia.jsmoothgen.application.gui.editors.MainClass.class);
  add(net.charabia.jsmoothgen.application.gui.editors.ApplicationArguments.class);
  add(net.charabia.jsmoothgen.application.gui.editors.EmbeddedJar.class);
  add(net.charabia.jsmoothgen.application.gui.editors.ClassPath.class);
  add(net.charabia.jsmoothgen.application.gui.editors.MinVersion.class);
  add(net.charabia.jsmoothgen.application.gui.editors.MaxVersion.class);
  add(net.charabia.jsmoothgen.application.gui.editors.JVMBundle.class);
  add(net.charabia.jsmoothgen.application.gui.editors.JVMSearchSequence.class);
  add(net.charabia.jsmoothgen.application.gui.editors.MaxMemoryHeap.class);
  add(net.charabia.jsmoothgen.application.gui.editors.InitialMemoryHeap.class);
  add(net.charabia.jsmoothgen.application.gui.editors.JavaProperties.class);
}
"
353,Main(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\Main.java,jsmooth,11,51,47,7,0.1212,0.0374,0.5,2,1,"private Main(){
  Splash splash=new Splash(this,""/icons/splash.png"",false);
  splash.setVersion(VERSION);
  splash.show();
  m_projectFileChooser.addChoosableFileFilter(new SimpleFileFilter(""jsmooth"",""JSmooth Project Files""));
  getContentPane().setLayout(new BorderLayout());
  m_panel=new MasterPanel();
  getContentPane().add(BorderLayout.CENTER,m_panel);
  setupMenus();
  setupToolBar();
  addWindowListener(new java.awt.event.WindowAdapter(){
    public void windowClosing(    java.awt.event.WindowEvent evt){
      EXIT.actionPerformed(null);
    }
  }
);
  setTitle(""Untitled"");
  loadWindowSettings();
  splash.dispose();
}
"
359,MasterPanel(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\MasterPanel.java,jsmooth,17,128,120,6,0.0798,0.0351,0,1,1,"public MasterPanel(){
  setLayout(new BorderLayout());
  add(BorderLayout.WEST,m_scrollpane=new JScrollPane(m_leftBar));
  JScrollPane scp=new JScrollPane(m_mainpanel);
  m_mainpanelVBar=scp.getVerticalScrollBar();
  add(BorderLayout.CENTER,scp);
  scp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  m_mainpanel.setLayout(new RiverLayout());
  addAction(""Welcome"",""/icons/stock_form-properties.png"",m_jsInfo);
  addAction(""Skeleton"",""/icons/stock_new-template.png"",m_skelElements);
  addAction(""Executable"",""/icons/stock_autopilot-24.png"",m_execElements);
  addAction(""Application"",""/icons/stock_form-image-control.png"",m_appElements);
  addAction(""JVM Selection"",""/icons/stock_search.png"",m_jvmSelElements);
  addAction(""JVM Configuration"",""/icons/stock_form-properties.png"",m_jvmCfgElements);
  setupPanel(m_jsInfo);
}
"
361,"addAction(String,String,Object[])",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\MasterPanel.java,jsmooth,12,62,58,9,0.119,0.0272,0,6,1,"private void addAction(final String name,String iconloc,final Object[] els){
  final Action a=new AbstractAction(name,new ImageIcon(getClass().getResource(iconloc))){
    public void actionPerformed(    ActionEvent e){
      if (m_currentPanelName.equals(name))       return;
      setupPanel(els);
      m_currentPanelName=name;
    }
  }
;
  JToggleButton jtb=new JToggleButton(a);
  m_leftGroup.add(jtb);
  m_leftBar.add(jtb);
}
"
365,detachAll(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\MasterPanel.java,jsmooth,6,8,1,2,0.3667,0.2,0.666666667,2,4,"private void detachAll(){
  for (Iterator i=m_displayedElements.iterator(); i.hasNext(); ) {
    Editor ed=(Editor)i.next();
    if (ed instanceof JSmoothModelBean.Listener)     m_model.removeListener((JSmoothModelBean.Listener)ed);
    if (ed instanceof JSmoothModelBean.SkeletonChangedListener)     m_model.removeSkeletonChangedListener((JSmoothModelBean.SkeletonChangedListener)ed);
    ed.detach();
  }
}
"
366,attachAll(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\MasterPanel.java,jsmooth,9,22,8,2,0.2698,0.1574,0.5,3,5,"private void attachAll(){
  for (Iterator i=m_displayedElements.iterator(); i.hasNext(); ) {
    Editor ed=(Editor)i.next();
    File basedir=null;
    if (m_modelLocation != null)     basedir=m_modelLocation.getParentFile();
    ed.attach(m_model,basedir);
    if (ed instanceof JSmoothModelBean.Listener)     m_model.addListener((JSmoothModelBean.Listener)ed);
    if (ed instanceof JSmoothModelBean.SkeletonChangedListener)     m_model.addSkeletonChangedListener((JSmoothModelBean.SkeletonChangedListener)ed);
    ed.dataChanged();
  }
}
"
368,"newModel(JSmoothModelBean,java.io.File)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\MasterPanel.java,jsmooth,6,15,15,6,0.1667,0,0,2,1,"public void newModel(JSmoothModelBean bean,java.io.File location){
  detachAll();
  m_model=bean;
  m_modelLocation=location;
  attachAll();
}
"
369,openFile(java.io.File),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\MasterPanel.java,jsmooth,8,24,20,5,0.225,0.0733,1,3,2,"public boolean openFile(java.io.File f){
  m_modelLocation=f;
  try {
    JSmoothModelBean model=JSmoothModelPersistency.load(m_modelLocation);
    newModel(model,f);
    return true;
  }
 catch (  java.io.IOException iox) {
    iox.printStackTrace();
    return false;
  }
}
"
370,save(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\MasterPanel.java,jsmooth,10,41,37,7,0.1667,0.0641,1,1,3,"public boolean save(){
  if (m_modelLocation == null)   return false;
  try {
    fireUpdateModel();
    m_model.normalizePaths(m_modelLocation.getParentFile(),true);
    JSmoothModelPersistency.save(m_modelLocation,m_model);
    return true;
  }
 catch (  java.io.IOException iox) {
    iox.printStackTrace();
  }
  return false;
}
"
373,runexe(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\MasterPanel.java,jsmooth,10,41,37,6,0.1571,0.047,1,4,2,"public void runexe(){
  fireUpdateModel();
  try {
    File basedir=m_modelLocation.getParentFile();
    File f=new File(basedir,m_model.getExecutableName());
    String[] cmd=new String[]{f.getAbsolutePath()};
    CommandRunner.run(cmd,f.getParentFile());
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
}
"
377,main(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\MasterPanel.java,jsmooth,8,22,16,5,0.2188,0.1667,0,3,2,"public static void main(String args[]){
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e) {
  }
  JFrame test=new JFrame(""test"");
  test.getContentPane().add(new MasterPanel());
  test.pack();
  test.setVisible(true);
}
"
382,"Splash(Frame,String,boolean)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\Splash.java,jsmooth,11,47,39,5,0.1616,0.0586,1,6,3,"public Splash(Frame parent,String imagefilename,boolean dialog){
  if (dialog) {
    m_window=new MyDialog(parent);
  }
 else {
    m_window=new MyWindow(parent);
  }
  javax.swing.ImageIcon icon=new javax.swing.ImageIcon(getClass().getResource(imagefilename));
  m_splashImage=icon.getImage();
  MediaTracker loader=new MediaTracker(m_window);
  loader.addImage(m_splashImage,0);
  try {
    loader.waitForAll();
  }
 catch (  Exception e) {
  }
}
"
383,show(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\Splash.java,jsmooth,6,11,7,3,0.2778,0.0905,0,1,1,"public void show(){
  Dimension screendim=Toolkit.getDefaultToolkit().getScreenSize();
  m_window.setSize(m_splashImage.getWidth(m_window),m_splashImage.getHeight(m_window));
  m_window.setLocation((screendim.width - m_splashImage.getWidth(m_window)) / 2,(screendim.height - m_splashImage.getHeight(m_window)) / 2);
  m_window.setVisible(true);
}
"
393,run(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\CompileAction.java,jsmooth,7,11,1,3,0.7143,0.5,0.4,1,2,"public boolean run(){
  System.out.println(""[DEBUG] Compiling, stand by..."");
  JSmoothApplication app=getApplication();
  if (!app.hasProjectFile()) {
    app.consoleMessage(""Cannot compile without a project file. Please save the project or load a new one, then try again."");
    return false;
  }
 else {
    app.saveProject();
  }
  return app.compileProject();
}
"
395,createPageArea(Composite),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\ExecutablePage.java,jsmooth,13,56,34,3,0.1538,0.1067,1,20,1,"public Control createPageArea(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout(3,false));
  Label label=new Label(top,SWT.NONE);
  label.setText(""Executable name:"");
  GridData grid=new GridData(GridData.FILL);
  label.setLayoutData(grid);
  exe=new Text(top,SWT.BORDER);
  grid=new GridData(GridData.FILL_HORIZONTAL);
  grid.widthHint=250;
  exe.setLayoutData(grid);
  exe.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setModelExename(exe.getText());
    }
  }
);
  Button button=new Button(top,SWT.NONE);
  button.setText(""Browse..."");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(getShell(),SWT.SAVE);
      dialog.setText(""Executable Name"");
      String file=dialog.open();
      if (file != null)       ExecutablePage.this.exe.setText(file);
    }
  }
);
  grid=new GridData(GridData.FILL);
  grid.widthHint=100;
  button.setLayoutData(grid);
  label=new Label(top,SWT.NONE);
  label.setText(""Current directory:"");
  grid=new GridData(GridData.FILL);
  label.setLayoutData(grid);
  dir=new Text(top,SWT.BORDER);
  grid=new GridData(GridData.FILL_HORIZONTAL);
  grid.widthHint=250;
  dir.setLayoutData(grid);
  dir.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setModelCurrentdir(dir.getText());
    }
  }
);
  button=new Button(top,SWT.NONE);
  button.setText(""Browse..."");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dialog=new DirectoryDialog(getShell(),SWT.SAVE);
      dialog.setText(""Current Directory"");
      String dir=dialog.open();
      if (dir != null)       ExecutablePage.this.dir.setText(dir);
    }
  }
);
  grid=new GridData(GridData.FILL);
  grid.widthHint=100;
  button.setLayoutData(grid);
  Group group=new Group(top,SWT.NONE);
  GridLayout layout=new GridLayout();
  group.setLayout(layout);
  grid=new GridData(GridData.FILL | GridData.HORIZONTAL_ALIGN_CENTER);
  grid.horizontalSpan=3;
  group.setLayoutData(grid);
  group.setText(""Executable icon"");
  icon=new Label(group,SWT.BORDER | SWT.FLAT);
  grid=new GridData(GridData.FILL | GridData.HORIZONTAL_ALIGN_CENTER);
  grid.widthHint=48;
  grid.heightHint=48;
  icon.setLayoutData(grid);
  button=new Button(group,SWT.NONE);
  button.setText(""Browse..."");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(getShell(),SWT.OPEN);
      dialog.setText(""Icon File"");
      String file=dialog.open();
      if (file == null)       return;
      setModelIcon(setIcon(file) ? file : null);
    }
  }
);
  grid=new GridData(GridData.FILL);
  grid.widthHint=100;
  button.setLayoutData(grid);
  return top;
}
"
406,load(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\ExecutablePage.java,jsmooth,9,26,16,3,0.2222,0.1057,0.6,6,3,"public void load(){
  JSmoothModelBean jsmodel=getApplication().getModelBean();
  String exename=jsmodel.getExecutableName();
  if (exename == null)   exename="""";
  this.exe.setText(exename);
  String iconfile=jsmodel.getIconLocation();
  setIcon(iconfile);
  String dirname=jsmodel.getCurrentDirectory();
  if (dirname == null)   dirname="""";
  this.dir.setText(dirname);
}
"
410,createPageArea(Composite),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JavaAppPage.java,jsmooth,25,234,168,3,0.0978,0.0918,1,25,1,"public Control createPageArea(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout());
  Composite composite=new Composite(top,SWT.NONE);
  GridLayout layout=new GridLayout(3,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  usejar=new Button(composite,SWT.CHECK);
  usejar.setText(""Use embedded JAR"");
  usejar.addSelectionListener(LISTENER_USEJAR);
  GridData grid=new GridData(GridData.FILL);
  grid.horizontalSpan=3;
  usejar.setLayoutData(grid);
  Label label=new Label(composite,SWT.NONE);
  label.setText(""JAR location:"");
  grid=new GridData(GridData.FILL);
  label.setLayoutData(grid);
  jar=new Text(composite,SWT.BORDER);
  grid=new GridData(GridData.FILL_HORIZONTAL);
  grid.widthHint=250;
  jar.setLayoutData(grid);
  jar.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setModelJar(jar.getText());
    }
  }
);
  setjar=new Button(composite,SWT.NONE);
  setjar.setText(""Browse..."");
  setjar.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(getShell(),SWT.SAVE);
      dialog.setText(""JAR Location"");
      String file=dialog.open();
      if (file != null)       jar.setText(file);
      setModelJar(file);
    }
  }
);
  grid=new GridData(GridData.FILL);
  grid.widthHint=100;
  setjar.setLayoutData(grid);
  label=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  grid=new GridData(GridData.FILL_HORIZONTAL);
  grid.horizontalSpan=3;
  label.setLayoutData(grid);
  label=new Label(composite,SWT.NONE);
  label.setText(""Main class:"");
  grid=new GridData(GridData.FILL);
  label.setLayoutData(grid);
  mainclass=new Text(composite,SWT.BORDER);
  grid=new GridData(GridData.FILL_HORIZONTAL);
  grid.widthHint=250;
  mainclass.setLayoutData(grid);
  mainclass.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setModelMainclass(mainclass.getText());
    }
  }
);
  new Label(composite,SWT.NONE);
  label=new Label(composite,SWT.NONE);
  label.setText(""Arguments:"");
  grid=new GridData(GridData.FILL);
  label.setLayoutData(grid);
  args=new Text(composite,SWT.BORDER);
  grid=new GridData(GridData.FILL_HORIZONTAL);
  grid.widthHint=250;
  args.setLayoutData(grid);
  args.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setModelArguments(args.getText());
    }
  }
);
  new Label(composite,SWT.NONE);
  Group group=new Group(top,SWT.NONE);
  group.setText(""Classpath"");
  group.setLayout(new GridLayout());
  grid=new GridData(GridData.FILL_HORIZONTAL);
  grid.horizontalSpan=3;
  group.setLayoutData(grid);
  group.setLayout(new GridLayout(2,false));
  classpath=new List(group,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI);
  grid=new GridData(GridData.FILL_BOTH);
  grid.widthHint=250;
  grid.heightHint=classpath.getItemHeight() * 10;
  classpath.setLayoutData(grid);
  classpath.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      updateRemoveButton();
    }
  }
);
  composite=new Composite(group,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=2;
  composite.setLayout(layout);
  addjar=new Button(composite,SWT.NONE);
  addjar.setText(""Add JAR File..."");
  addjar.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(getShell(),SWT.OPEN | SWT.MULTI);
      dialog.setText(""JAR File"");
      String choice=dialog.open();
      if (choice != null) {
        String path=dialog.getFilterPath();
        String[] filenames=dialog.getFileNames();
        ArrayList files=new ArrayList();
        for (int i=0; i < filenames.length; i++) {
          files.add(path + File.separator + filenames[i]);
        }
        addClasspathItems((String[])files.toArray(new String[0]));
      }
    }
  }
);
  grid=new GridData(GridData.FILL_HORIZONTAL);
  grid.widthHint=130;
  addjar.setLayoutData(grid);
  addfolder=new Button(composite,SWT.NONE);
  addfolder.setText(""Add Class Folder..."");
  addfolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dialog=new DirectoryDialog(getShell(),SWT.SAVE);
      dialog.setText(""Class Folder"");
      String folder=dialog.open();
      if (folder != null)       addClasspathItems(new String[]{folder});
    }
  }
);
  grid=new GridData(GridData.FILL_HORIZONTAL);
  grid.widthHint=130;
  addfolder.setLayoutData(grid);
  remove=new Button(composite,SWT.NONE);
  remove.setText(""Remove"");
  remove.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      removeItem();
    }
  }
);
  grid=new GridData(GridData.FILL_HORIZONTAL);
  grid.widthHint=130;
  remove.setLayoutData(grid);
  updateRemoveButton();
  updateUsejarWidgets();
  return top;
}
"
422,updateRemoveButton(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JavaAppPage.java,jsmooth,9,25,14,3,0.2667,0.131,0,3,3,"private void updateRemoveButton(){
  int i=classpath.getItemCount();
  boolean enable=true;
  if (i == 0) {
    enable=false;
  }
 else {
    int s=classpath.getSelectionCount();
    if (s == 0)     enable=false;
  }
  remove.setEnabled(enable);
}
"
423,addClasspathItems(String[]),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JavaAppPage.java,jsmooth,7,14,7,3,0.3571,0.1333,0,3,3,"private void addClasspathItems(String[] items){
  String[] olditems=classpath.getItems();
  for (int i=0; i < items.length; i++) {
    if (Arrays.binarySearch(olditems,items[i]) >= 0)     continue;
    classpath.add(items[i]);
  }
  setModelClasspath(classpath.getItems());
}
"
429,load(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JavaAppPage.java,jsmooth,15,73,41,4,0.1778,0.1106,0.428571429,11,5,"public void load(){
  JSmoothModelBean jsmodel=getApplication().getModelBean();
  String[] classpath=jsmodel.getClassPath();
  if (classpath == null)   classpath=new String[0];
  this.classpath.setItems(classpath);
  boolean usejar=jsmodel.getEmbeddedJar();
  this.usejar.setSelection(usejar);
  LISTENER_USEJAR.widgetSelected(null);
  String mainclass=jsmodel.getMainClassName();
  if (mainclass == null)   mainclass="""";
  this.mainclass.setText(mainclass);
  String jar=jsmodel.getJarLocation();
  if (jar == null)   jar="""";
  this.jar.setText(jar);
  String args=jsmodel.getArguments();
  if (args == null)   args="""";
  this.args.setText(args);
}
"
434,newProject(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothApplication.java,jsmooth,24,155,34,7,0.1125,0.3361,0.2,1,2,"public void newProject(){
  jsmodel=new JSmoothModelBean();
  jsmodel.setSkeletonName(getInitialSkeletonName());
  setSkeletonProperties(getInititalSkeletonProperties());
  jsmodel.setExecutableName("""");
  jsmodel.setArguments("""");
  jsmodel.setBundledJVMPath("""");
  jsmodel.setClassPath(new String[0]);
  jsmodel.setCurrentDirectory("""");
  jsmodel.setIconLocation("""");
  jsmodel.setJarLocation("""");
  jsmodel.setJavaProperties(new JavaPropertyPair[0]);
  jsmodel.setJVMSearchPath(new String[0]);
  jsmodel.setMainClassName("""");
  jsmodel.setMaximumVersion("""");
  jsmodel.setMinimumVersion("""");
  jsmodel.setNoJvmMessage("""");
  jsmodel.setNoJvmURL("""");
  projectfile=null;
  compiler=new ExeCompiler();
  compiler.addListener(new SWTCompileListener());
  for (int i=0; i < PAGES.length; i++) {
    PAGES[i].load();
  }
  getShell().setText(getProjectName());
}
"
440,createSwitcherControl(Shell),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothApplication.java,jsmooth,7,11,1,3,0.2245,0.15,1,1,1,"/** 
 * Creates the ""Page Switcher"" toolbar manager and its control. The ""Page
 * Switcher"" lies on the left of the JSmooth window, and is a vertical
 * toolbar, with toggle items. On item selection, the window contents change.
 */
private void createSwitcherControl(Shell shell){
  switcher=new ToolBar(shell,SWT.FLAT | SWT.NO_FOCUS | SWT.VERTICAL);
  PAGE_WELCOME.createToolItem(switcher);
  PAGE_SKELETON.createToolItem(switcher);
  PAGE_APPLICATION.createToolItem(switcher);
  PAGE_EXECUTABLE.createToolItem(switcher);
}
"
441,createMainMenu(Shell),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothApplication.java,jsmooth,10,33,21,3,0.2286,0.0962,1,12,1,"private void createMainMenu(Shell shell){
  mainmenu=new Menu(shell,SWT.BAR);
  MenuItem topItem=new MenuItem(mainmenu,SWT.CASCADE);
  topItem.setText(""File"");
  Menu menu=new Menu(shell,SWT.DROP_DOWN);
  topItem.setMenu(menu);
  MenuItem item=new MenuItem(menu,SWT.NULL);
  item.setText(""New"");
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ACTION_NEW.run();
    }
  }
);
  item=new MenuItem(menu,SWT.NULL);
  item.setText(""Open..."");
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ACTION_OPEN.run();
    }
  }
);
  item=new MenuItem(menu,SWT.NULL);
  item.setText(""Save"");
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ACTION_SAVE.run();
    }
  }
);
  item=new MenuItem(menu,SWT.NULL);
  item.setText(""Save As..."");
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ACTION_SAVE_AS.run();
    }
  }
);
  item=new MenuItem(menu,SWT.SEPARATOR);
  item=new MenuItem(menu,SWT.NULL);
  item.setText(""Exit"");
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ACTION_EXIT.run();
    }
  }
);
  topItem=new MenuItem(mainmenu,SWT.CASCADE);
  topItem.setText(""Project"");
  menu=new Menu(shell,SWT.DROP_DOWN);
  topItem.setMenu(menu);
  item=new MenuItem(menu,SWT.NULL);
  item.setText(""Compile"");
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ACTION_COMPILE.run();
    }
  }
);
  item=new MenuItem(menu,SWT.NULL);
  item.setText(""Run .exe"");
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ACTION_RUNEXE.run();
    }
  }
);
  topItem=new MenuItem(mainmenu,SWT.CASCADE);
  topItem.setText(""Console"");
  menu=new Menu(shell,SWT.DROP_DOWN);
  topItem.setMenu(menu);
  item=new MenuItem(menu,SWT.NULL);
  item.setText(""Clear"");
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ACTION_CONSOLE_CLEAR.run();
    }
  }
);
  shell.setMenuBar(mainmenu);
}
"
450,createPages(Shell),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothApplication.java,jsmooth,7,17,13,3,0.2143,0.0708,1,2,2,"private void createPages(Shell shell){
  pagearea=new Composite(shell,SWT.NONE);
  stack=new StackLayout();
  pagearea.setLayout(stack);
  for (int i=0; i < PAGES.length; i++) {
    PAGES[i].createControl(pagearea);
  }
}
"
451,showPage(JSmoothPage),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothApplication.java,jsmooth,6,13,11,4,0.25,0.0595,0.5,2,3,"public void showPage(JSmoothPage page){
  stack.topControl=page.getControl();
  if (pagearea != null)   pagearea.layout();
  ToolItem item=page.getToolItem();
  if (!item.getSelection())   item.setSelection(true);
}
"
453,run(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothApplication.java,jsmooth,12,57,48,7,0.2222,0.15,0,0,5,"public void run(){
  if (shell == null)   createControls();
  shell.open();
  newProject();
  showPage(PAGE_WELCOME);
  try {
    while (shell != null && !shell.isDisposed()) {
      if (!display.readAndDispatch()) {
        display.sleep();
      }
    }
    display.update();
  }
  finally {
    display.dispose();
  }
}
"
455,createConsole(Shell),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothApplication.java,jsmooth,14,71,51,3,0.1488,0.0772,1,8,1,"private void createConsole(Shell shell){
  consolearea=new Composite(shell,SWT.NULL);
  GridLayout gridlayout=new GridLayout();
  consolearea.setLayout(gridlayout);
  console=new Text(consolearea,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.READ_ONLY| SWT.BORDER);
  console.setBackground(shell.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  console.setForeground(shell.getDisplay().getSystemColor(SWT.COLOR_BLUE));
  GridData gridata=new GridData(GridData.FILL_BOTH);
  console.setLayoutData(gridata);
  Menu menu=new Menu(shell,SWT.NULL);
  MenuItem item=new MenuItem(menu,SWT.NULL);
  item.setText(""Clear"");
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ACTION_CONSOLE_CLEAR.run();
    }
  }
);
  item=new MenuItem(menu,SWT.NULL);
  item.setText(""Copy"");
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      console.copy();
    }
  }
);
  item=new MenuItem(menu,SWT.NULL);
  item.setText(""Copy All"");
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      console.selectAll();
      console.copy();
    }
  }
);
  console.setMenu(menu);
}
"
467,saveProjectAs(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothApplication.java,jsmooth,8,24,20,5,0.2083,0.0793,0,0,1,"public boolean saveProjectAs(String projectfile){
  System.out.println(""[DEBUG] Saving project to file: "" + projectfile);
  this.projectfile=new File(projectfile);
  try {
    JSmoothModelPersistency.save(this.projectfile,jsmodel);
  }
 catch (  IOException e) {
    System.out.println(""[ERROR] Failed saving project : "" + e.getMessage());
    return false;
  }
  getShell().setText(getProjectName());
  return true;
}
"
472,openProject(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothApplication.java,jsmooth,13,69,60,6,0.1538,0.0641,1,7,3,"public boolean openProject(String projectfile){
  System.out.println(""[DEBUG] Opening project : "" + projectfile);
  File file=new File(projectfile);
  JSmoothModelBean jsmodel=null;
  try {
    jsmodel=JSmoothModelPersistency.load(file);
  }
 catch (  IOException e) {
    System.out.println(""[ERROR] Failed opening project : "" + e.getMessage());
    return false;
  }
  this.projectfile=file;
  this.jsmodel=jsmodel;
  for (int i=0; i < PAGES.length; i++) {
    PAGES[i].load();
  }
  getShell().setText(getProjectName());
  return true;
}
"
473,compileProject(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothApplication.java,jsmooth,17,112,88,5,0.1345,0.0545,0.375,7,3,"public boolean compileProject(){
  consoleMessage(""=== Compilation ==="");
  File basedir=projectfile.getParentFile();
  jsmodel.normalizePaths(basedir);
  String skeletonName=jsmodel.getSkeletonName();
  SkeletonBean skeletonBean=skeletonList.getSkeleton(skeletonName);
  File skeletonRoot=skeletonList.getDirectory(skeletonBean);
  File exename=new File(jsmodel.getExecutableName());
  if (!exename.isAbsolute()) {
    exename=new File(basedir,jsmodel.getExecutableName());
  }
  boolean success=false;
  try {
    success=compiler.compile(skeletonRoot,skeletonBean,basedir,jsmodel,exename);
  }
 catch (  Exception e) {
  }
  consoleMessages((String[])compiler.getErrors().toArray(new String[0]));
  compiler.cleanErrors();
  return success;
}
"
477,consoleSection(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothApplication.java,jsmooth,7,14,7,3,0.4286,0.25,0,2,2,"public void consoleSection(String title){
  StringBuffer buffer=new StringBuffer(""-------------------------------------------------------------------------------------"");
  if (title == null) {
    consoleMessage(buffer.toString());
    return;
  }
  buffer.replace(0,title.length() + 1,title + "" "");
  consoleMessage(buffer.toString());
}
"
485,createToolItem(ToolBar),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JSmoothPage.java,jsmooth,7,15,9,4,0.2857,0.2222,1,4,1,"public ToolItem createToolItem(final ToolBar toolbar){
  configureResources();
  item=new ToolItem(toolbar,SWT.RADIO);
  item.setImage(getImage());
  item.setToolTipText(getToolTip());
  item.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      js.showPage(JSmoothPage.this);
      ToolItem[] items=toolbar.getItems();
      for (int i=0; i < items.length; i++) {
        if (items[i] != item)         items[i].setSelection(false);
      }
    }
  }
);
  return item;
}
"
504,createPageArea(Composite),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\JVMOptionsPage.java,jsmooth,16,80,40,3,0.1591,0.1319,0,10,1,"public Control createPageArea(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout());
  Group group=new Group(top,SWT.NONE);
  group.setText(""Classpath"");
  group.setLayout(new GridLayout());
  GridData griddata=new GridData(GridData.FILL_HORIZONTAL);
  group.setLayoutData(griddata);
  group.setLayout(new GridLayout(2,false));
  classpath=new List(group,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI);
  griddata=new GridData(GridData.FILL_BOTH);
  griddata.widthHint=250;
  griddata.heightHint=classpath.getItemHeight() * 10;
  classpath.setLayoutData(griddata);
  classpath.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
    }
  }
);
  Composite composite=new Composite(group,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=2;
  composite.setLayout(layout);
  addjar=new Button(composite,SWT.NONE);
  addjar.setText(""Add JAR File..."");
  addjar.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
    }
  }
);
  griddata=new GridData(GridData.FILL_HORIZONTAL);
  griddata.widthHint=130;
  addjar.setLayoutData(griddata);
  addfolder=new Button(composite,SWT.NONE);
  addfolder.setText(""Add Class Folder..."");
  addfolder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
    }
  }
);
  griddata=new GridData(GridData.FILL_HORIZONTAL);
  griddata.widthHint=130;
  addfolder.setLayoutData(griddata);
  remove=new Button(composite,SWT.NONE);
  remove.setText(""Remove"");
  remove.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
    }
  }
);
  griddata=new GridData(GridData.FILL_HORIZONTAL);
  griddata.widthHint=130;
  remove.setLayoutData(griddata);
  return top;
}
"
514,run(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\OpenAction.java,jsmooth,10,34,23,4,0.3333,0.1468,0.5,3,3,"public boolean run(){
  FileDialog dialog=new FileDialog(getApplication().getShell(),SWT.OPEN);
  dialog.setText(""Open Project"");
  String file=dialog.open();
  if (file != null) {
    boolean ok=getApplication().openProject(file);
    if (ok)     getApplication().consoleMessage(""Opened the project file "" + file);
    return ok;
  }
 else {
    return false;
  }
}
"
516,run(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\RunexeAction.java,jsmooth,9,17,0,2,0.2889,0.2731,0.5,4,2,"public boolean run(){
  System.out.println(""[DEBUG] Running exe..."");
  JSmoothApplication app=getApplication();
  if (!app.hasProjectFile()) {
    app.consoleMessage(""Cannot run without a project file. Please save the project or load a new one, then try again."");
    return false;
  }
  JSmoothModelBean jsmodel=app.getModelBean();
  String basedir=app.getProjectFile().getParent();
  File exe=new File(basedir,jsmodel.getExecutableName());
  app.consoleMessage(""Running exe "" + exe.getAbsolutePath());
  return Program.launch(exe.getAbsolutePath());
}
"
518,run(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\SaveAsProjectAction.java,jsmooth,8,22,16,4,0.375,0.16,0.666666667,2,2,"public boolean run(){
  FileDialog dialog=new FileDialog(getApplication().getShell(),SWT.SAVE);
  dialog.setText(""Save Project"");
  String file=dialog.open();
  if (file != null) {
    return getApplication().saveProjectAs(file);
  }
 else {
    return false;
  }
}
"
520,run(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\SaveProjectAction.java,jsmooth,6,15,15,4,-1,-1,0.5,1,2,"public boolean run(){
  if (getApplication().hasProjectFile()) {
    return getApplication().saveProject();
  }
 else {
    return getApplication().ACTION_SAVE_AS.run();
  }
}
"
522,createPageArea(Composite),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\SkeletonPage.java,jsmooth,12,53,40,4,0.15,0.0709,1,7,1,"public Control createPageArea(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout(3,false));
  Label label=new Label(top,SWT.NONE);
  label.setText(""Skeleton:"");
  skelcombo=new Combo(top,SWT.READ_ONLY);
  GridData grid=new GridData(GridData.FILL);
  grid.widthHint=120;
  skelcombo.setLayoutData(grid);
  loadSkeleton(getApplication().getInitialSkeletonName());
  skelcombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setSkeletonName(skelcombo.getText());
    }
  }
);
  Button button=new Button(top,SWT.PUSH);
  grid=new GridData(GridData.FILL);
  grid.widthHint=120;
  button.setLayoutData(grid);
  button.setText(""Properties..."");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      (new SkeletonPropertiesDialog(SkeletonPage.this)).open();
    }
  }
);
  return top;
}
"
527,loadSkeleton(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\SkeletonPage.java,jsmooth,7,15,9,3,0.3214,0.1,1,0,1,"private void loadSkeleton(String skelname){
  String[] skeletons=getApplication().getAllSkeletonNames();
  skelcombo.setItems(skeletons);
  System.out.println(""[DEBUG] Loading skeleton : "" + skelname);
  int index=Arrays.binarySearch(skeletons,skelname);
  skelcombo.select(index);
}
"
530,createDialogArea(Composite),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\SkeletonPropertiesDialog.java,jsmooth,12,56,46,3,0.1458,0.0635,0.75,6,3,"protected Control createDialogArea(Composite parent){
  Composite cmpDlgArea=new Composite(parent,SWT.NONE);
  cmpDlgArea.setLayout(new GridLayout());
  SkeletonProperty[] props=page.getApplication().getSkeletonProperties();
  for (int i=0; i < props.length; i++) {
    System.out.println(""[DEBUG] Loading skeleton property: "" + props[i].getIdName() + ""=""+ props[i].getValue());
  }
  for (int i=0; i < props.length; i++) {
    Control c=createPropertyControl(cmpDlgArea,props[i]);
    c.setData(props[i]);
    controls.add(c);
  }
  return cmpDlgArea;
}
"
531,"createPropertyControl(Composite,SkeletonProperty)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\SkeletonPropertiesDialog.java,jsmooth,37,487,308,7,0.1425,0.1221,0.333333333,5,4,"private Control createPropertyControl(Composite wParent,SkeletonProperty prop){
  Group group=null;
  GridData grid=null;
  if (prop.getType().equals(SkeletonProperty.TYPE_STRING)) {
    group=new Group(wParent,SWT.NONE);
    grid=new GridData(GridData.FILL);
    grid.widthHint=400;
    group.setLayoutData(grid);
    group.setLayout(new GridLayout());
    group.setText(prop.getLabel());
    text=new Text(group,SWT.SINGLE | SWT.BORDER);
    grid=new GridData(GridData.FILL_BOTH);
    text.setLayoutData(grid);
    text.setText(prop.getValue());
    return text;
  }
 else   if (prop.getType().equals(SkeletonProperty.TYPE_TEXTAREA)) {
    group=new Group(wParent,SWT.NONE);
    grid=new GridData(GridData.FILL);
    grid.widthHint=400;
    grid.heightHint=100;
    group.setLayoutData(grid);
    group.setLayout(new GridLayout());
    group.setText(prop.getLabel());
    text=new Text(group,SWT.MULTI | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL);
    grid=new GridData(GridData.FILL_BOTH);
    text.setLayoutData(grid);
    text.setText(prop.getValue());
    return text;
  }
 else   if (prop.getType().equals(SkeletonProperty.TYPE_BOOLEAN)) {
    Button chk=new Button(wParent,SWT.CHECK);
    chk.setText(prop.getLabel());
    chk.setSelection(""1"".equals(prop.getValue()));
    return chk;
  }
 else {
    throw new UnsupportedOperationException(""Unknown skeleton property type."");
  }
}
"
532,okPressed(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\SkeletonPropertiesDialog.java,jsmooth,21,145,80,4,0.1786,0.1498,0.75,6,6,"protected void okPressed(){
  Iterator it=controls.iterator();
  JSmoothApplication app=page.getApplication();
  Control ctrl=null;
  String value=null;
  SkeletonProperty prop=null;
  while (it.hasNext()) {
    ctrl=(Control)it.next();
    prop=(SkeletonProperty)ctrl.getData();
    if (prop.getType().equals(SkeletonProperty.TYPE_STRING)) {
      value=((Text)ctrl).getText();
      prop.setValue(value);
    }
 else     if (prop.getType().equals(SkeletonProperty.TYPE_TEXTAREA)) {
      value=((Text)ctrl).getText();
      prop.setValue(value);
    }
 else     if (prop.getType().equals(SkeletonProperty.TYPE_BOOLEAN)) {
      boolean b=((Button)ctrl).getSelection();
      value=(b == true) ? ""1"" : ""0"";
      prop.setValue(value);
    }
    app.setSkeletonProperty(prop);
  }
  super.okPressed();
}
"
534,createPageArea(Composite),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\WelcomePage.java,jsmooth,28,321,264,3,0.1071,0.0635,0,12,1,"public Control createPageArea(Composite parent){
  Display display=parent.getDisplay();
  Composite top=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  top.setLayout(layout);
  FormToolkit kit=new FormToolkit(parent.getDisplay());
  Form form=kit.createForm(top);
  GridData grid=new GridData(GridData.FILL_BOTH);
  grid.widthHint=400;
  form.setLayoutData(grid);
  form.setText(""Welcome to JSmooth !"");
  TableWrapLayout wraplayout=new TableWrapLayout();
  form.getBody().setLayout(wraplayout);
  HyperlinkGroup hypergroup=kit.getHyperlinkGroup();
  hypergroup.setActiveForeground(display.getSystemColor(SWT.COLOR_BLUE));
  hypergroup.setForeground(display.getSystemColor(SWT.COLOR_BLUE));
  hypergroup.setHyperlinkUnderlineMode(HyperlinkGroup.UNDERLINE_HOVER);
  Label label=kit.createSeparator(form.getBody(),SWT.HORIZONTAL);
  TableWrapData wrapgrid=new TableWrapData(TableWrapData.FILL_GRAB);
  label.setLayoutData(wrapgrid);
  FormText text=kit.createFormText(form.getBody(),true);
  wrapgrid=new TableWrapData(TableWrapData.FILL);
  text.setLayoutData(wrapgrid);
  text.setText(JSmoothResources.TEXT_HELP_WELCOME,true,false);
  return top;
}
"
539,ResIcon(ByteBuffer),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\res\ResIcon.java,jsmooth,46,836,637,9,0.054,0.0631,1,39,15,"/** 
 * Creates a new instance based on the data of the Image argument.
 * @param img
 */
public ResIcon(Image img) throws Exception {
  int width=img.getWidth(null);
  int height=img.getHeight(null);
  if ((width % 8) != 0)   width+=(7 - (width % 8));
  if ((height % 8) != 0)   height+=(7 - (height % 8));
  if (img instanceof BufferedImage) {
    BufferedImage result=(BufferedImage)img;
    for (int y=0; y < result.getHeight(); y++) {
      for (int x=0; x < result.getWidth(); x++) {
        int rgb=result.getRGB(x,y);
        if (((rgb >> 24) & 0xFF) > 0) {
        }
      }
    }
  }
  int[] pixelbuffer=new int[width * height];
  PixelGrabber grabber=new PixelGrabber(img,0,0,width,height,pixelbuffer,0,width);
  try {
    grabber.grabPixels();
  }
 catch (  InterruptedException e) {
    System.err.println(""interrupted waiting for pixels!"");
    throw new Exception(""Can't load the image provided"",e);
  }
  Hashtable colors=calculateColorCount(pixelbuffer);
  this.BitsPerPixel=8;
  Palette=new ResIcon.PaletteElement[1 << BitsPerPixel];
  for (Enumeration e=colors.keys(); e.hasMoreElements(); ) {
    Integer pixi=(Integer)e.nextElement();
    int pix=pixi.intValue();
    int index=((Integer)colors.get(pixi)).intValue();
    Palette[index]=new ResIcon.PaletteElement();
    Palette[index].Blue=pix & 0xFF;
    Palette[index].Green=(pix >> 8) & 0xff;
    Palette[index].Red=(pix >> 16) & 0xff;
  }
  for (int i=0; i < Palette.length; i++) {
    if (Palette[i] == null)     Palette[i]=new ResIcon.PaletteElement();
  }
  this.Size=40;
  this.Width=width;
  this.Height=height * 2;
  this.Planes=1;
  this.Compression=0;
  this.SizeOfBitmap=0;
  this.HorzResolution=0;
  this.VertResolution=0;
  this.ColorsUsed=0;
  this.ColorsImportant=0;
  int rowsize=width / 8;
  if ((rowsize % 4) > 0) {
    rowsize+=4 - (rowsize % 4);
  }
  BitmapXOR=new short[(((int)Height / 2) * (int)Width * (int)BitsPerPixel) / 8];
  BitmapAND=new short[((int)Height / 2) * rowsize];
  int bxl=BitmapXOR.length - 1;
  int bal=BitmapAND.length - 1;
  for (int i=0; i < pixelbuffer.length; i++) {
    int col=i % width;
    int line=i / width;
    bxl=(width * height) - (((i / width) + 1) * width) + (i % width);
    bal=(rowsize * height) - ((line + 1) * (rowsize)) + (col / 8);
    if ((((pixelbuffer[i] >> 24) & 0xFF) == 0)) {
      BitmapAND[bal]|=1 << (7 - (i % 8));
      BitmapXOR[bxl]=0xFF;
    }
 else {
      int pixel=pixelbuffer[i] & 0x00FFFFFF;
      Integer icol=(Integer)colors.get(new Integer(pixel));
      if (icol != null) {
        int palindex=icol.intValue();
        BitmapXOR[bxl]=(short)palindex;
      }
    }
  }
}
"
542,calculateColorCount(int[]),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\res\ResIcon.java,jsmooth,14,75,59,5,0.1429,0.0759,0,7,4,"private Hashtable calculateColorCount(int[] pixels){
  Hashtable result=new Hashtable();
  int colorindex=0;
  for (int i=0; i < pixels.length; i++) {
    int pix=pixels[i];
    if (((pix >> 24) & 0xFF) > 0) {
      pix&=0x00FFFFFF;
      Integer pixi=new Integer(pix);
      Object o=result.get(pixi);
      if (o == null) {
        result.put(pixi,new Integer(colorindex++));
      }
    }
  }
  return result;
}
"
544,toString(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\res\ResIcon.java,jsmooth,25,160,20,7,0.095,0.1785,0,3,3,"public String toString(){
  StringBuffer out=new StringBuffer();
  out.append(""Size: "" + Size);
  out.append(""\nWidth: "" + Width);
  out.append(""\nHeight: "" + Height);
  out.append(""\nPlanes: "" + Planes);
  out.append(""\nBitsPerPixel: "" + BitsPerPixel);
  out.append(""\nCompression: "" + Compression);
  out.append(""\nSizeOfBitmap: "" + SizeOfBitmap);
  out.append(""\nHorzResolution: "" + HorzResolution);
  out.append(""\nVertResolution: "" + VertResolution);
  out.append(""\nColorsUsed: "" + ColorsUsed);
  out.append(""\nColorsImportant: "" + ColorsImportant);
  out.append(""\nBitmapXOR["" + BitmapXOR.length + ""]={"");
  for (int i=0; i < BitmapXOR.length; i++) {
    out.append((byte)BitmapXOR[i]);
  }
  out.append(""}\nBitmapAnd["" + BitmapAND.length + ""]={"");
  for (int i=0; i < BitmapAND.length; i++) {
    out.append((byte)BitmapAND[i]);
  }
  return out.toString();
}
"
548,toString(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\res\ResIconDir.java,jsmooth,12,21,0,3,0.1667,0.2821,1,2,2,"public String toString(){
  StringBuffer out=new StringBuffer();
  out.append(""m_idReserved: "" + m_idReserved + ""\n"");
  out.append(""m_idType: "" + m_idType + ""\n"");
  out.append(""m_idCount: "" + m_idCount + ""\n"");
  out.append(""entries: ---- \n"");
  for (int i=0; i < m_entries.length; i++) {
    out.append(m_entries[i].toString());
  }
  return out.toString();
}
"
549,ResIconDir(ByteBuffer),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\pe\res\ResIconDir.java,jsmooth,8,17,6,3,0.25,0.1111,1,2,2,"/** 
 * Creates a new instance of ResIconDir 
 */
public ResIconDir(ByteBuffer buf){
  m_idReserved=buf.getShort();
  m_idType=buf.getShort();
  m_idCount=buf.getShort();
  m_entries=new ResIconDir.IconDirEntry[m_idCount];
  for (int i=0; i < m_idCount; i++) {
    m_entries[i]=new IconDirEntry(buf);
  }
}
"
558,ClassPath(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\ClassPath.java,jsmooth,12,52,38,4,0.1786,0.1154,0.75,1,1,"public ClassPath(){
  m_jarLocFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
  m_jarLocFileChooser.setMultiSelectionEnabled(true);
  GenericFileFilter filter=new GenericFileFilter(""Zip, Jar, or directories"");
  filter.addSuffix(""jar"");
  filter.addSuffix(""zip"");
  m_jarLocFileChooser.addChoosableFileFilter(filter);
  m_fileeditor.setFileChooser(m_jarLocFileChooser);
  m_list.setEditor(m_fileeditor);
  setLayout(new BorderLayout());
  add(BorderLayout.CENTER,m_list);
}
"
559,dataChanged(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\ClassPath.java,jsmooth,6,12,9,3,0.25,0.0714,1,1,3,"public void dataChanged(){
  if (getBaseDir() != null) {
    m_jarLocFileChooser.setCurrentDirectory(getBaseDir());
  }
  String[] cp=m_model.getClassPath();
  if (cp == null)   m_list.setData(new Object[0]);
 else   m_list.setData((Object[])cp);
}
"
560,updateModel(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\ClassPath.java,jsmooth,7,15,9,3,0.2857,0.1583,1,3,2,"public void updateModel(){
  Object[] cpels=m_list.getData();
  String[] cp=new String[cpels.length];
  for (int i=0; i < cp.length; i++) {
    cp[i]=cpels[i].toString();
  }
  m_model.setClassPath(cp);
}
"
564,CurrentDirectory(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\CurrentDirectory.java,jsmooth,9,23,10,2,0.2407,0.1435,0.75,2,1,"public CurrentDirectory(){
  setLayout(new BorderLayout());
  add(BorderLayout.CENTER,m_selector);
  JPanel jpc=new JPanel();
  jpc.setLayout(new BorderLayout());
  jpc.add(BorderLayout.WEST,m_forceExePath);
  jpc.add(BorderLayout.CENTER,new HelpButton(Main.local(""CURRENTDIR_FORCEEXEPATH_HELP"")));
  add(BorderLayout.SOUTH,jpc);
  m_forceExePath.setAction(new AbstractAction(Main.local(""CURRENTDIR_FORCEEXEPATH"")){
    public void actionPerformed(    java.awt.event.ActionEvent e){
      if (m_forceExePath.isSelected())       m_selector.setEnabled(false);
 else       m_selector.setEnabled(true);
    }
  }
);
  m_selector.setFileChooser(new JDirectoryChooser());
}
"
566,dataChanged(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\CurrentDirectory.java,jsmooth,14,74,57,6,0.2143,0.1451,0.6,1,4,"public void dataChanged(){
  m_selector.setBaseDir(getBaseDir());
  String dir=m_model.getCurrentDirectory();
  if (""${EXECUTABLEPATH}"".equals(dir)) {
    m_selector.setEnabled(false);
    m_forceExePath.setSelected(true);
  }
 else {
    m_forceExePath.setSelected(false);
    m_selector.setEnabled(true);
    if ((dir != null) && (dir.trim().length() > 0)) {
      m_selector.setFile(new java.io.File(dir));
    }
 else {
      m_selector.setFile(null);
    }
  }
}
"
573,dataChanged(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\EmbeddedJar.java,jsmooth,7,12,3,3,0.3571,0.1875,0.5,0,3,"public void dataChanged(){
  m_checker.setSelected(m_model.getEmbeddedJar());
  m_selector.setBaseDir(getBaseDir());
  if (m_model.getJarLocation() != null)   m_selector.setFile(new File(m_model.getJarLocation()));
 else   m_selector.setFile(null);
  if (m_checker.isSelected())   m_selector.setEnabled(true);
 else   m_selector.setEnabled(false);
}
"
577,ExecutableIcon(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\ExecutableIcon.java,jsmooth,6,13,11,3,0.2778,0.1333,1,1,1,"public ExecutableIcon(){
  setLayout(new BorderLayout());
  add(BorderLayout.CENTER,m_selector);
  add(BorderLayout.SOUTH,m_iconDisplay);
  m_iconDisplay.setHorizontalAlignment(JLabel.CENTER);
  m_selector.addListener(new FileSelectionTextField.FileSelected(){
    public void fileSelected(    String filename){
      setIconLocation(new File(filename));
    }
  }
);
}
"
579,dataChanged(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\ExecutableIcon.java,jsmooth,7,17,13,3,0.3571,0.1389,0.6,0,3,"public void dataChanged(){
  if (getBaseDir() != null)   m_selector.setBaseDir(getBaseDir());
  if (m_model.getIconLocation() != null) {
    m_selector.setFile(getAbsolutePath(new java.io.File(m_model.getIconLocation())));
    setIconLocation(getAbsolutePath(new java.io.File(m_model.getIconLocation())));
  }
 else {
    m_selector.setFile(null);
    setIconLocation(new File(""""));
  }
}
"
589,InitialMemoryHeap(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\InitialMemoryHeap.java,jsmooth,13,63,48,4,0.1868,0.119,1,2,1,"public InitialMemoryHeap(){
  setLayout(new BorderLayout());
  add(BorderLayout.CENTER,m_args);
  m_args.setDocument(new RegExDocument(""[0-9]+""));
  m_args.setHorizontalAlignment(JTextField.RIGHT);
  Vector u=new Vector();
  u.add(Main.local(""UNIT_MB""));
  u.add(Main.local(""UNIT_KB""));
  u.add(Main.local(""UNIT_BYTE""));
  DefaultComboBoxModel mod=new DefaultComboBoxModel(u);
  m_units.setModel(mod);
  add(BorderLayout.EAST,m_units);
}
"
591,updateModel(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\InitialMemoryHeap.java,jsmooth,11,42,29,6,0.197,0.1362,1,2,6,"public void updateModel(){
  int value;
  try {
    value=Integer.parseInt(m_args.getText());
  }
 catch (  Exception exc) {
    m_model.setInitialMemoryHeap(-1);
    return;
  }
switch (m_units.getSelectedIndex()) {
case 0:
    if (value > 2047)     value=2047;
  m_model.setInitialMemoryHeap(value * 1024 * 1024);
break;
case 1:
m_model.setInitialMemoryHeap(value * 1024);
break;
case 2:
m_model.setInitialMemoryHeap(value);
break;
}
}
"
600,updateModel(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\JavaProperties.java,jsmooth,7,15,9,3,0.2857,0.1167,1,3,2,"public void updateModel(){
  Object[] po=m_props.getData();
  JavaPropertyPair[] props=new JavaPropertyPair[po.length];
  for (int i=0; i < po.length; i++) {
    props[i]=(JavaPropertyPair)po[i];
  }
  m_model.setJavaProperties(props);
}
"
604,JSmoothInfo(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\JSmoothInfo.java,jsmooth,7,19,17,5,0.2381,0.0556,1,1,1,"public JSmoothInfo(){
  setLayout(new java.awt.BorderLayout());
  add(java.awt.BorderLayout.CENTER,m_skeldesc);
  setBackground(java.awt.Color.red);
  String text=Main.MAIN.local(""JSMOOTH_WELCOME_SCREEN"");
  m_skeldesc.setText(text);
}
"
613,readFile(java.io.File),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\JSmoothInfo.java,jsmooth,12,55,44,4,0.1944,0.0833,0,6,3,"public String readFile(java.io.File f){
  StringBuffer buffer=new StringBuffer();
  try {
    FileInputStream fis=new FileInputStream(f);
    InputStreamReader isr=new InputStreamReader(fis);
    int c;
    while ((c=isr.read()) != -1)     buffer.append((char)c);
    isr.close();
    fis.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return buffer.toString();
}
"
614,JVMBundle(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\JVMBundle.java,jsmooth,6,13,11,3,0.2222,0.0556,0.75,1,2,"public JVMBundle(){
  setLayout(new PanelLayout());
  add(m_checker);
  add(m_selector);
  m_selector.setFileChooser(new JDirectoryChooser());
  m_checker.setAction(new AbstractAction(Main.local(""JVMBUNDLE_CHECKBOX"")){
    public void actionPerformed(    java.awt.event.ActionEvent e){
      m_selector.setEnabled(m_checker.isSelected());
    }
  }
);
  if (m_model != null)   dataChanged();
}
"
616,dataChanged(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\JVMBundle.java,jsmooth,13,59,40,5,0.2308,0.1978,0.6,1,2,"public void dataChanged(){
  String bundle=m_model.getBundledJVMPath();
  if (bundle == null) {
    m_checker.setSelected(false);
    m_selector.setBaseDir(getBaseDir());
    m_selector.setFile(null);
    m_selector.setEnabled(false);
  }
 else {
    m_checker.setSelected(true);
    m_selector.setBaseDir(getBaseDir());
    m_selector.setFile(new java.io.File(bundle));
    m_selector.setEnabled(true);
  }
}
"
617,updateModel(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\JVMBundle.java,jsmooth,7,14,7,3,0.3571,0.1417,1,1,3,"public void updateModel(){
  if (m_checker.isSelected()) {
    File f=m_selector.getFile();
    if (f != null)     m_model.setBundledJVMPath(f.toString());
 else     m_model.setBundledJVMPath("""");
  }
 else {
    m_model.setBundledJVMPath(null);
  }
}
"
621,dataChanged(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\JVMSearchSequence.java,jsmooth,9,25,14,2,0.2381,0.1028,1,4,4,"public void dataChanged(){
  if (m_model.getJVMSearchPath() == null) {
    m_vmSearch.setData(JVMSearchElement.Elements);
  }
 else {
    Vector v=new Vector();
    String[] els=m_model.getJVMSearchPath();
    for (int i=0; i < els.length; i++) {
      JVMSearchElement el=JVMSearchElement.getStandardElement(els[i]);
      if (el != null)       v.add(el);
    }
    m_vmSearch.setData(v.toArray());
  }
}
"
622,updateModel(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\JVMSearchSequence.java,jsmooth,7,15,9,3,0.2857,0.1583,0.75,3,2,"public void updateModel(){
  String[] ids=new String[m_vmSearch.dataSize()];
  Object[] data=m_vmSearch.getData();
  for (int i=0; i < ids.length; i++) {
    ids[i]=((JVMSearchElement)data[i]).getId();
  }
  m_model.setJVMSearchPath(ids);
}
"
632,displayChooser(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\MainClass.java,jsmooth,25,254,208,5,0.104,0.0741,0.3,10,8,"protected void displayChooser(){
  ClassChooserDialog chooser=new ClassChooserDialog(Main.MAIN,true);
  Vector jars=new Vector();
  if (m_model.getEmbeddedJar() == true) {
    String ejar=m_model.getJarLocation();
    if (ejar != null) {
      File f=getAbsolutePath(new File(ejar));
      jars.add(f);
    }
  }
  String[] cp=m_model.getClassPath();
  if (cp != null) {
    for (int i=0; i < cp.length; i++) {
      jars.add(getAbsolutePath(new File(cp[i])));
    }
  }
  chooser.clear();
  for (Iterator i=jars.iterator(); i.hasNext(); ) {
    File f=(File)i.next();
    try {
      chooser.addJar(new JarFile(f));
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  chooser.setClassName(m_classname.getText());
  chooser.setVisible(true);
  if (chooser.validated()) {
    String classname=chooser.getClassName();
    m_classname.setText(classname);
  }
}
"
633,MaxMemoryHeap(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\MaxMemoryHeap.java,jsmooth,13,63,48,4,0.1868,0.119,1,2,1,"public MaxMemoryHeap(){
  setLayout(new BorderLayout());
  add(BorderLayout.CENTER,m_args);
  m_args.setDocument(new RegExDocument(""[0-9]+""));
  m_args.setHorizontalAlignment(JTextField.RIGHT);
  Vector u=new Vector();
  u.add(Main.local(""UNIT_MB""));
  u.add(Main.local(""UNIT_KB""));
  u.add(Main.local(""UNIT_BYTE""));
  DefaultComboBoxModel mod=new DefaultComboBoxModel(u);
  m_units.setModel(mod);
  add(BorderLayout.EAST,m_units);
}
"
635,updateModel(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\MaxMemoryHeap.java,jsmooth,10,32,19,5,0.2167,0.161,0.5,2,6,"public void updateModel(){
  int value;
  try {
    value=Integer.parseInt(m_args.getText());
  }
 catch (  Exception exc) {
    m_model.setInitialMemoryHeap(-1);
    return;
  }
switch (m_units.getSelectedIndex()) {
case 0:
    if (value > 2047)     value=2047;
  m_model.setMaximumMemoryHeap(value * 1024 * 1024);
break;
case 1:
m_model.setMaximumMemoryHeap(value * 1024);
break;
case 2:
m_model.setMaximumMemoryHeap(value);
break;
}
}
"
659,SkeletonProperties(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\SkeletonProperties.java,jsmooth,6,12,9,4,0.3333,0.2143,0,0,1,"public SkeletonProperties(){
  setLayout(new BorderLayout());
  add(BorderLayout.CENTER,m_skelprops);
  m_skelprops.setDescriptionVisible(true);
  m_skelprops.setToolBarVisible(false);
}
"
662,dataChanged(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\SkeletonProperties.java,jsmooth,9,28,20,4,0.3889,0.1667,1,0,3,"public void dataChanged(){
  System.out.println(""SkeletonProperties: data changed, "" + m_model.getSkeletonName());
  if (m_model.getSkeletonName() == null) {
    m_currentSkelName=null;
    setProperties();
    return;
  }
  if (!m_model.getSkeletonName().equalsIgnoreCase(m_currentSkelName)) {
    m_currentSkelName=m_model.getSkeletonName();
    setProperties();
  }
}
"
663,updateModel(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\SkeletonProperties.java,jsmooth,10,43,41,2,0.1667,0.0571,0.571428571,3,3,"public void updateModel(){
  if (m_skel != null) {
    SkeletonProperty[] sp=m_skel.getSkeletonProperties();
    JSmoothModelBean.Property[] props=new JSmoothModelBean.Property[sp.length];
    for (int i=0; i < sp.length; i++) {
      props[i]=new JSmoothModelBean.Property();
      props[i].setKey(sp[i].getIdName());
      props[i].setValue(sp[i].getValue());
      System.out.println(props[i]);
    }
    m_model.setSkeletonProperties(props);
  }
}
"
669,rebuildProperties(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\SkeletonPropertiesEditor.java,jsmooth,33,417,306,8,0.0985,0.1106,0.714285714,3,10,"public void rebuildProperties(){
  m_skel=null;
  if (m_currentSkelName != null)   m_skel=Main.SKELETONS.getSkeleton(m_currentSkelName);
  SkeletonProperty[] sprops=null;
  if (m_skel != null)   sprops=m_skel.getSkeletonProperties();
 else   sprops=new SkeletonProperty[0];
  m_panel.removeAll();
  m_panel.setLayout(new RiverLayout());
  m_editors.clear();
  for (int i=0; i < sprops.length; i++) {
    SkelPropEditor spe=null;
    if (sprops[i].getType().equalsIgnoreCase(SkeletonProperty.TYPE_STRING)) {
      spe=new StringEditor();
    }
 else     if (sprops[i].getType().equalsIgnoreCase(SkeletonProperty.TYPE_TEXTAREA)) {
      spe=new TextAreaEditor();
    }
 else     if (sprops[i].getType().equalsIgnoreCase(SkeletonProperty.TYPE_BOOLEAN)) {
      spe=new CheckBoxEditor();
    }
 else     if (sprops[i].getType().equalsIgnoreCase(SkeletonProperty.TYPE_AUTODOWNLOADURL)) {
      spe=new AutoDownloadURLEditor();
    }
    if (spe == null) {
      spe=new StringEditor();
    }
    m_editors.add(spe);
    spe.bind(sprops[i]);
    if (spe.labelAtLeft()) {
      m_panel.add(""br"",new JLabel(Main.local(sprops[i].getLabel())));
      m_panel.add(""tab"",new HelpButton(Main.local(sprops[i].getDescription())));
      m_panel.add(""tab hfill"",spe.getGUI());
    }
 else {
      m_panel.add(""br right"",spe.getGUI());
      m_panel.add(""tab"",new HelpButton(Main.local(sprops[i].getDescription())));
      m_panel.add(""tab hfill"",new JLabel(Main.local(sprops[i].getLabel())));
    }
  }
  revalidate();
  m_panel.revalidate();
  doLayout();
  m_panel.doLayout();
}
"
670,dataChanged(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\SkeletonPropertiesEditor.java,jsmooth,22,200,169,5,0.1136,0.0586,0.666666667,9,13,"public void dataChanged(){
  if (m_model.getSkeletonName() == null) {
    m_currentSkelName=null;
    rebuildProperties();
  }
  if ((m_model != null) && (m_model.getSkeletonName() != null) && (!m_model.getSkeletonName().equalsIgnoreCase(m_currentSkelName))) {
    m_currentSkelName=m_model.getSkeletonName();
    rebuildProperties();
  }
  JSmoothModelBean.Property[] jsprop=m_model.getSkeletonProperties();
  if (jsprop != null) {
    for (Enumeration e=m_editors.elements(); e.hasMoreElements(); ) {
      SkelPropEditor spe=(SkelPropEditor)e.nextElement();
      JSmoothModelBean.Property p=getPropertyInstance(spe.getIdName());
      if (p != null)       spe.valueChanged(p.getValue());
    }
  }
 else {
    SkeletonBean skel=Main.SKELETONS.getSkeleton(m_model.getSkeletonName());
    SkeletonProperty[] sprops=null;
    if (skel != null)     sprops=skel.getSkeletonProperties();
    if (sprops != null) {
      for (Enumeration e=m_editors.elements(); e.hasMoreElements(); ) {
        SkelPropEditor spe=(SkelPropEditor)e.nextElement();
        for (int i=0; i < sprops.length; i++) {
          if (sprops[i].getIdName().equals(spe.getIdName()))           spe.valueChanged(sprops[i].getValue());
        }
      }
    }
  }
}
"
672,updateModel(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\editors\SkeletonPropertiesEditor.java,jsmooth,11,48,41,3,0.1667,0.0988,0.5,4,3,"public void updateModel(){
  if (m_skel != null) {
    JSmoothModelBean.Property[] props=new JSmoothModelBean.Property[m_editors.size()];
    int index=0;
    for (Enumeration e=m_editors.elements(); e.hasMoreElements(); ) {
      SkelPropEditor spe=(SkelPropEditor)e.nextElement();
      props[index]=new JSmoothModelBean.Property();
      props[index].setKey(spe.getIdName());
      props[index].setValue(spe.get());
      index++;
    }
    m_model.setSkeletonProperties(props);
  }
}
"
701,StringEditor(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\skeleditors\StringEditor.java,jsmooth,10,43,41,8,0.1667,0.0347,0,1,1,"public StringEditor(){
  m_comp=new JTextField();
  PlainDocument doc=new PlainDocument();
  m_comp.setDocument(doc);
}
"
706,TextAreaEditor(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\skeleditors\TextAreaEditor.java,jsmooth,6,11,7,3,0.2667,0.0952,0,1,1,"public TextAreaEditor(){
  m_comp=new JTextArea(5,40);
  PlainDocument doc=new PlainDocument();
  m_comp.setDocument(doc);
  m_sp=new JScrollPane(m_comp);
}
"
716,addJar(JarFile),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\ClassChooserDialog.java,jsmooth,10,40,35,3,0.18,0.0913,1,5,4,"public void addJar(JarFile jf){
  for (Enumeration e=jf.entries(); e.hasMoreElements(); ) {
    JarEntry entry=(JarEntry)e.nextElement();
    String[] res=entry.toString().split(""/"");
    if ((res.length > 0) && (res[res.length - 1].toLowerCase().endsWith("".class""))) {
      String rs=res[res.length - 1];
      rs=rs.substring(0,rs.length() - 6);
      res[res.length - 1]=rs;
      m_root.add(res);
    }
  }
}
"
720,initComponents(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\ClassChooserDialog.java,jsmooth,12,66,66,4,0.0833,0,0,4,1,"/** 
 * This method is called from within the constructor to
 * initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
 */
private void initComponents(){
  jPanel1=new javax.swing.JPanel();
  jLabel1=new javax.swing.JLabel();
  jPanel3=new javax.swing.JPanel();
  jScrollPane1=new javax.swing.JScrollPane();
  m_tree=new javax.swing.JTree();
  jPanel2=new javax.swing.JPanel();
  m_buttonSelect=new javax.swing.JButton();
  jSeparator1=new javax.swing.JSeparator();
  m_buttonCancel=new javax.swing.JButton();
  setTitle(""Class Selector"");
  addWindowListener(new java.awt.event.WindowAdapter(){
    public void windowClosing(    java.awt.event.WindowEvent evt){
      closeDialog(evt);
    }
  }
);
  jPanel1.setLayout(new java.awt.BorderLayout());
  jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10,10,10,10)));
  jPanel1.setFocusable(false);
  jLabel1.setText(""Select a class..."");
  jLabel1.setFocusable(false);
  jPanel1.add(jLabel1,java.awt.BorderLayout.NORTH);
  jPanel3.setLayout(new java.awt.BorderLayout());
  jPanel3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1,1,1,1)));
  jPanel3.setFocusable(false);
  jScrollPane1.setFocusable(false);
  jScrollPane1.setViewportView(m_tree);
  jPanel3.add(jScrollPane1,java.awt.BorderLayout.CENTER);
  jPanel1.add(jPanel3,java.awt.BorderLayout.CENTER);
  getContentPane().add(jPanel1,java.awt.BorderLayout.CENTER);
  jPanel2.setFocusable(false);
  m_buttonSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/icons/stock_calc-accept-16.png"")));
  m_buttonSelect.setText(""Select"");
  m_buttonSelect.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      buttonSelectActionPerformed(evt);
    }
  }
);
  jPanel2.add(m_buttonSelect);
  jPanel2.add(jSeparator1);
  m_buttonCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/icons/stock_calc-cancel-16.png"")));
  m_buttonCancel.setText(""Cancel"");
  m_buttonCancel.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      buttonCancelActionPerformed(evt);
    }
  }
);
  jPanel2.add(m_buttonCancel);
  getContentPane().add(jPanel2,java.awt.BorderLayout.SOUTH);
  java.awt.Dimension screenSize=java.awt.Toolkit.getDefaultToolkit().getScreenSize();
  setBounds((screenSize.width - 371) / 2,(screenSize.height - 260) / 2,371,260);
}
"
730,run(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\CommandRunner.java,jsmooth,7,18,15,4,0.25,0.0917,1,5,1,"static public void run(String[] cmd,File curdir) throws Exception {
  Process proc=Runtime.getRuntime().exec(cmd,null,curdir);
  InputStream stdin=proc.getInputStream();
  InputStream stderr=proc.getErrorStream();
  new Thread(new CmdStdReader(stdin)).start();
  new Thread(new CmdStdReader(stderr)).start();
  s_runningprocs.add(proc);
}
"
734,initComponents(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\CompilationDialog.java,jsmooth,11,54,53,6,0.1039,0.0204,0,4,1,"/** 
 * This method is called from within the constructor to
 * initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
 */
private void initComponents(){
  java.awt.GridBagConstraints gridBagConstraints;
  jLabel1=new javax.swing.JLabel();
  m_progress=new javax.swing.JProgressBar();
  jScrollPane1=new javax.swing.JScrollPane();
  m_state=new javax.swing.JTextArea(10,60);
  m_state.setLineWrap(true);
  m_cancelbutton=new javax.swing.JButton();
  getContentPane().setLayout(new java.awt.GridBagLayout());
  addWindowListener(new java.awt.event.WindowAdapter(){
    public void windowClosing(    java.awt.event.WindowEvent evt){
      closeDialog(evt);
    }
  }
);
  jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  jLabel1.setText(""Progress"");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=1.0;
  getContentPane().add(jLabel1,gridBagConstraints);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.HORIZONTAL;
  gridBagConstraints.insets=new java.awt.Insets(5,20,5,20);
  getContentPane().add(m_progress,gridBagConstraints);
  m_state.setEditable(false);
  jScrollPane1.setViewportView(m_state);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=1.0;
  gridBagConstraints.weighty=1.0;
  gridBagConstraints.insets=new java.awt.Insets(5,10,5,10);
  getContentPane().add(jScrollPane1,gridBagConstraints);
  m_cancelbutton.setText(""Cancel"");
  m_cancelbutton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cancelbuttonActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.anchor=java.awt.GridBagConstraints.SOUTH;
  gridBagConstraints.insets=new java.awt.Insets(10,10,10,10);
  gridBagConstraints.weighty=0.0001;
  gridBagConstraints.fill=java.awt.GridBagConstraints.NONE;
  getContentPane().add(m_cancelbutton,gridBagConstraints);
  java.awt.Dimension screenSize=java.awt.Toolkit.getDefaultToolkit().getScreenSize();
  setBounds((screenSize.width - 319) / 2,(screenSize.height - 158) / 2,319,158);
}
"
740,compile(Runnable),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\CompilationDialog.java,jsmooth,6,14,13,5,0.25,0.0556,0,2,1,"public void compile(Runnable r){
  Thread t=new Thread(r);
  t.start();
  setModal(true);
  setVisible(true);
}
"
742,complete(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\CompilationDialog.java,jsmooth,6,14,13,5,0.2222,0.0714,0,0,2,"public void complete(){
  if (!m_canceled) {
    m_result=true;
    setNewState(100,""Done"");
    m_cancelbutton.setText(""Done"");
    m_cancelbutton.grabFocus();
  }
}
"
743,failed(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\CompilationDialog.java,jsmooth,11,37,19,4,0.2121,0.2348,1,3,3,"public void failed(){
  if (!m_canceled) {
    m_result=false;
    StringBuffer buf=new StringBuffer();
    buf.append(""Compilation failed!\n"");
    Vector v=m_compiler.getErrors();
    for (int i=0; i < v.size(); i++) {
      buf.append(""\n- "");
      buf.append(v.get(i).toString());
    }
    buf.append(""\n"");
    setNewState(100,buf.toString());
  }
}
"
751,createNewItem(SortedEditableList),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\EditableListFileEditor.java,jsmooth,9,23,10,2,0.254,0.1306,1,4,4,"public Object createNewItem(SortedEditableList selist){
  if (m_fileChooser.showOpenDialog(selist) == JFileChooser.APPROVE_OPTION) {
    File[] files=m_fileChooser.getSelectedFiles();
    for (int i=0; i < files.length; i++) {
      File f=files[i];
      if (m_rootDir != null) {
        f=net.charabia.jsmoothgen.application.JSmoothModelPersistency.makePathRelativeIfPossible(m_rootDir,f);
        files[i]=f;
      }
    }
    return files;
  }
  return null;
}
"
752,"editItem(SortedEditableList,Object)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\EditableListFileEditor.java,jsmooth,6,8,1,2,0.3333,0.1556,1,3,4,"public Object editItem(SortedEditableList selist,Object item){
  if (!(item instanceof File))   m_fileChooser.setSelectedFile(new File(item.toString()));
 else   m_fileChooser.setSelectedFile((File)item);
  if (m_fileChooser.showOpenDialog(selist) == JFileChooser.APPROVE_OPTION) {
    File f=m_fileChooser.getSelectedFile();
    if (m_rootDir != null) {
      f=net.charabia.jsmoothgen.application.JSmoothModelPersistency.makePathRelativeIfPossible(m_rootDir,f);
    }
    return f;
  }
  return null;
}
"
755,FileSelectionTextField(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\FileSelectionTextField.java,jsmooth,8,24,20,3,0.25,0.1481,0,3,1,"public FileSelectionTextField(){
  m_fileChooser=new javax.swing.JFileChooser();
  m_filename=new javax.swing.JTextField();
  m_buttonFileSelection=new javax.swing.JButton();
  setLayout(new java.awt.BorderLayout());
  add(m_filename,java.awt.BorderLayout.CENTER);
  m_buttonFileSelection.setText(""..."");
  m_buttonFileSelection.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      buttonFileSelectionActionPerformed(evt);
    }
  }
);
  m_filename.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      if (m_filename.getText().length() > 0)       setFile(new java.io.File(m_filename.getText()));
 else       setFile(null);
      notifyListeners(m_filename.getText());
    }
  }
);
  m_filename.addFocusListener(new java.awt.event.FocusAdapter(){
    public void focusLost(    java.awt.event.FocusEvent e){
      if (m_filename.getText().length() > 0)       setFile(new java.io.File(m_filename.getText()));
 else       setFile(null);
      notifyListeners(m_filename.getText());
    }
  }
);
  add(m_buttonFileSelection,java.awt.BorderLayout.EAST);
}
"
762,buttonFileSelectionActionPerformed(java.awt.event.ActionEvent),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\FileSelectionTextField.java,jsmooth,19,136,101,5,0.1526,0.0786,1,6,6,"private void buttonFileSelectionActionPerformed(java.awt.event.ActionEvent evt){
  String fname=m_filename.getText().trim();
  java.io.File cur=new java.io.File(fname);
  if ((cur.isAbsolute() == false) && (m_basedir != null)) {
    cur=new File(m_basedir,cur.toString()).getAbsoluteFile();
    try {
      cur=cur.getCanonicalFile();
    }
 catch (    IOException iox) {
      iox.printStackTrace();
    }
  }
  m_fileChooser.setSelectedFile(cur);
  if (m_fileChooser.showDialog(this,""Select"") == JFileChooser.APPROVE_OPTION) {
    java.io.File f=m_fileChooser.getSelectedFile();
    if (m_basedir != null) {
      File rel=net.charabia.jsmoothgen.application.JSmoothModelPersistency.makePathRelativeIfPossible(m_basedir,f);
      m_filename.setText(rel.toString());
      notifyListeners(rel.toString());
    }
 else {
      m_filename.setText(f.getAbsolutePath());
      notifyListeners(f.getAbsolutePath());
    }
  }
}
"
777,HelpButton(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\HelpButton.java,jsmooth,12,46,26,4,0.1944,0.1744,0,8,1,"public HelpButton(String helptext){
  setText("""");
  setIcon(ICON_HELP);
  m_helpWindow.getContentPane().setBackground(Color.yellow);
  m_helpWindow.getContentPane().setLayout(new BorderLayout());
  JEditorPane jep=new JEditorPane(""text/html"",wrap(helptext));
  jep.setBackground(Color.yellow);
  jep.setEditable(false);
  m_helpWindow.getContentPane().add(jep,BorderLayout.CENTER);
  jep.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.LOWERED));
  m_helpWindow.pack();
  m_helpWindow.addMouseListener(new MouseAdapter(){
    public void mouseEntered(    MouseEvent e){
      HelpButton.this.m_helpWindow.dispose();
    }
    public void mouseExited(    MouseEvent e){
      HelpButton.this.m_helpWindow.dispose();
    }
  }
);
  addMouseListener(new MouseAdapter(){
    public void mouseEntered(    MouseEvent e){
      HelpButton.this.requestFocus();
      HelpButton.this.adjustLocation();
      m_helpWindow.setVisible(true);
    }
    public void mouseExited(    MouseEvent e){
      m_helpWindow.setVisible(false);
    }
  }
);
}
"
783,wrap(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\HelpButton.java,jsmooth,18,107,61,4,0.2037,0.1853,0,6,9,"public String wrap(String str){
  StringBuffer sb=new StringBuffer();
  StringBuffer line=new StringBuffer();
  StringTokenizer stok=new StringTokenizer(str,"" "",true);
  while (stok.hasMoreElements()) {
    boolean cut=false;
    String tok=stok.nextToken();
    line.append(tok);
    if (tok.indexOf(""<br"") >= 0 || tok.indexOf(""<BR"") >= 0 || tok.indexOf(""<p>"") >= 0 || tok.indexOf(""<p/>"") >= 0 || tok.indexOf(""<P/>"") >= 0 || tok.indexOf(""<P/>"") >= 0) {
      sb.append(line);
      line.setLength(0);
    }
    if (line.length() > 80) {
      sb.append(line);
      sb.append(""<br>\n"");
      line.setLength(0);
    }
  }
  sb.append(line);
  return sb.toString();
}
"
784,adjustLocation(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\HelpButton.java,jsmooth,7,12,3,2,0.3143,0.1667,0,2,3,"public void adjustLocation(){
  Point p=this.getLocationOnScreen();
  p.y+=getHeight();
  Rectangle bounds=GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
  if ((p.x + m_helpWindow.getWidth()) > bounds.width)   p.x=bounds.width - m_helpWindow.getWidth();
  if (p.x < bounds.x)   p.x=bounds.x;
  m_helpWindow.setLocation(p.x,p.y);
}
"
791,LayoutLengthDescriptor(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\LayoutLengthDescriptor.java,jsmooth,24,221,166,4,0.112,0.0988,0,9,9,"public LayoutLengthDescriptor(String s){
  try {
    s=s.trim();
    StringBuffer len=new StringBuffer();
    StringBuffer unit=new StringBuffer();
    int offset=0;
    for (; offset < s.length(); offset++) {
      char c=s.charAt(offset);
      if (Character.isDigit(c) == false)       break;
      len.append(c);
    }
    for (; offset < s.length(); offset++) {
      char c=s.charAt(offset);
      if (Character.isWhitespace(c) == false)       break;
    }
    for (; offset < s.length(); offset++) {
      char c=s.charAt(offset);
      unit.append(c);
    }
    System.out.println(""len: "" + len);
    System.out.println(""unit: "" + unit);
    m_length=Integer.parseInt(len.toString());
    String sunit=unit.toString();
    if (sunit.equals(""px""))     m_unit=PIXEL;
 else     if (sunit.equals(""%""))     m_unit=PERCENT;
  }
 catch (  Exception exc) {
    throw new RuntimeException(""Error parsing "" + s);
  }
}
"
802,main(String[]),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\OptionalHelpPanel.java,jsmooth,19,123,75,4,0.152,0.1399,1,4,1,"public static void main(String[] args){
  JFrame f=new JFrame(""test"");
  OptionalHelpPanel ohp=new OptionalHelpPanel();
  ohp.setHelpText(""This is my help text"");
  ohp.setLabel(""My label1"");
  ohp.getContentPane().setLayout(new BorderLayout());
  ohp.getContentPane().add(BorderLayout.CENTER,new FileSelectionTextField());
  OptionalHelpPanel ohp2=new OptionalHelpPanel();
  ohp.setLabel(""hop2"");
  ohp2.setHelpText(""<html><h1>This is my second help text</h1>le gént du logiciel va-t-il éouter et arré¾er le déuge promotionel qui vise ï¿?faire connaitre les nouveauté?de Office 2003 alors que les utilisateurs sont satisfaits des versions prééentes et que les responsables zieutent lourdement du cotï¿?de Linux et d'OpenOffice ?"");
  ohp2.getContentPane().setLayout(new BorderLayout());
  ohp2.getContentPane().add(BorderLayout.CENTER,new JTextField());
  f.getContentPane().setLayout(new PanelLayout());
  f.getContentPane().add(ohp);
  f.getContentPane().add(ohp2);
  f.setSize(300,300);
  f.setVisible(true);
}
"
806,calculateMinimumSize(Container),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\PanelLayout.java,jsmooth,11,36,17,3,0.2222,0.1201,1,5,4,"private void calculateMinimumSize(Container parent){
  m_minimumSize=new Dimension();
  for (int i=0; i < parent.getComponentCount(); i++) {
    Component element=parent.getComponent(i);
    if (element.isVisible()) {
      Dimension eld=element.getPreferredSize();
      LayoutLengthDescriptor ld=(LayoutLengthDescriptor)m_componentToLayoutLengthDescriptor.get(element);
      if (ld != null)       eld.height=ld.getLength(parent.getHeight());
      m_minimumSize.height+=eld.height;
      m_minimumSize.width=Math.max(m_minimumSize.width,eld.width);
    }
  }
}
"
809,layoutContainer(Container),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\PanelLayout.java,jsmooth,16,75,30,3,0.1932,0.1149,1,10,5,"public void layoutContainer(Container parent){
  Insets insets=parent.getInsets();
  int xoffset=insets.left;
  int yoffset=insets.top;
  int maxcwidth=parent.getWidth() - (insets.right + insets.left);
  int maxcheight=parent.getHeight() - insets.bottom;
  for (int i=0; i < parent.getComponentCount(); i++) {
    Component element=parent.getComponent(i);
    if (element.isVisible()) {
      Dimension eld=element.getPreferredSize();
      LayoutLengthDescriptor ld=(LayoutLengthDescriptor)m_componentToLayoutLengthDescriptor.get(element);
      if (ld != null)       eld.height=ld.getLength(parent.getHeight());
      if ((eld.height + yoffset) > maxcheight)       eld.height=maxcheight - yoffset;
      element.setBounds(xoffset,yoffset,maxcwidth,eld.height);
      yoffset+=eld.height;
    }
  }
}
"
810,PropertyEditorDialog(JavaPropertyPair),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\PropertyEditorDialog.java,jsmooth,36,407,184,6,0.109,0.2056,0.5,4,1,"public PropertyEditorDialog(JavaPropertyPair prop){
  super();
  setTitle(Main.local(""JAVAPROP_DIALOG_TITLE""));
  setModal(true);
  m_prop=prop;
  getContentPane().setLayout(new PanelLayout());
  JLabel eq=new JLabel("" = "");
  eq.setHorizontalAlignment(JLabel.CENTER);
  OptionalHelpPanel keypane=new OptionalHelpPanel();
  keypane.setLabel(Main.local(""JAVAPROP_DIALOG_LABEL""));
  keypane.setHelpText(Main.local(""JAVAPROP_DIALOG_HELP""));
  keypane.getContentPane().setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=GridBagConstraints.RELATIVE;
  c.gridy=GridBagConstraints.RELATIVE;
  c.gridwidth=1;
  c.weightx=0.5;
  keypane.getContentPane().add(new JLabel(Main.local(""JAVAPROP_NAME"")),c);
  c.weightx=0.1;
  keypane.getContentPane().add(new JLabel(""""),c);
  c.weightx=0.5;
  c.gridwidth=GridBagConstraints.REMAINDER;
  keypane.getContentPane().add(new JLabel(Main.local(""JAVAPROP_VALUE"")),c);
  c.gridwidth=1;
  c.weightx=0.5;
  keypane.getContentPane().add(m_key,c);
  c.weightx=0.1;
  keypane.getContentPane().add(eq,c);
  c.weightx=0.5;
  keypane.getContentPane().add(m_value,c);
  getContentPane().add(keypane);
  getBanner().setVisible(false);
  setResizable(false);
  pack();
  m_key.setText(m_prop.getName());
  m_value.setText(m_prop.getValue());
}
"
815,"RecentFileMenu(JMenu,int,Class,RecentFileMenu.Action)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\RecentFileMenu.java,jsmooth,8,27,26,7,0.1375,0.01,0,4,1,"/** 
 * Creates a new instance of RecentFileMenu 
 */
public RecentFileMenu(JMenu menuroot,int recentCount,Class prefAttach,RecentFileMenu.Action action){
  m_recent=new Vector(recentCount);
  m_recentCount=recentCount;
  m_root=menuroot;
  m_prefAttach=prefAttach;
  m_action=action;
  loadRecentPrefs();
}
"
816,loadRecentPrefs(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\RecentFileMenu.java,jsmooth,10,35,25,4,0.2,0.077,0,4,4,"private void loadRecentPrefs(){
  Preferences p=Preferences.systemNodeForPackage(m_prefAttach);
  int count=p.getInt(""recentfilecount"",0);
  m_recent.removeAllElements();
  for (int i=0; i < count; i++) {
    String rf=p.get(""recentfile_"" + i,null);
    if ((rf != null) && (m_recent.size() < m_recentCount)) {
      m_recent.add(rf);
    }
  }
  buildMenu();
}
"
817,savePrefs(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\RecentFileMenu.java,jsmooth,8,23,18,5,0.2292,0.0847,0,2,2,"public void savePrefs(){
  Preferences p=Preferences.systemNodeForPackage(m_prefAttach);
  for (int i=0; i < m_recent.size(); i++) {
    p.put(""recentfile_"" + i,m_recent.elementAt(i).toString());
  }
  p.putInt(""recentfilecount"",m_recent.size());
}
"
819,buildMenu(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\RecentFileMenu.java,jsmooth,11,44,33,2,0.1717,0.1015,1,5,2,"private void buildMenu(){
  m_root.removeAll();
  for (int i=0; i < Math.min(m_recent.size(),m_recentCount); i++) {
    JMenuItem item=new JMenuItem(m_recent.elementAt(i).toString());
    ActionRecent ar=new ActionRecent();
    ar.Offset=i;
    item.addActionListener(ar);
    m_root.add(item);
  }
  m_root.addSeparator();
  JMenuItem clear=new JMenuItem(""Clear"");
  clear.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      m_recent.removeAllElements();
      buildMenu();
    }
  }
);
  m_root.add(clear);
}
"
821,add(String),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\RecentFileMenu.java,jsmooth,6,12,9,4,0.3333,0.1389,0,1,2,"public void add(String rec){
  m_recent.remove(rec);
  m_recent.insertElementAt(rec,0);
  while (m_recent.size() > m_recentCount)   m_recent.remove(m_recent.size() - 1);
  buildMenu();
}
"
823,"insertString(int,String,AttributeSet)",D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\RegExDocument.java,jsmooth,12,49,32,2,0.1944,0.101,0,8,4,"public void insertString(int offset,String string,AttributeSet attributes) throws BadLocationException {
  if (string == null)   return;
  String result;
  int length=getLength();
  if (length == 0) {
    result=string;
  }
 else {
    String currentContent=getText(0,length);
    StringBuffer currentBuffer=new StringBuffer(currentContent);
    currentBuffer.insert(offset,string);
    result=currentBuffer.toString();
  }
  java.util.regex.Matcher m=m_pattern.matcher(result);
  if (m.matches()) {
    super.insertString(offset,string,attributes);
  }
  java.awt.Toolkit.getDefaultToolkit().beep();
}
"
839,initComponents(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\SortedEditableList.java,jsmooth,22,187,143,3,0.1091,0.1558,0,6,1,"/** 
 * This method is called from within the constructor to
 * initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
 */
private void initComponents(){
  java.awt.GridBagConstraints gridBagConstraints;
  jScrollPane1=new javax.swing.JScrollPane();
  m_itemList=new javax.swing.JList();
  m_buttonAdd=new javax.swing.JButton();
  m_buttonRemove=new javax.swing.JButton();
  m_buttonEdit=new javax.swing.JButton();
  jSeparator1=new javax.swing.JSeparator();
  m_buttonUp=new javax.swing.JButton();
  m_buttonDown=new javax.swing.JButton();
  setLayout(new java.awt.GridBagLayout());
  jScrollPane1.setViewportView(m_itemList);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridwidth=4;
  gridBagConstraints.gridheight=8;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.weightx=1.0;
  gridBagConstraints.weighty=1.0;
  add(jScrollPane1,gridBagConstraints);
  m_buttonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/icons/stock_insert-element.png"")));
  m_buttonAdd.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      buttonAddActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  add(m_buttonAdd,gridBagConstraints);
  m_buttonRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/icons/stock_remove-element.png"")));
  m_buttonRemove.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      buttonRemoveActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  add(m_buttonRemove,gridBagConstraints);
  m_buttonEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/icons/stock_edit.png"")));
  m_buttonEdit.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      buttonEditActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  add(m_buttonEdit,gridBagConstraints);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.weighty=1.0;
  gridBagConstraints.insets=new java.awt.Insets(5,5,5,5);
  add(jSeparator1,gridBagConstraints);
  m_buttonUp.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/icons/stock_up.png"")));
  m_buttonUp.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      buttonUpActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridy=6;
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.SOUTH;
  add(m_buttonUp,gridBagConstraints);
  m_buttonDown.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/icons/stock_down.png"")));
  m_buttonDown.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      buttonDownActionPerformed(evt);
    }
  }
);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridy=7;
  gridBagConstraints.gridwidth=java.awt.GridBagConstraints.REMAINDER;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.SOUTH;
  add(m_buttonDown,gridBagConstraints);
}
"
845,buttonDownActionPerformed(java.awt.event.ActionEvent),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\SortedEditableList.java,jsmooth,7,8,0,2,0.381,0.204,0,4,2,"private void buttonDownActionPerformed(java.awt.event.ActionEvent evt){
  int max=m_model.size();
  int index=m_itemList.getSelectedIndex();
  if ((index + 1) < max) {
    Object o=m_model.remove(index);
    m_model.add(index + 1,o);
    m_itemList.setSelectedIndex(index + 1);
  }
  modelChanged();
}
"
849,buttonEditActionPerformed(java.awt.event.ActionEvent),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\SortedEditableList.java,jsmooth,8,10,0,2,0.3036,0.2482,1,4,3,"private void buttonEditActionPerformed(java.awt.event.ActionEvent evt){
  int index=m_itemList.getSelectedIndex();
  if (index >= 0) {
    Object o=m_model.get(index);
    Object n=m_editor.editItem(this,o);
    if (n != null) {
      m_model.removeElementAt(index);
      m_model.add(index,n);
      m_itemList.setSelectedIndex(index);
    }
  }
  modelChanged();
}
"
851,buttonAddActionPerformed(java.awt.event.ActionEvent),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\gui\util\SortedEditableList.java,jsmooth,9,15,0,3,0.3611,0.3048,1,4,6,"private void buttonAddActionPerformed(java.awt.event.ActionEvent evt){
  Object item=m_editor.createNewItem(this);
  if (item != null) {
    System.out.println(""IsArray: "" + item.getClass() + "" == ""+ item.getClass().isArray());
    if (item.getClass().isArray()) {
      for (int i=0; i < java.lang.reflect.Array.getLength(item); i++) {
        Object o=java.lang.reflect.Array.get(item,i);
        if (m_model.contains(o) == false)         m_model.addElement(o);
      }
    }
 else {
      if (m_model.contains(item) == false)       m_model.addElement(item);
    }
    modelChanged();
  }
}
"
853,JSmoothResources(Display),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\resources\JSmoothResources.java,jsmooth,8,26,24,6,0.1607,0.03,0,5,2,"public JSmoothResources(Display display){
  Class clazz=getClass();
  URL url=clazz.getResource(""jsmooth.properties"");
  try {
    bundle=new PropertyResourceBundle(url.openStream());
  }
 catch (  IOException e) {
  }
  loadImages(this.display=display);
  loadText();
}
"
854,loadImages(Display),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\resources\JSmoothResources.java,jsmooth,9,8,0,2,0.3333,0.3556,0,2,1,"public void loadImages(Display display){
  System.out.println(""[DEBUG] Loading images..."");
  String name=bundle.getString(""img.switcher.skeleton"");
  IMG_SWITCHER_SKELETON_PAGE=new Image(display,getClass().getResourceAsStream(name));
  name=bundle.getString(""img.switcher.application"");
  IMG_SWITCHER_APPLICATION=new Image(display,getClass().getResourceAsStream(name));
  name=bundle.getString(""img.switcher.executable"");
  IMG_SWITCHER_EXECUTABLE=new Image(display,getClass().getResourceAsStream(name));
  name=bundle.getString(""img.switcher.welcome"");
  IMG_SWITCHER_WELCOME=new Image(display,getClass().getResourceAsStream(name));
}
"
855,loadText(),D:\temp\case study\jsmooth-0.9.9-7-src\src\net\charabia\jsmoothgen\application\swtgui\resources\JSmoothResources.java,jsmooth,7,15,9,3,0.2571,0.1468,0,3,2,"public void loadText(){
  System.out.println(""[DEBUG] Loading text..."");
  InputStream stream=getClass().getResourceAsStream(""welcome.xml"");
  byte[] bytes=new byte[5000];
  try {
    stream.read(bytes);
    TEXT_HELP_WELCOME=(new String(bytes)).trim();
    stream.close();
  }
 catch (  IOException e1) {
  }
}
"
857,createDemoNetwork(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\RecommenderNetwork.java,neuroph,38,597,491,8,0.0754,0.0476,0.636363636,13,2,"public void createDemoNetwork(){
  int productsCount=20;
  int typesCount=3;
  int brandsCount=3;
  int priceCount=3;
  int promoCount=3;
  this.setNetworkType(NeuralNetworkType.RECOMMENDER);
  NeuronProperties neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.RAMP);
  neuronProperties.setProperty(""transferFunction.slope"",new Double(1));
  Layer inputLayer=LayerFactory.createLayer(productsCount,neuronProperties);
  this.addLayer(inputLayer);
  createProductLabels(inputLayer);
  Layer typeLayer=LayerFactory.createLayer(typesCount,neuronProperties);
  createTypeLabels(typeLayer);
  this.addLayer(typeLayer);
  Layer brandLayer=LayerFactory.createLayer(brandsCount,neuronProperties);
  createBrandLabels(brandLayer);
  this.addLayer(brandLayer);
  Layer priceLayer=LayerFactory.createLayer(priceCount,neuronProperties);
  createPriceLabels(priceLayer);
  this.addLayer(priceLayer);
  Layer promoLayer=LayerFactory.createLayer(promoCount,neuronProperties);
  createPromoLabels(promoLayer);
  this.addLayer(promoLayer);
  Layer outputLayer=LayerFactory.createLayer(productsCount,neuronProperties);
  this.addLayer(outputLayer);
  createProductLabels(outputLayer);
  createTypeConnections();
  createBrandConnections();
  createPriceConnections();
  createPromoConnections();
  for (  Neuron neuron : this.getLayerAt(outputLayerIdx).getNeurons()) {
    neuron.addInputConnection(neuron,1);
  }
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new UnsupervisedHebbianLearning());
}
"
858,createTypeConnections(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\RecommenderNetwork.java,neuroph,25,141,0,2,0.12,0.1256,0.666666667,18,7,"private void createTypeConnections(){
  for (int i=0; i < 7; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(i);
    Neuron toNeuron=this.getLayerAt(typeLayerIdx).getNeuronAt(0);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=7; i < 14; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(i);
    Neuron toNeuron=this.getLayerAt(typeLayerIdx).getNeuronAt(1);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=14; i < 20; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(i);
    Neuron toNeuron=this.getLayerAt(typeLayerIdx).getNeuronAt(2);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < 7; i++) {
    Neuron fromNeuron=this.getLayerAt(typeLayerIdx).getNeuronAt(0);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(i);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=7; i < 14; i++) {
    Neuron fromNeuron=this.getLayerAt(typeLayerIdx).getNeuronAt(1);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(i);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=14; i < 20; i++) {
    Neuron fromNeuron=this.getLayerAt(typeLayerIdx).getNeuronAt(2);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(i);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
}
"
859,createBrandConnections(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\RecommenderNetwork.java,neuroph,29,247,88,9,0.0952,0.0945,0.666666667,21,7,"private void createBrandConnections(){
  int samsung[]={0,1,7,8,9,14,15};
  int lg[]={2,3,10,11,16,17};
  int sony[]={4,5,6,12,13,18,19};
  for (int i=0; i < 7; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(samsung[i]);
    Neuron toNeuron=this.getLayerAt(brandLayerIdx).getNeuronAt(0);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < 6; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(lg[i]);
    Neuron toNeuron=this.getLayerAt(brandLayerIdx).getNeuronAt(1);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < 7; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(sony[i]);
    Neuron toNeuron=this.getLayerAt(brandLayerIdx).getNeuronAt(2);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < 7; i++) {
    Neuron fromNeuron=this.getLayerAt(brandLayerIdx).getNeuronAt(0);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(samsung[i]);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < 6; i++) {
    Neuron fromNeuron=this.getLayerAt(brandLayerIdx).getNeuronAt(1);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(lg[i]);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < 7; i++) {
    Neuron fromNeuron=this.getLayerAt(brandLayerIdx).getNeuronAt(2);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(sony[i]);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
}
"
860,createPriceConnections(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\RecommenderNetwork.java,neuroph,29,247,88,9,0.0952,0.0945,0.666666667,21,7,"private void createPriceConnections(){
  int low[]={0,2,4,7,10,16,18};
  int mid[]={3,5,8,11,12,14,19};
  int high[]={1,6,9,13,15,17};
  for (int i=0; i < 7; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(low[i]);
    Neuron toNeuron=this.getLayerAt(priceLayerIdx).getNeuronAt(0);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < 7; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(mid[i]);
    Neuron toNeuron=this.getLayerAt(priceLayerIdx).getNeuronAt(1);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < 6; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(high[i]);
    Neuron toNeuron=this.getLayerAt(priceLayerIdx).getNeuronAt(2);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < 7; i++) {
    Neuron fromNeuron=this.getLayerAt(priceLayerIdx).getNeuronAt(0);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(low[i]);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < 7; i++) {
    Neuron fromNeuron=this.getLayerAt(priceLayerIdx).getNeuronAt(1);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(mid[i]);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < 6; i++) {
    Neuron fromNeuron=this.getLayerAt(priceLayerIdx).getNeuronAt(2);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(high[i]);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
}
"
861,createPromoConnections(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\RecommenderNetwork.java,neuroph,28,198,18,2,0.1071,0.1181,0.666666667,21,7,"private void createPromoConnections(){
  int sales[]={0,10,19};
  int new_products[]={6,9};
  int bestsellers[]={3,12,14};
  for (int i=0; i < sales.length; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(sales[i]);
    Neuron toNeuron=this.getLayerAt(promoLayerIdx).getNeuronAt(0);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < new_products.length; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(new_products[i]);
    Neuron toNeuron=this.getLayerAt(promoLayerIdx).getNeuronAt(1);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < bestsellers.length; i++) {
    Neuron fromNeuron=this.getLayerAt(inputLayerIdx).getNeuronAt(bestsellers[i]);
    Neuron toNeuron=this.getLayerAt(promoLayerIdx).getNeuronAt(2);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < sales.length; i++) {
    Neuron fromNeuron=this.getLayerAt(promoLayerIdx).getNeuronAt(0);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(sales[i]);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < new_products.length; i++) {
    Neuron fromNeuron=this.getLayerAt(promoLayerIdx).getNeuronAt(1);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(new_products[i]);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
  for (int i=0; i < bestsellers.length; i++) {
    Neuron fromNeuron=this.getLayerAt(promoLayerIdx).getNeuronAt(2);
    Neuron toNeuron=this.getLayerAt(outputLayerIdx).getNeuronAt(bestsellers[i]);
    this.createConnection(fromNeuron,toNeuron,0.1);
  }
}
"
862,createProductLabels(Layer),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\RecommenderNetwork.java,neuroph,22,41,0,3,0.9091,0.8261,1,1,1,"private void createProductLabels(Layer layer){
  layer.getNeuronAt(0).setLabel(""Samsung LCD TV LE-32A330"");
  layer.getNeuronAt(1).setLabel(""Samsung LCD TV LE-32A558"");
  layer.getNeuronAt(2).setLabel(""LG LCD TV 32LG2000"");
  layer.getNeuronAt(3).setLabel(""LG LCD TV 32LG5010"");
  layer.getNeuronAt(4).setLabel(""Sony LCD TV KDL-32L4000K"");
  layer.getNeuronAt(5).setLabel(""Sony LCD TV KDL-32S4000"");
  layer.getNeuronAt(6).setLabel(""Sony LCD TV KDL-32W4000K"");
  layer.getNeuronAt(7).setLabel(""Samsung Digital Camera S760"");
  layer.getNeuronAt(8).setLabel(""Samsung Digital Camera L100"");
  layer.getNeuronAt(9).setLabel(""Samsung Digital Camera S850"");
  layer.getNeuronAt(10).setLabel(""LG Digital Camera DMCLS80E"");
  layer.getNeuronAt(11).setLabel(""LG Digital Camera DMCLZ8E"");
  layer.getNeuronAt(12).setLabel(""Sony Digital Camera DSCW120S"");
  layer.getNeuronAt(13).setLabel(""Sony Digital Camera DSCW130S"");
  layer.getNeuronAt(14).setLabel(""Samsung Mobile Phone E251"");
  layer.getNeuronAt(15).setLabel(""Samsung Mobile Phone U600"");
  layer.getNeuronAt(16).setLabel(""Sony Mobile Phone KP100"");
  layer.getNeuronAt(17).setLabel(""Sony Mobile Phone KE850"");
  layer.getNeuronAt(18).setLabel(""LG Mobile Phone K330"");
  layer.getNeuronAt(19).setLabel(""LG Mobile Phone K660"");
}
"
876,clone(),D:\temp\case study\neuroph-2.94\org\neuroph\core\Connection.java,neuroph,7,11,1,3,0.2857,0.25,1,1,1,"@Override public Object clone() throws CloneNotSupportedException {
  Connection cloned=(Connection)super.clone();
  cloned.setWeight((Weight)weight.clone());
  cloned.toNeuron=(Neuron)toNeuron.clone();
  cloned.fromNeuron=(Neuron)fromNeuron.clone();
  return cloned;
}
"
877,hashCode(),D:\temp\case study\neuroph-2.94\org\neuroph\core\Connection.java,neuroph,7,11,1,3,0.3143,0.225,0,4,1,"@Override public int hashCode(){
  int hash=7;
  hash=67 * hash + Objects.hashCode(this.fromNeuron);
  hash=67 * hash + Objects.hashCode(this.toNeuron);
  hash=67 * hash + Objects.hashCode(this.weight);
  return hash;
}
"
878,equals(Object),D:\temp\case study\neuroph-2.94\org\neuroph\core\Connection.java,neuroph,9,24,12,3,0.2593,0.1929,0,5,7,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final Connection other=(Connection)obj;
  if (!Objects.equals(this.fromNeuron,other.fromNeuron)) {
    return false;
  }
  if (!Objects.equals(this.toNeuron,other.toNeuron)) {
    return false;
  }
  if (!Objects.equals(this.weight,other.weight)) {
    return false;
  }
  return true;
}
"
882,"Layer(int,NeuronProperties)",D:\temp\case study\neuroph-2.94\org\neuroph\core\Layer.java,neuroph,6,13,11,4,0.2222,0.0536,1,4,2,"/** 
 * Creates an instance of Layer with the specified number of neurons with
 * specified neuron properties
 * @param neuronsCount number of neurons in layer
 * @param neuronProperties properties of neurons in layer
 */
public Layer(int neuronsCount,NeuronProperties neuronProperties){
  this(neuronsCount);
  for (int i=0; i < neuronsCount; i++) {
    Neuron neuron=NeuronFactory.createNeuron(neuronProperties);
    this.addNeuron(neuron);
  }
}
"
890,removeNeuronAt(int),D:\temp\case study\neuroph-2.94\org\neuroph\core\Layer.java,neuroph,7,17,13,4,0.2245,0.1167,0.75,2,2,"/** 
 * Removes neuron at specified index position in this layer
 * @param index index position of neuron to remove
 */
public final void removeNeuronAt(int index){
  Neuron neuron=neurons.get(index);
  neuron.setParentLayer(null);
  neuron.removeAllConnections();
  neurons.remove(index);
  if (parentNetwork != null)   parentNetwork.fireNetworkEvent(new NeuralNetworkEvent(this,NeuralNetworkEvent.Type.NEURON_REMOVED));
}
"
903,"addLayer(int,Layer)",D:\temp\case study\neuroph-2.94\org\neuroph\core\NeuralNetwork.java,neuroph,6,9,3,2,0.2778,0.1578,1,2,3,"/** 
 * Adds layer to specified index position in network
 * @param index index position to add layer
 * @param layer layer to add
 */
public void addLayer(int index,Layer layer){
  if (layer == null) {
    throw new IllegalArgumentException(""Layer cant be null!"");
  }
  if (index < 0) {
    throw new IllegalArgumentException(""Layer index cannot be negative: "" + index);
  }
  layer.setParentNetwork(this);
  layers.add(index,layer);
  fireNetworkEvent(new NeuralNetworkEvent(layer,NeuralNetworkEvent.Type.LAYER_ADDED));
}
"
939,save(String),D:\temp\case study\neuroph-2.94\org\neuroph\core\NeuralNetwork.java,neuroph,12,49,32,5,0.1481,0.1559,1,5,4,"/** 
 * Saves neural network into the specified file.
 * @param filePath file path to save network into
 */
public void save(String filePath){
  ObjectOutputStream out=null;
  try {
    File file=new File(filePath);
    out=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
    out.writeObject(this);
    out.flush();
  }
 catch (  IOException ioe) {
    throw new NeurophException(""Could not write neural network to file!"",ioe);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException e) {
      }
    }
  }
}
"
940,load(String),D:\temp\case study\neuroph-2.94\org\neuroph\core\NeuralNetwork.java,neuroph,16,101,82,5,0.125,0.0909,1,6,5,"/** 
 * Loads neural network from the specified InputStream.
 * @param inputStream input stream to load network from
 * @return loaded neural network as NeuralNetwork object
 */
public static NeuralNetwork load(InputStream inputStream){
  ObjectInputStream oistream=null;
  try {
    oistream=new ObjectInputStream(new BufferedInputStream(inputStream));
    NeuralNetwork nnet=(NeuralNetwork)oistream.readObject();
    return nnet;
  }
 catch (  IOException ioe) {
    throw new NeurophException(""Could not read neural network file!"",ioe);
  }
catch (  ClassNotFoundException cnfe) {
    throw new NeurophException(""Class not found while trying to read neural network from file!"",cnfe);
  }
 finally {
    if (oistream != null) {
      try {
        oistream.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
}
"
1003,equals(Object),D:\temp\case study\neuroph-2.94\org\neuroph\core\Weight.java,neuroph,9,24,12,3,0.2222,0.1757,0,5,7,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final Weight other=(Weight)obj;
  if (Double.doubleToLongBits(this.value) != Double.doubleToLongBits(other.value)) {
    return false;
  }
  if (Double.doubleToLongBits(this.weightChange) != Double.doubleToLongBits(other.weightChange)) {
    return false;
  }
  if (!Objects.equals(this.trainingData,other.trainingData)) {
    return false;
  }
  return true;
}
"
1013,"initialize(NeuralNetwork,DataSet,int)",D:\temp\case study\neuroph-2.94\org\neuroph\eval\CrossValidation.java,neuroph,9,31,26,5,0.1778,0.0662,1,9,2,"private void initialize(NeuralNetwork neuralNetwork,DataSet dataSet,int numberOfFolds){
  this.neuralNetwork=neuralNetwork;
  this.numberOfFolds=numberOfFolds;
  this.dataSet=dataSet;
  if (neuralNetwork.getOutputsCount() == 1) {
    this.evaluation.addEvaluator(new ClassifierEvaluator.Binary(0.5));
  }
 else {
    this.evaluation.addEvaluator(new ClassifierEvaluator.MultiClass(dataSet.getColumnNames()));
  }
  this.evaluation.addEvaluator(new ErrorEvaluator(new MeanSquaredError()));
}
"
1031,printResult(),D:\temp\case study\neuroph-2.94\org\neuroph\eval\CrossValidationResult.java,neuroph,11,40,25,6,0.2424,0.2885,0,0,1,"public void printResult(){
  System.out.println(""=== Cross validation result ==="");
  System.out.println(""Instances: "" + numberOfInstances);
  System.out.println(""Number of folds: "" + numberOfFolds);
  System.out.println(""\n"");
  System.out.println(""=== Summary ==="");
  System.out.println(""Mean squared error: "" + average.mserror);
  System.out.println(""Accuracy: "" + average.accuracy);
  System.out.println(""Precision: "" + average.precision);
  System.out.println(""Recall: "" + average.recall);
  System.out.println(""FScore: "" + average.fScore);
  System.out.println(""Correlation coefficient: "" + average.correlationCoefficient);
}
"
1037,"evaluateDataSet(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\eval\Evaluation.java,neuroph,18,124,95,2,0.15,0.0937,0.466666667,8,5,"/** 
 * Runs evaluation procedure for given neural network and data set through all evaluatoors
 * Evaluation results are stored in evaluators
 * @param neuralNetwork trained neural network
 * @param dataSet       test data set used for evaluation
 * @return 
 */
public EvaluationResult evaluateDataSet(NeuralNetwork neuralNetwork,DataSet dataSet){
  for (  Evaluator evaluator : evaluators.values()) {
    evaluator.reset();
  }
  for (  DataSetRow dataRow : dataSet.getRows()) {
    neuralNetwork.setInput(dataRow.getInput());
    neuralNetwork.calculate();
    for (    Evaluator evaluator : evaluators.values()) {
      evaluator.processNetworkResult(neuralNetwork.getOutput(),dataRow.getDesiredOutput());
    }
  }
  ConfusionMatrix confusionMatrix;
  if (neuralNetwork.getOutputsCount() > 1) {
    confusionMatrix=getEvaluator(ClassifierEvaluator.MultiClass.class).getResult();
  }
 else {
    confusionMatrix=getEvaluator(ClassifierEvaluator.Binary.class).getResult();
  }
  double meanSquaredError=getEvaluator(ErrorEvaluator.class).getResult();
  EvaluationResult result=new EvaluationResult();
  result.setDataSet(dataSet);
  result.setConfusionMatrix(confusionMatrix);
  result.setMeanSquareError(meanSquaredError);
  return result;
}
"
1042,"runFullEvaluation(NeuralNetwork<?>,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\eval\Evaluation.java,neuroph,11,28,1,2,0.2338,0.2521,0.857142857,7,2,"/** 
 * Out of the box method (util) which computes all metrics for given neural network and test data set
 * @param neuralNet neural network to evaluate
 * @param dataSet data set to evaluate
 */
public static void runFullEvaluation(NeuralNetwork<?> neuralNet,DataSet dataSet){
  Evaluation evaluation=new Evaluation();
  evaluation.addEvaluator(new ClassifierEvaluator.MultiClass(dataSet.getColumnNames()));
  evaluation.evaluateDataSet(neuralNet,dataSet);
  LOGGER.info(""##############################################################################"");
  LOGGER.info(""MeanSquare Error: "" + evaluation.getEvaluator(ErrorEvaluator.class).getResult());
  LOGGER.info(""##############################################################################"");
  ClassifierEvaluator classificationEvaluator=evaluation.getEvaluator(ClassifierEvaluator.MultiClass.class);
  ConfusionMatrix confusionMatrix=classificationEvaluator.getResult();
  LOGGER.info(""Confusion Matrix: \r\n"" + confusionMatrix.toString());
  LOGGER.info(""##############################################################################"");
  LOGGER.info(""Classification metrics: "");
  ClassificationMetrics[] metrics=ClassificationMetrics.createFromMatrix(confusionMatrix);
  for (  ClassificationMetrics cm : metrics)   LOGGER.info(cm.toString());
  LOGGER.info(""##############################################################################"");
}
"
1052,toString(),D:\temp\case study\neuroph-2.94\org\neuroph\eval\EvaluationResult.java,neuroph,6,10,5,2,0.2778,0.1189,1,3,2,"@Override public String toString(){
  ClassificationMetrics[] cms=getClassificationMetricses();
  StringBuilder sb=new StringBuilder();
  for (  ClassificationMetrics c : cms) {
    sb.append(c).append(""\r\n"");
  }
  return ""EvaluationResult{"" + ""dataSet="" + dataSet.getLabel() + "", meanSquareError=""+ meanSquareError+ "", \r\n confusionMatrix=\r\n""+ confusionMatrix+ ""\r\n""+ sb.toString()+ ""}\r\n"";
}
"
1056,FractionHSLData(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\FractionHSLData.java,neuroph,18,110,67,3,0.1667,0.0942,0.5,1,1,"public FractionHSLData(Image img){
  width=img.getWidth();
  height=img.getHeight();
  hueValues=new double[height][width];
  saturationValues=new double[height][width];
  lightnessValues=new double[height][width];
  flattenedHSLValues=new double[width * height * 3];
  flattenedHueValues=new double[width * height];
  populateHSLArrays(img);
}
"
1058,populateHSLArrays(Image),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\FractionHSLData.java,neuroph,34,386,211,2,0.1164,0.0819,1,15,8,"/** 
 * Fills the HSL matrices from image - this is where conversion from RGB to HSL is done
 * @param image image to use    
 */
protected void populateHSLArrays(Image image){
  double red;
  double green;
  double blue;
  double Cmax;
  double Cmin;
  double delta;
  for (int j=0; j < width; j++) {
    for (int i=0; i < height; i++) {
      Color color=new Color(image.getPixel(j,i));
      red=color.getRed();
      green=color.getGreen();
      blue=color.getBlue();
      red=red / 255;
      green=green / 255;
      blue=blue / 255;
      Cmax=Math.max(red,Math.max(green,blue));
      Cmin=Math.min(red,Math.min(green,blue));
      delta=Cmax - Cmin;
      double hue=0;
      if (delta != 0) {
        if (Cmax == red)         hue=60 * (((green - blue) / delta) % 6);
        if (Cmax == green)         hue=60 * (((blue - red) / delta) + 2);
        if (Cmax == blue)         hue=60 * ((red - green) / delta + 4);
      }
 else {
        double a=(2 * red - green - blue) / 2;
        double b=(green - blue) * Math.sqrt(3) / 2;
        hue=Math.atan2(b,a);
      }
      hueValues[i][j]=hue / 360;
      double lightness=(Cmax + Cmin) / 2;
      lightnessValues[i][j]=lightness;
      double saturation=0;
      if (delta == 0)       saturation=0;
 else       saturation=delta / (1 - Math.abs(2 * lightness - 1));
      saturationValues[i][j]=saturation;
    }
  }
}
"
1060,fillFlattenedHSLValues(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\FractionHSLData.java,neuroph,11,37,19,1,0.1818,0.0888,0,5,3,"public void fillFlattenedHSLValues(){
  int positionHue=0;
  int positionSaturation=1;
  int positionLighteness=2;
  for (int i=0; i < height; i++) {
    for (int j=0; j < width; j++) {
      flattenedHSLValues[positionHue]=hueValues[i][j];
      flattenedHSLValues[positionSaturation]=saturationValues[i][j];
      flattenedHSLValues[positionLighteness]=lightnessValues[i][j];
      positionHue=positionHue + 3;
      positionSaturation=positionSaturation + 3;
      positionLighteness=positionLighteness + 3;
    }
  }
}
"
1067,populateRGBArrays(Image),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\FractionRgbData.java,neuroph,15,63,21,3,0.2103,0.1212,0.5,7,3,"/** 
 * Fills the rgb arrays from image
 * @param image image to get rgb data from
 */
protected final void populateRGBArrays(Image image){
  int color;
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      color=image.getPixel(x,y);
      double red=((double)Color.getRed(color)) / 256d;
      redValues[y][x]=red;
      flattenedRgbValues[(y * width + x)]=red;
      double green=((double)Color.getGreen(color)) / 256d;
      greenValues[y][x]=green;
      flattenedRgbValues[(width * height + y * width + x)]=green;
      double blue=((double)Color.getBlue(color)) / 256d;
      blueValues[y][x]=blue;
      flattenedRgbValues[(2 * width * height + y * width + x)]=blue;
    }
  }
}
"
1068,convertRgbInputToBinaryBlackAndWhite(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\FractionRgbData.java,neuroph,10,35,25,4,0.275,0.1402,0,5,3,"/** 
 * Converts image rgb data to binary black and white data (1 for black, 0 for white)
 * @param inputRGB flatten rgb data
 * @return binary black and white representation of image
 */
public static double[] convertRgbInputToBinaryBlackAndWhite(double[] inputRGB){
  int length=inputRGB.length / 3;
  double inputBinary[]=new double[length];
  for (int i=0; i < length; i++) {
    double rgbColorAvg=(inputRGB[i] + inputRGB[length + i] + inputRGB[2 * length + i]) / 3;
    if (rgbColorAvg < 0.19) {
      inputBinary[i]=1;
    }
 else {
      inputBinary[i]=0;
    }
  }
  return inputBinary;
}
"
1078,ImageFilesIterator(File),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageFilesIterator.java,neuroph,17,125,114,11,0.1176,0.041,0,7,4,"/** 
 * Creates image files iterator for the specified directory
 * @param dir Directory to iterate images from
 * @throws java.io.IOException
 */
public ImageFilesIterator(File dir) throws IOException {
  if (!dir.isDirectory()) {
    throw new IllegalArgumentException(dir + "" is not a directory!"");
  }
  String[] imageFilenames=dir.list(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      if (name.length() > 4) {
        String fileExtension=name.substring(name.length() - 4,name.length());
        return "".jpg"".equalsIgnoreCase(fileExtension) || "".png"".equalsIgnoreCase(fileExtension);
      }
      return false;
    }
  }
);
  List<File> imageFiles=new ArrayList<File>();
  for (  String imageFile : imageFilenames) {
    imageFiles.add(new File(dir,imageFile));
  }
  imageIterator=imageFiles.iterator();
}
"
1083,"createNewNeuralNetwork(String,Dimension,ColorMode,List<String>,List<Integer>,TransferFunctionType)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageRecognitionHelper.java,neuroph,16,87,54,2,0.151,0.0996,0.625,10,3,"/** 
 * Creates and returns new neural network for image recognition.
 * Assumes that all of the FractionRgbData objects in the given map have identical 
 * length arrays in them so that the input layer of the neural network can be 
 * created here.
 * @param label neural network label
 * @param samplingResolution sampling resolution (image size)
 * @param imageLabels image labels
 * @param layersNeuronsCount neuron counts in hidden layers
 * @param transferFunctionType type of transfer function to use for neurons in network
 * @param colorMode color mode
 * @return 
 */
public static NeuralNetwork createNewNeuralNetwork(String label,Dimension samplingResolution,ColorMode colorMode,List<String> imageLabels,List<Integer> layersNeuronsCount,TransferFunctionType transferFunctionType){
  int numberOfInputNeurons;
  if ((colorMode == ColorMode.COLOR_RGB) || (colorMode == ColorMode.COLOR_HSL)) {
    numberOfInputNeurons=3 * samplingResolution.getWidth() * samplingResolution.getHeight();
  }
 else {
    numberOfInputNeurons=samplingResolution.getWidth() * samplingResolution.getHeight();
  }
  int numberOfOuputNeurons=imageLabels.size();
  layersNeuronsCount.add(0,numberOfInputNeurons);
  layersNeuronsCount.add(numberOfOuputNeurons);
  System.out.println(""Neuron layer size counts vector = "" + layersNeuronsCount);
  NeuralNetwork neuralNetwork=new MultiLayerPerceptron(layersNeuronsCount,transferFunctionType);
  neuralNetwork.setLabel(label);
  PluginBase imageRecognitionPlugin=new ImageRecognitionPlugin(samplingResolution,colorMode);
  neuralNetwork.addPlugin(imageRecognitionPlugin);
  assignLabelsToOutputNeurons(neuralNetwork,imageLabels);
  neuralNetwork.setLearningRule(new MomentumBackpropagation());
  return neuralNetwork;
}
"
1084,"assignLabelsToOutputNeurons(NeuralNetwork,List<String>)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageRecognitionHelper.java,neuroph,7,14,7,3,0.2857,0.11,1,6,2,"/** 
 * Assign labels to output neurons
 * @param neuralNetwork neural network
 * @param imageLabels image labels
 */
private static void assignLabelsToOutputNeurons(NeuralNetwork neuralNetwork,List<String> imageLabels){
  List<Neuron> outputNeurons=neuralNetwork.getOutputNeurons();
  for (int i=0; i < outputNeurons.size(); i++) {
    Neuron neuron=outputNeurons.get(i);
    String label=imageLabels.get(i);
    neuron.setLabel(label);
  }
}
"
1086,"createRGBTrainingSet(List<String>,Map<String,FractionRgbData>)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageRecognitionHelper.java,neuroph,13,52,26,3,0.1795,0.0889,0.428571429,11,3,"/** 
 * Creates training set for the specified image labels and rgb data
 * @param imageLabels image labels
 * @param rgbDataMap map collection of rgb data
 * @return training set for the specified image data
 */
public static DataSet createRGBTrainingSet(List<String> imageLabels,Map<String,FractionRgbData> rgbDataMap){
  int inputCount=rgbDataMap.values().iterator().next().getFlattenedRgbValues().length;
  int outputCount=imageLabels.size();
  DataSet trainingSet=new DataSet(inputCount,outputCount);
  for (  Entry<String,FractionRgbData> entry : rgbDataMap.entrySet()) {
    double[] input=entry.getValue().getFlattenedRgbValues();
    double[] response=createResponse(entry.getKey(),imageLabels);
    trainingSet.addRow(new DataSetRow(input,response));
  }
  int inputSize=trainingSet.getInputSize();
  for (int c=0; c < trainingSet.getOutputSize(); c++) {
    trainingSet.setColumnName(inputSize + c,imageLabels.get(c));
  }
  return trainingSet;
}
"
1087,"createHSLTrainingSet(List<String>,Map<String,FractionHSLData>)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageRecognitionHelper.java,neuroph,13,52,26,3,0.1795,0.0889,0.428571429,11,3,"/** 
 * Creates training set for the specified image labels and hsl data
 * @param imageLabels image labels
 * @param hslDataMap map colletction of hsl data
 * @return training set for the specified image data
 */
public static DataSet createHSLTrainingSet(List<String> imageLabels,Map<String,FractionHSLData> hslDataMap){
  int inputCount=hslDataMap.values().iterator().next().getFlattenedHSLValues().length;
  int outputCount=imageLabels.size();
  DataSet trainingSet=new DataSet(inputCount,outputCount);
  for (  Entry<String,FractionHSLData> entry : hslDataMap.entrySet()) {
    double[] input=entry.getValue().getFlattenedHSLValues();
    double[] response=createResponse(entry.getKey(),imageLabels);
    trainingSet.addRow(new DataSetRow(input,response));
  }
  int inputSize=trainingSet.getInputSize();
  for (int c=0; c < trainingSet.getOutputSize(); c++) {
    trainingSet.setColumnName(inputSize + c,imageLabels.get(c));
  }
  return trainingSet;
}
"
1088,"createBlackAndWhiteTrainingSet(List<String>,Map<String,FractionRgbData>)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageRecognitionHelper.java,neuroph,13,51,24,2,0.1703,0.0905,0.375,12,3,"/** 
 * Creates binary black and white training set for the specified image labels and rgb data
 * white = 0 black = 1
 * @param imageLabels image labels
 * @param rgbDataMap map collection of rgb data
 * @return binary black and white training set for the specified image data
 */
public static DataSet createBlackAndWhiteTrainingSet(List<String> imageLabels,Map<String,FractionRgbData> rgbDataMap) throws VectorSizeMismatchException {
  int inputCount=rgbDataMap.values().iterator().next().getFlattenedRgbValues().length / 3;
  int outputCount=imageLabels.size();
  DataSet trainingSet=new DataSet(inputCount,outputCount);
  for (  Entry<String,FractionRgbData> entry : rgbDataMap.entrySet()) {
    double[] inputRGB=entry.getValue().getFlattenedRgbValues();
    double[] inputBW=FractionRgbData.convertRgbInputToBinaryBlackAndWhite(inputRGB);
    double[] response=createResponse(entry.getKey(),imageLabels);
    trainingSet.addRow(new DataSetRow(inputBW,response));
  }
  int inputSize=trainingSet.getInputSize();
  for (int c=0; c < trainingSet.getOutputSize(); c++) {
    trainingSet.setColumnName(inputSize + c,imageLabels.get(c));
  }
  return trainingSet;
}
"
1091,"createResponse(String,List<String>)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageRecognitionHelper.java,neuroph,10,33,21,4,0.24,0.1667,0,5,3,"/** 
 * Creates binary network output vector (response) for the specified list of images
 * Each network output (neuron) corresponds to one image.
 * @param inputLabel label of the input image
 * @param imageLabels labels used for output neurons
 * @return network response for the specified input
 */
private static double[] createResponse(String inputLabel,List<String> imageLabels){
  double[] response=new double[imageLabels.size()];
  int i=0;
  for (  String imageLabel : imageLabels) {
    if (inputLabel.startsWith(imageLabel)) {
      response[i]=1d;
    }
 else {
      response[i]=0d;
    }
    i++;
  }
  return response;
}
"
1092,"createLabels(HashMap<String,?>)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageRecognitionHelper.java,neuroph,10,31,17,3,0.26,0.1894,0,5,3,"private static List<String> createLabels(HashMap<String,?> map){
  List<String> imageLabels=new ArrayList<String>();
  for (  String imgName : map.keySet()) {
    StringTokenizer st=new StringTokenizer(imgName,""._"");
    String imageLabel=st.nextToken();
    if (!imageLabels.contains(imageLabel)) {
      imageLabels.add(imageLabel);
    }
  }
  Collections.sort(imageLabels);
  return imageLabels;
}
"
1114,blackAndWhiteCleaning(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageUtilities.java,neuroph,7,11,1,3,0.5238,0.2833,0,3,4,"/** 
 * This method cleans input image by replacing all non black pixels with
 * white pixels TODO: some should be used here
 * @param image - input image that will be cleaned
 * @return - cleaned input image as BufferedImage
 */
public static BufferedImage blackAndWhiteCleaning(BufferedImage image){
  for (int j=0; j < image.getHeight(); j++) {
    for (int i=0; i < image.getWidth(); i++) {
      if (image.getRGB(i,j) != -16777216) {
        image.setRGB(i,j,-1);
      }
    }
  }
  return image;
}
"
1115,blackAndGrayCleaning(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageUtilities.java,neuroph,8,13,0,3,0.5833,0.3457,0,3,4,"/** 
 * This method cleans input image by replacing all pixels with RGB values
 * from -4473925 (gray) to -1 (white) with white pixels and from -4473925
 * (gray) to -16777216 (black) with black pixels
 * @param image - input image that will be cleaned
 * @return - cleaned input image as BufferedImage
 */
public static BufferedImage blackAndGrayCleaning(BufferedImage image){
  for (int j=0; j < image.getHeight(); j++) {
    for (int i=0; i < image.getWidth(); i++) {
      if (image.getRGB(i,j) > -4473925) {
        image.setRGB(i,j,-1);
      }
 else {
        image.setRGB(i,j,-16777216);
      }
    }
  }
  return image;
}
"
1116,blackAndLightGrayCleaning(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageUtilities.java,neuroph,8,13,0,3,0.5833,0.3457,0,3,4,"/** 
 * This method cleans input image by replacing all pixels with RGB values
 * from -3092272 (light gray) to -1 (white) with white pixels and from
 * -3092272 (light gray) to -16777216 (black) with black pixels
 * @param image - input image that will be cleaned
 * @return - cleaned input image as BufferedImage
 */
public static BufferedImage blackAndLightGrayCleaning(BufferedImage image){
  for (int j=0; j < image.getHeight(); j++) {
    for (int i=0; i < image.getWidth(); i++) {
      if (image.getRGB(i,j) > -4473925) {
        image.setRGB(i,j,-1);
      }
 else {
        image.setRGB(i,j,-16777216);
      }
    }
  }
  return image;
}
"
1117,"colorCleaning(BufferedImage,int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageUtilities.java,neuroph,8,13,0,3,0.4688,0.3117,0,4,4,"/** 
 * This method cleans input image by replacing all pixels with RGB values
 * from RGBcolor input (the input color) to -1 (white) with white pixels and
 * from RGBcolor input (the input color) to -16777216 (black) with black
 * pixels
 * @param image - input image that will be cleaned
 * @param RGBcolor - input RGB value of wanted color as reference for
 * celaning
 * @return - cleaned input image as BufferedImage
 */
public static BufferedImage colorCleaning(BufferedImage image,int RGBcolor){
  for (int j=0; j < image.getHeight(); j++) {
    for (int i=0; i < image.getWidth(); i++) {
      if (image.getRGB(i,j) == RGBcolor) {
        image.setRGB(i,j,-16777216);
      }
 else {
        image.setRGB(i,j,-1);
      }
    }
  }
  return image;
}
"
1118,loadAndCleanImage(File),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageUtilities.java,neuroph,6,13,11,4,0.2222,0.0476,0,3,2,"/** 
 * This method loads the input Image and returns the cleaned version
 * @param file - input file that will be loaded as image
 * @return - return cleaned loaded image as BufferedImage
 */
public static BufferedImage loadAndCleanImage(File file){
  try {
    BufferedImage image=ImageIO.read(file);
    return blackAndLightGrayCleaning(image);
  }
 catch (  IOException ex) {
    Logger.getLogger(ImageUtilities.class.getName()).log(Level.SEVERE,null,ex);
    return null;
  }
}
"
1121,trimLockup(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageUtilities.java,neuroph,6,10,5,3,0.4444,0.1786,0,3,4,"/** 
 * This method reads the image pixels until it reads the first black pixel
 * by height and then returns that value
 * @param Img - input image that will be read
 * @return - returns the value of height when conditions are true
 */
private static int trimLockup(BufferedImage img){
  for (int j=0; j < img.getHeight(); j++) {
    for (int i=0; i < img.getWidth(); i++) {
      if (img.getRGB(i,j) == -16777216) {
        return j;
      }
    }
  }
  return 0;
}
"
1122,"trimLockdown(BufferedImage,int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageUtilities.java,neuroph,12,37,8,3,0.3167,0.2077,0,5,7,"/** 
 * This method reads the input image from the input from start pixel height
 * (y1) until it reads the first next row where all pixel are white by
 * height and return that value
 * @param Img - input image that will be read
 * @param y1 - input start height pixel of image
 * @return - returns the value of height when conditions are true
 */
private static int trimLockdown(BufferedImage img,int y1){
  for (int j=y1 + 1; j < img.getHeight(); j++) {
    int counterWhite=0;
    for (int i=0; i < img.getWidth(); i++) {
      if (img.getRGB(i,j) == -1) {
        counterWhite++;
      }
    }
    if (counterWhite == img.getWidth()) {
      if (j > (img.getHeight() / 2)) {
        return j;
      }
    }
    if (j == img.getHeight() - 1) {
      return j + 1;
    }
  }
  return 0;
}
"
1123,trimImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageUtilities.java,neuroph,7,14,7,3,0.3714,0.1425,0,5,1,"/** 
 * This method trims the input image and returns it as a BufferedImage
 * @param imageToTrim input image that will be trimed
 * @return return trimed input image as BufferedImage
 */
public static BufferedImage trimImage(BufferedImage imageToTrim){
  int y1=trimLockup(imageToTrim);
  int y2=trimLockdown(imageToTrim,y1);
  int x1=0;
  int x2=imageToTrim.getWidth();
  return cropImage(imageToTrim,x1,y1,x2,y2);
}
"
1128,"colorToRGB(int,int,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\ImageUtilities.java,neuroph,10,9,0,2,0.26,0.4889,0,5,1,"public static int colorToRGB(int alpha,int red,int green,int blue){
  int newPixel=0;
  newPixel+=alpha;
  newPixel=newPixel << 8;
  newPixel+=red;
  newPixel=newPixel << 8;
  newPixel+=green;
  newPixel=newPixel << 8;
  newPixel+=blue;
  return newPixel;
}
"
1130,createNetwork(int),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\Adaline.java,neuroph,19,151,131,8,0.1012,0.0408,0.75,5,1,"/** 
 * Creates adaline network architecture with specified number of input neurons
 * @param inputNeuronsCountnumber of neurons in input layer
 */
private void createNetwork(int inputNeuronsCount){
  this.setNetworkType(NeuralNetworkType.ADALINE);
  NeuronProperties inNeuronProperties=new NeuronProperties();
  inNeuronProperties.setProperty(""transferFunction"",TransferFunctionType.LINEAR);
  Layer inputLayer=new InputLayer(inputNeuronsCount);
  inputLayer.addNeuron(new BiasNeuron());
  this.addLayer(inputLayer);
  NeuronProperties outNeuronProperties=new NeuronProperties();
  outNeuronProperties.setProperty(""transferFunction"",TransferFunctionType.LINEAR);
  Layer outputLayer=LayerFactory.createLayer(1,outNeuronProperties);
  this.addLayer(outputLayer);
  ConnectionFactory.fullConnect(inputLayer,outputLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new LMS());
}
"
1132,"BAM(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\BAM.java,neuroph,8,7,0,2,0.2917,0.3679,0.5,3,1,"/** 
 * Creates an instance of BAM network with specified number of neurons
 * in input and output layers.
 * @param inputNeuronsCountnumber of neurons in input layer
 * @param outputNeuronsCountnumber of neurons in output layer
 */
public BAM(int inputNeuronsCount,int outputNeuronsCount){
  NeuronProperties neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""neuronType"",InputOutputNeuron.class);
  neuronProperties.setProperty(""bias"",new Double(0));
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.STEP);
  neuronProperties.setProperty(""transferFunction.yHigh"",new Double(1));
  neuronProperties.setProperty(""transferFunction.yLow"",new Double(0));
  this.createNetwork(inputNeuronsCount,outputNeuronsCount,neuronProperties);
}
"
1135,"createNetwork(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\CompetitiveNetwork.java,neuroph,14,65,39,2,0.1381,0.1064,0.7,6,1,"/** 
 * Creates Competitive network architecture
 * @param inputNeuronsCountinput neurons number
 * @param outputNeuronsCountoutput neurons number
 * @param neuronPropertiesneuron properties
 */
private void createNetwork(int inputNeuronsCount,int outputNeuronsCount){
  this.setNetworkType(NeuralNetworkType.COMPETITIVE);
  Layer inputLayer=LayerFactory.createLayer(inputNeuronsCount,new NeuronProperties());
  this.addLayer(inputLayer);
  NeuronProperties neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""neuronType"",CompetitiveNeuron.class);
  neuronProperties.setProperty(""inputFunction"",WeightedSum.class);
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.RAMP);
  CompetitiveLayer competitiveLayer=new CompetitiveLayer(outputNeuronsCount,neuronProperties);
  this.addLayer(competitiveLayer);
  double competitiveWeight=-(1 / (double)outputNeuronsCount);
  ConnectionFactory.fullConnect(competitiveLayer,competitiveWeight,1);
  ConnectionFactory.fullConnect(inputLayer,competitiveLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new CompetitiveLearning());
}
"
1149,"createNetwork(int,int,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\ElmanNetwork.java,neuroph,19,124,77,3,0.1257,0.0863,0.666666667,9,1,"private void createNetwork(int inputNeuronsCount,int hiddenNeuronsCount,int contextNeuronsCount,int outputNeuronsCount){
  InputLayer inputLayer=new InputLayer(inputNeuronsCount);
  inputLayer.addNeuron(new BiasNeuron());
  addLayer(inputLayer);
  NeuronProperties neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.SIGMOID);
  Layer hiddenLayer=new Layer(hiddenNeuronsCount,neuronProperties);
  hiddenLayer.addNeuron(new BiasNeuron());
  addLayer(hiddenLayer);
  ConnectionFactory.fullConnect(inputLayer,hiddenLayer);
  Layer contextLayer=new Layer(contextNeuronsCount,neuronProperties);
  addLayer(contextLayer);
  Layer outputLayer=new Layer(outputNeuronsCount,neuronProperties);
  addLayer(outputLayer);
  ConnectionFactory.fullConnect(hiddenLayer,outputLayer);
  ConnectionFactory.forwardConnect(hiddenLayer,contextLayer);
  ConnectionFactory.fullConnect(contextLayer,hiddenLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new BackPropagation());
}
"
1154,createNetwork(int),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\Instar.java,neuroph,11,33,11,2,0.1901,0.1288,0.666666667,4,1,"/** 
 * Creates Instar architecture with specified number of input neurons
 * @param inputNeuronsCountnumber of neurons in input layer
 */
private void createNetwork(int inputNeuronsCount){
  this.setNetworkType(NeuralNetworkType.INSTAR);
  NeuronProperties neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.STEP);
  Layer inputLayer=LayerFactory.createLayer(inputNeuronsCount,neuronProperties);
  this.addLayer(inputLayer);
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.STEP);
  Layer outputLayer=LayerFactory.createLayer(1,neuronProperties);
  this.addLayer(outputLayer);
  ConnectionFactory.fullConnect(inputLayer,outputLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new InstarLearning());
}
"
1156,"createNetwork(int,int,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\JordanNetwork.java,neuroph,19,125,79,3,0.1257,0.0801,0.727272727,9,1,"private void createNetwork(int inputNeuronsCount,int hiddenNeuronsCount,int contextNeuronsCount,int outputNeuronsCount){
  InputLayer inputLayer=new InputLayer(inputNeuronsCount);
  inputLayer.addNeuron(new BiasNeuron());
  addLayer(inputLayer);
  NeuronProperties neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.SIGMOID);
  Layer hiddenLayer=new Layer(hiddenNeuronsCount,neuronProperties);
  hiddenLayer.addNeuron(new BiasNeuron());
  addLayer(hiddenLayer);
  ConnectionFactory.fullConnect(inputLayer,hiddenLayer);
  Layer contextLayer=new Layer(contextNeuronsCount,neuronProperties);
  addLayer(contextLayer);
  Layer outputLayer=new Layer(outputNeuronsCount,neuronProperties);
  addLayer(outputLayer);
  ConnectionFactory.fullConnect(hiddenLayer,outputLayer);
  ConnectionFactory.fullConnect(outputLayer,contextLayer);
  ConnectionFactory.fullConnect(contextLayer,hiddenLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new BackPropagation());
}
"
1158,"createNetwork(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\Kohonen.java,neuroph,8,15,2,2,0.2083,0.1116,0.75,6,1,"/** 
 * Creates Kohonen network architecture with specified number of neurons in
 * input and map layer
 * @param inputNeuronsCountnumber of neurons in input layer
 * @param outputNeuronsCountnumber of neurons in output layer
 */
private void createNetwork(int inputNeuronsCount,int outputNeuronsCount){
  NeuronProperties inputNeuronProperties=new NeuronProperties();
  NeuronProperties outputNeuronProperties=new NeuronProperties(Neuron.class,Difference.class,Linear.class);
  this.setNetworkType(NeuralNetworkType.KOHONEN);
  Layer inLayer=LayerFactory.createLayer(inputNeuronsCount,inputNeuronProperties);
  this.addLayer(inLayer);
  Layer mapLayer=LayerFactory.createLayer(outputNeuronsCount,outputNeuronProperties);
  this.addLayer(mapLayer);
  ConnectionFactory.fullConnect(inLayer,mapLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new KohonenLearning());
}
"
1160,createNetwork(int),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\MaxNet.java,neuroph,12,46,26,2,0.1736,0.0959,0.666666667,5,1,"/** 
 * Creates MaxNet network architecture
 * @param neuronNumneuron number in network
 * @param neuronPropertiesneuron properties
 */
private void createNetwork(int neuronsCount){
  this.setNetworkType(NeuralNetworkType.MAXNET);
  Layer inputLayer=LayerFactory.createLayer(neuronsCount,new NeuronProperties());
  this.addLayer(inputLayer);
  NeuronProperties neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""neuronType"",CompetitiveNeuron.class);
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.RAMP);
  CompetitiveLayer competitiveLayer=new CompetitiveLayer(neuronsCount,neuronProperties);
  this.addLayer(competitiveLayer);
  double competitiveWeight=-(1 / (double)neuronsCount);
  ConnectionFactory.fullConnect(competitiveLayer,competitiveWeight,1);
  ConnectionFactory.forwardConnect(inputLayer,competitiveLayer,1);
  NeuralNetworkFactory.setDefaultIO(this);
}
"
1166,"createNetwork(List<Integer>,NeuronProperties)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\MultiLayerPerceptron.java,neuroph,23,188,123,3,0.1223,0.0926,0.714285714,8,7,"/** 
 * Creates MultiLayerPerceptron Network architecture - fully connected
 * feed forward with specified number of neurons in each layer
 * @param neuronsInLayers  collection of neuron numbers in getLayersIterator
 * @param neuronProperties neuron properties
 */
private void createNetwork(List<Integer> neuronsInLayers,NeuronProperties neuronProperties){
  this.setNetworkType(NeuralNetworkType.MULTI_LAYER_PERCEPTRON);
  NeuronProperties inputNeuronProperties=new NeuronProperties(InputNeuron.class,Linear.class);
  Layer layer=LayerFactory.createLayer(neuronsInLayers.get(0),inputNeuronProperties);
  boolean useBias=true;
  if (neuronProperties.hasProperty(""useBias"")) {
    useBias=(Boolean)neuronProperties.getProperty(""useBias"");
  }
  if (useBias) {
    layer.addNeuron(new BiasNeuron());
  }
  this.addLayer(layer);
  Layer prevLayer=layer;
  for (int layerIdx=1; layerIdx < neuronsInLayers.size(); layerIdx++) {
    Integer neuronsNum=neuronsInLayers.get(layerIdx);
    layer=LayerFactory.createLayer(neuronsNum,neuronProperties);
    if (useBias && (layerIdx < (neuronsInLayers.size() - 1))) {
      layer.addNeuron(new BiasNeuron());
    }
    this.addLayer(layer);
    if (prevLayer != null) {
      ConnectionFactory.fullConnect(prevLayer,layer);
    }
    prevLayer=layer;
  }
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new MomentumBackpropagation());
  this.randomizeWeights(new RangeRandomizer(-0.7,0.7));
}
"
1170,"createStudentNFR(int,List<Integer>,int,double[][],double[][])",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\NeuroFuzzyPerceptron.java,neuroph,70,2193,1971,5,0.0465,0.0325,0.529411765,39,12,"private void createStudentNFR(int inputNum,List<Integer> inputSets,int outNum,double[][] pointsSets,double[][] timeSets){
  this.setNetworkType(NeuralNetworkType.NEURO_FUZZY_REASONER);
  NeuronProperties neuronProperties=new NeuronProperties();
  Layer inLayer=LayerFactory.createLayer(inputNum,neuronProperties);
  this.addLayer(inLayer);
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.TRAPEZOID);
  Iterator<Integer> e=inputSets.iterator();
  int fuzzySetsNum=0;
  while (e.hasNext()) {
    Integer i=e.next();
    fuzzySetsNum=fuzzySetsNum + i.intValue();
  }
  Layer setLayer=LayerFactory.createLayer(fuzzySetsNum,neuronProperties);
  this.addLayer(setLayer);
  Iterator<Integer> en;
  int c=0;
  for (  Neuron cell : setLayer.getNeurons()) {
    Trapezoid tf=(Trapezoid)cell.getTransferFunction();
    if (c <= 3) {
      tf.setLeftLow(pointsSets[c][0]);
      tf.setLeftHigh(pointsSets[c][1]);
      tf.setRightLow(pointsSets[c][3]);
      tf.setRightHigh(pointsSets[c][2]);
    }
 else {
      tf.setLeftLow(timeSets[c - 4][0]);
      tf.setLeftHigh(timeSets[c - 4][1]);
      tf.setRightLow(timeSets[c - 4][3]);
      tf.setRightHigh(timeSets[c - 4][2]);
    }
    c++;
  }
  int s=0;
  for (int i=0; i < inputNum; i++) {
    Neuron from=inLayer.getNeuronAt(i);
    int jmax=inputSets.get(i).intValue();
    for (int j=0; j < jmax; j++) {
      Neuron to=setLayer.getNeuronAt(s);
      ConnectionFactory.createConnection(from,to,1);
      s++;
    }
  }
  NeuronProperties ruleNeuronProperties=new NeuronProperties(Neuron.class,WeightedSum.class,Linear.class);
  en=inputSets.iterator();
  int fuzzyAntNum=1;
  while (en.hasNext()) {
    Integer i=en.next();
    fuzzyAntNum=fuzzyAntNum * i.intValue();
  }
  Layer ruleLayer=LayerFactory.createLayer(fuzzyAntNum,ruleNeuronProperties);
  this.addLayer(ruleLayer);
  int scIdx=0;
  for (int i=0; i < inputNum; i++) {
    int setsNum=inputSets.get(i).intValue();
    for (int si=0; si < setsNum; si++) {
      if (i == 0) {
        Neuron from=setLayer.getNeuronAt(si);
        int connPerCell=fuzzyAntNum / setsNum;
        scIdx=si;
        for (int k=0; k < connPerCell; k++) {
          Neuron to=ruleLayer.getNeuronAt(si * connPerCell + k);
          ConnectionFactory.createConnection(from,to,1);
        }
      }
 else {
        scIdx++;
        Neuron from=setLayer.getNeuronAt(scIdx);
        int connPerCell=fuzzyAntNum / setsNum;
        for (int k=0; k < connPerCell; k++) {
          int toIdx=si + k * setsNum;
          Neuron to=ruleLayer.getNeuronAt(toIdx);
          ConnectionFactory.createConnection(from,to,1);
        }
      }
    }
  }
  neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.STEP);
  Layer outLayer=LayerFactory.createLayer(outNum,neuronProperties);
  this.addLayer(outLayer);
  ConnectionFactory.fullConnect(ruleLayer,outLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new LMS());
}
"
1171,"createNetwork(int,Vector<Integer>,int)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\NeuroFuzzyPerceptron.java,neuroph,66,1968,1791,11,0.0437,0.0259,0.615384615,36,11,"/** 
 * Creates custom NFR architecture
 * @param inputNumnumber of getInputsIterator
 * @param inputSetsinput fuzzy sets
 * @param outNumnumber of outputs
 */
private void createNetwork(int inputNum,Vector<Integer> inputSets,int outNum){
  this.setNetworkType(NeuralNetworkType.NEURO_FUZZY_REASONER);
  NeuronProperties neuronProperties=new NeuronProperties();
  Layer inLayer=LayerFactory.createLayer(inputNum,neuronProperties);
  this.addLayer(inLayer);
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.TRAPEZOID);
  Enumeration<Integer> e=inputSets.elements();
  int fuzzySetsNum=0;
  while (e.hasMoreElements()) {
    Integer i=e.nextElement();
    fuzzySetsNum=fuzzySetsNum + i.intValue();
  }
  Layer setLayer=LayerFactory.createLayer(fuzzySetsNum,neuronProperties);
  this.addLayer(setLayer);
  Enumeration<Integer> en;
  int c=0;
  for (  Neuron cell : setLayer.getNeurons()) {
    Trapezoid tf=(Trapezoid)cell.getTransferFunction();
  }
  int s=0;
  for (int i=0; i < inputNum; i++) {
    Neuron from=inLayer.getNeuronAt(i);
    int jmax=inputSets.elementAt(i).intValue();
    for (int j=0; j < jmax; j++) {
      Neuron to=setLayer.getNeuronAt(s);
      ConnectionFactory.createConnection(from,to,1);
      s++;
    }
  }
  neuronProperties.setProperty(""inputFunction"",Min.class);
  neuronProperties.setProperty(""transferFunction"",Linear.class);
  en=inputSets.elements();
  int fuzzyAntNum=1;
  while (en.hasMoreElements()) {
    Integer i=en.nextElement();
    fuzzyAntNum=fuzzyAntNum * i.intValue();
  }
  Layer ruleLayer=LayerFactory.createLayer(fuzzyAntNum,neuronProperties);
  this.addLayer(ruleLayer);
  int scIdx=0;
  for (int i=0; i < inputNum; i++) {
    int setsNum=inputSets.elementAt(i).intValue();
    for (int si=0; si < setsNum; si++) {
      if (i == 0) {
        Neuron from=setLayer.getNeuronAt(si);
        int connPerCell=fuzzyAntNum / setsNum;
        scIdx=si;
        for (int k=0; k < connPerCell; k++) {
          Neuron to=ruleLayer.getNeuronAt(si * connPerCell + k);
          ConnectionFactory.createConnection(from,to,1);
        }
      }
 else {
        scIdx++;
        Neuron from=setLayer.getNeuronAt(scIdx);
        int connPerCell=fuzzyAntNum / setsNum;
        for (int k=0; k < connPerCell; k++) {
          int toIdx=si + k * setsNum;
          Neuron to=ruleLayer.getNeuronAt(toIdx);
          ConnectionFactory.createConnection(from,to,1);
        }
      }
    }
  }
  neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.STEP);
  Layer outLayer=LayerFactory.createLayer(outNum,neuronProperties);
  this.addLayer(outLayer);
  ConnectionFactory.fullConnect(ruleLayer,outLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new LMS());
}
"
1173,createNetwork(int),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\Outstar.java,neuroph,11,33,11,2,0.1901,0.1288,0.666666667,4,1,"/** 
 * Creates Outstar architecture with specified number of neurons in 
 * output layer
 * @param outputNeuronsCountnumber of neurons in output layer
 */
private void createNetwork(int outputNeuronsCount){
  this.setNetworkType(NeuralNetworkType.OUTSTAR);
  NeuronProperties neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.STEP);
  Layer inputLayer=LayerFactory.createLayer(1,neuronProperties);
  this.addLayer(inputLayer);
  neuronProperties.setProperty(""transferFunction"",TransferFunctionType.RAMP);
  Layer outputLayer=LayerFactory.createLayer(outputNeuronsCount,neuronProperties);
  this.addLayer(outputLayer);
  ConnectionFactory.fullConnect(inputLayer,outputLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new OutstarLearning());
}
"
1176,"createNetwork(int,int,TransferFunctionType)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\Perceptron.java,neuroph,12,39,12,1,0.1471,0.1144,0.7,6,1,"/** 
 * Creates perceptron architecture with specified number of neurons in input
 * and output layer, specified transfer function
 * @param inputNeuronsCountnumber of neurons in input layer
 * @param outputNeuronsCountnumber of neurons in output layer
 * @param transferFunctionTypeneuron transfer function type
 */
private void createNetwork(int inputNeuronsCount,int outputNeuronsCount,TransferFunctionType transferFunctionType){
  this.setNetworkType(NeuralNetworkType.PERCEPTRON);
  Layer inputLayer=new InputLayer(inputNeuronsCount);
  this.addLayer(inputLayer);
  NeuronProperties outputNeuronProperties=new NeuronProperties();
  outputNeuronProperties.setProperty(""neuronType"",ThresholdNeuron.class);
  outputNeuronProperties.setProperty(""thresh"",new Double(Math.abs(Math.random())));
  outputNeuronProperties.setProperty(""transferFunction"",transferFunctionType);
  outputNeuronProperties.setProperty(""transferFunction.slope"",new Double(1));
  Layer outputLayer=LayerFactory.createLayer(outputNeuronsCount,outputNeuronProperties);
  this.addLayer(outputLayer);
  ConnectionFactory.fullConnect(inputLayer,outputLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new BinaryDeltaRule());
}
"
1178,"createNetwork(int,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\RBFNetwork.java,neuroph,15,69,33,2,0.1524,0.1095,0.666666667,7,1,"/** 
 * Creates RBFNetwork architecture with specified number of neurons in input
 * layer, output layer and transfer function
 * @param inputNeuronsCountnumber of neurons in input layer
 * @param rbfNeuronsCountnumber of neurons in rbf layer
 * @param outputNeuronsCountnumber of neurons in output layer
 */
private void createNetwork(int inputNeuronsCount,int rbfNeuronsCount,int outputNeuronsCount){
  NeuronProperties rbfNeuronProperties=new NeuronProperties();
  rbfNeuronProperties.setProperty(""inputFunction"",Difference.class);
  rbfNeuronProperties.setProperty(""transferFunction"",Gaussian.class);
  this.setNetworkType(NeuralNetworkType.RBF_NETWORK);
  Layer inputLayer=LayerFactory.createLayer(inputNeuronsCount,TransferFunctionType.LINEAR);
  this.addLayer(inputLayer);
  Layer rbfLayer=LayerFactory.createLayer(rbfNeuronsCount,rbfNeuronProperties);
  this.addLayer(rbfLayer);
  Layer outputLayer=LayerFactory.createLayer(outputNeuronsCount,TransferFunctionType.LINEAR);
  this.addLayer(outputLayer);
  ConnectionFactory.fullConnect(inputLayer,rbfLayer);
  ConnectionFactory.fullConnect(rbfLayer,outputLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new RBFLearning());
}
"
1181,"createNetwork(int,int,TransferFunctionType)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\SupervisedHebbianNetwork.java,neuroph,16,68,16,2,0.1473,0.1624,0.666666667,6,1,"/** 
 * Creates an instance of Supervised Hebbian Network with specified number
 * of neurons in input layer, output layer and transfer function
 * @param inputNeuronsNumnumber of neurons in input layer
 * @param outputNeuronsNumnumber of neurons in output layer
 * @param transferFunctionTypetransfer function type
 */
private void createNetwork(int inputNeuronsNum,int outputNeuronsNum,TransferFunctionType transferFunctionType){
  NeuronProperties neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""transferFunction"",transferFunctionType);
  neuronProperties.setProperty(""transferFunction.slope"",new Double(1));
  neuronProperties.setProperty(""transferFunction.yHigh"",new Double(1));
  neuronProperties.setProperty(""transferFunction.xHigh"",new Double(1));
  neuronProperties.setProperty(""transferFunction.yLow"",new Double(-1));
  neuronProperties.setProperty(""transferFunction.xLow"",new Double(-1));
  this.setNetworkType(NeuralNetworkType.SUPERVISED_HEBBIAN_NET);
  Layer inputLayer=LayerFactory.createLayer(inputNeuronsNum,neuronProperties);
  this.addLayer(inputLayer);
  Layer outputLayer=LayerFactory.createLayer(outputNeuronsNum,neuronProperties);
  this.addLayer(outputLayer);
  ConnectionFactory.fullConnect(inputLayer,outputLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new SupervisedHebbianLearning());
}
"
1184,"createNetwork(int,int,TransferFunctionType)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\UnsupervisedHebbianNetwork.java,neuroph,11,33,11,2,0.1748,0.1142,0.666666667,6,1,"/** 
 * Creates an instance of Unsuervised Hebian net with specified number
 * of neurons in input layer and output layer, and transfer function
 * @param inputNeuronsNumnumber of neurons in input layer
 * @param outputNeuronsNumnumber of neurons in output layer
 * @param transferFunctionTypetransfer function type
 */
private void createNetwork(int inputNeuronsNum,int outputNeuronsNum,TransferFunctionType transferFunctionType){
  NeuronProperties neuronProperties=new NeuronProperties();
  neuronProperties.setProperty(""transferFunction"",transferFunctionType);
  neuronProperties.setProperty(""transferFunction.slope"",new Double(1));
  this.setNetworkType(NeuralNetworkType.UNSUPERVISED_HEBBIAN_NET);
  Layer inputLayer=LayerFactory.createLayer(inputNeuronsNum,neuronProperties);
  this.addLayer(inputLayer);
  Layer outputLayer=LayerFactory.createLayer(outputNeuronsNum,neuronProperties);
  this.addLayer(outputLayer);
  ConnectionFactory.fullConnect(inputLayer,outputLayer);
  NeuralNetworkFactory.setDefaultIO(this);
  this.setLearningRule(new UnsupervisedHebbianLearning());
}
"
1187,findCropTopY(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\CharExtractor.java,neuroph,7,16,11,4,0.2449,0.085,0,3,4,"/** 
 * This method scans image pixels until it finds the first black pixel (TODO: use foreground color which is black by default).
 * When it finds black pixel, it sets cropTopY and returns true. if it reaches end of image and does not find black pixels, 
 * it sets endOfImage flag and returns false.
 * @return - returns true when black pixel is found and cropTopY value is changed, and false if cropTopY value is not changed
 */
private boolean findCropTopY(){
  for (int y=cropBottomY; y < imageWithChars.getHeight(); y++) {
    for (int x=cropLeftX; x < imageWithChars.getWidth(); x++) {
      if (imageWithChars.getRGB(x,y) == -16777216) {
        this.cropTopY=y;
        return true;
      }
    }
  }
  endOfImage=true;
  return false;
}
"
1188,findCropBottomY(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\CharExtractor.java,neuroph,12,46,26,4,0.2083,0.1313,0,3,6,"/** 
 * This method scans image pixels until it finds first row with white pixels. (TODO: background color which is white by default).
 * When it finds line whith all white pixels, it sets cropBottomY and returns true
 * @return - returns true when cropBottomY value is set, false otherwise
 */
private boolean findCropBottomY(){
  for (int y=cropTopY + 1; y < imageWithChars.getHeight(); y++) {
    int whitePixCounter=0;
    for (int x=cropLeftX; x < imageWithChars.getWidth(); x++) {
      if (imageWithChars.getRGB(x,y) == -1) {
        whitePixCounter++;
      }
    }
    if (whitePixCounter == imageWithChars.getWidth()) {
      cropBottomY=y;
      return true;
    }
    if (y == imageWithChars.getHeight() - 1) {
      cropBottomY=y;
      endOfImage=true;
      return true;
    }
  }
  return false;
}
"
1189,findCropLeftX(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\CharExtractor.java,neuroph,11,45,35,5,0.1616,0.1333,0,3,5,"/** 
 * This method scans image pixels to the right  until it finds first black pixel, or reach end of row.
 * When black pixel is found it sets cropLeftX and returns true. It should set cropLeftX to the next letter in a row.
 * @return - return true when true when black pixel is found and cropLeftX is changed, false otherwise
 */
private boolean findCropLeftX(){
  int whitePixCounter=0;
  for (int x=cropRightX; x < imageWithChars.getWidth(); x++) {
    for (int y=cropTopY; y <= cropBottomY; y++) {
      if (imageWithChars.getRGB(x,y) == -16777216) {
        cropLeftX=x;
        return true;
      }
    }
    whitePixCounter++;
    if (whitePixCounter == 3) {
      whitePixCounter=0;
    }
  }
  endOfRow=true;
  return false;
}
"
1190,findCropRightX(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\CharExtractor.java,neuroph,12,50,34,4,0.1917,0.0933,0,4,6,"/** 
 * This method scans image pixels to the right until it finds next row where all pixel are white, y1 and y2.
 * TODO: resiti broblem tolerancije n aboju bacgrounda kada ima prelaz...
 * @return - return true  when x2 value is changed and false when x2 value is not changed
 */
private boolean findCropRightX(){
  for (int x=cropLeftX + 1; x < imageWithChars.getWidth(); x++) {
    int whitePixCounter=0;
    for (int y=cropTopY; y <= cropBottomY; y++) {
      if (imageWithChars.getRGB(x,y) == -1) {
        whitePixCounter++;
      }
    }
    int heightPixels=cropBottomY - cropTopY;
    if (whitePixCounter == heightPixels + 1) {
      cropRightX=x;
      return true;
    }
    if (x == imageWithChars.getWidth() - 1) {
      cropRightX=x;
      endOfRow=true;
      return true;
    }
  }
  return false;
}
"
1191,"extractCharImagesToLearn(BufferedImage,List<String>,Dimension)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\CharExtractor.java,neuroph,41,776,732,17,0.0637,0.026,0.4,11,7,"/** 
 * Creates HashMap with characters as keys and BufferedImages as values
 * @param Dimensions to which output char images has to be resized to
 * @param list of letters which are names of images
 * @return HashMap with characters as keys and char images as values
 * This method returns HashMap with characters as keys and char images as values
 */
public HashMap<String,BufferedImage> extractCharImagesToLearn(BufferedImage imageWithText,List<String> chars,Dimension dim){
  this.imageWithChars=imageWithText;
  HashMap<String,BufferedImage> charImages=new HashMap<String,BufferedImage>();
  int i=0;
  while (endOfImage == false) {
    endOfRow=false;
    boolean foundTop=findCropTopY();
    boolean foundBottom=false;
    if (foundTop == true) {
      foundBottom=findCropBottomY();
      if (foundBottom == true) {
        while (endOfRow == false) {
          boolean foundLeft=false;
          boolean foundRight=false;
          foundLeft=findCropLeftX();
          if (foundLeft == true) {
            foundRight=findCropRightX();
            if (foundRight == true) {
              BufferedImage charImage=ImageUtilities.cropImage(imageWithText,cropLeftX,cropTopY,cropRightX,cropBottomY);
              charImage=ImageUtilities.trimImage(charImage);
              charImage=ImageUtilities.resizeImage(charImage,dim.getWidth(),dim.getHeight());
              charImages.put(chars.get(i),charImage);
              i++;
            }
          }
        }
        cropLeftX=0;
        cropRightX=0;
      }
    }
  }
  cropTopY=0;
  cropBottomY=0;
  endOfImage=false;
  return charImages;
}
"
1192,extractCharImagesToRecognize(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\CharExtractor.java,neuroph,27,315,279,7,0.0903,0.0501,0.5,7,7,"/** 
 * Extracts and returns char images to recognize as list of images
 * @return 
 */
public List<BufferedImage> extractCharImagesToRecognize(){
  List<BufferedImage> trimedImages=new ArrayList<BufferedImage>();
  int i=0;
  while (endOfImage == false) {
    endOfRow=false;
    boolean foundTop=findCropTopY();
    boolean foundBottom=false;
    if (foundTop == true) {
      foundBottom=findCropBottomY();
      if (foundBottom == true) {
        while (endOfRow == false) {
          boolean foundLeft=false;
          boolean foundRight=false;
          foundLeft=findCropLeftX();
          if (foundLeft == true) {
            foundRight=findCropRightX();
            if (foundRight == true) {
              BufferedImage image=ImageUtilities.trimImage(ImageUtilities.cropImage(imageWithChars,cropLeftX,cropTopY,cropRightX,cropBottomY));
              trimedImages.add(image);
              i++;
            }
          }
        }
        cropLeftX=0;
        cropRightX=0;
      }
    }
  }
  cropTopY=0;
  cropBottomY=0;
  endOfImage=false;
  return trimedImages;
}
"
1194,"createTrainingSet(String,BufferedImage,String,Dimension,List<String>)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OcrHelper.java,neuroph,40,752,724,24,0.0513,0.0186,0.75,15,3,"/** 
 * Create training set 
 * @param imageWithChars
 * @param chars
 * @param scaleToDim
 * @param trainingSetName 
 */
public static DataSet createTrainingSet(String trainingSetName,BufferedImage imageWithChars,String chars,Dimension scaleToDim,List<String> imageLabels){
  List<String> charList=Arrays.asList(chars.split("" ""));
  CharExtractor charExtractor=new CharExtractor(imageWithChars);
  HashMap<String,BufferedImage> charImageMap=charExtractor.extractCharImagesToLearn(imageWithChars,charList,scaleToDim);
  for (  String imgName : charImageMap.keySet()) {
    StringTokenizer st=new StringTokenizer(imgName,""._"");
    String imgLabel=st.nextToken();
    if (!imageLabels.contains(imgLabel)) {
      imageLabels.add(imgLabel);
    }
  }
  Collections.sort(imageLabels);
  Map<String,FractionRgbData> imageRgbData=ImageUtilities.getFractionRgbDataForImages(charImageMap);
  BufferedImage allWhite=new BufferedImage(scaleToDim.getWidth(),scaleToDim.getHeight(),BufferedImage.TYPE_INT_RGB);
  Graphics g=allWhite.getGraphics();
  g.setColor(Color.WHITE);
  g.fillRect(0,0,allWhite.getWidth(),allWhite.getHeight());
  imageRgbData.put(""allWhite"",new FractionRgbData(allWhite));
  DataSet dataSet=ImageRecognitionHelper.createBlackAndWhiteTrainingSet(imageLabels,imageRgbData);
  dataSet.setLabel(trainingSetName);
  return dataSet;
}
"
1195,"recognizeText(NeuralNetwork,BufferedImage,Dimension)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OcrHelper.java,neuroph,6,12,9,3,0.25,0.056,1,7,2,"/** 
 * Recognize characters in given text images and returns character list
 * @param neuralNet
 * @param image
 * @param charDimension
 * @return 
 */
public static List<Character> recognizeText(NeuralNetwork neuralNet,BufferedImage image,Dimension charDimension){
  CharExtractor charExtractor=new CharExtractor(image);
  List<BufferedImage> charImages=charExtractor.extractCharImagesToRecognize();
  List<Character> characters=recognize(neuralNet,charImages,charDimension);
  return characters;
}
"
1202,sortHashMapByValues(HashMap),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OcrPlugin.java,neuroph,22,194,157,3,0.1224,0.0709,0,11,4,"/** 
 * This private method sorts the result of the recogntion, in order to
 * see which letter has the highest probability
 * @param passedMap the HashMap that holds the resault of the recognition process
 * @return LinkedHashMap that represents the combination of letters with the
 * probability of the correct recognition
 */
private LinkedHashMap sortHashMapByValues(HashMap passedMap){
  List mapKeys=new ArrayList(passedMap.keySet());
  List mapValues=new ArrayList(passedMap.values());
  Collections.sort(mapValues);
  Collections.sort(mapKeys);
  Collections.reverse(mapValues);
  LinkedHashMap sortedMap=new LinkedHashMap();
  Iterator valueIt=mapValues.iterator();
  while (valueIt.hasNext()) {
    Object val=valueIt.next();
    Iterator keyIt=mapKeys.iterator();
    while (keyIt.hasNext()) {
      Object key=keyIt.next();
      String comp1=passedMap.get(key).toString();
      String comp2=val.toString();
      if (comp1.equals(comp2)) {
        passedMap.remove(key);
        mapKeys.remove(key);
        Character charKey=Character.valueOf(key.toString().charAt(0));
        sortedMap.put(charKey,(Double)val);
        break;
      }
    }
  }
  return sortedMap;
}
"
1205,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OcrSample.java,neuroph,7,17,13,3,0.2381,0.0583,0.75,5,1,"public static void main(String[] args){
  NeuralNetwork nnet=NeuralNetwork.load(""C:\\Users\\zoran\\Desktop\\nn.nnet"");
  OcrPlugin ocrPlugin=(OcrPlugin)nnet.getPlugin(OcrPlugin.class);
  Image charImage=ImageFactory.getImage(""C:\\Users\\zoran\\Desktop\\Letters\\A.png"");
  Character ch=ocrPlugin.recognizeCharacter(charImage);
  System.out.println(ch);
}
"
1210,recognize(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OCRTextRecognition.java,neuroph,11,46,37,4,0.1717,0.0583,1,4,3,"/** 
 * recognize the text on the image (document)
 */
public void recognize(){
  int imageHeight=image.getHeight();
  int imageWidth=image.getWidth();
  visited=new boolean[imageHeight][imageWidth];
  text="""";
  for (int i=0; i < textInformation.numberOfRows(); i++) {
    String rowText=recognizeRow(i);
    if (!rowText.isEmpty()) {
      text+=rowText + ""\n"";
    }
  }
  visited=null;
}
"
1211,recognizeRow(int),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OCRTextRecognition.java,neuroph,12,40,14,2,0.25,0.171,0.5,7,3,"private String recognizeRow(int row){
  String rowText="""";
  List<WordPosition> words=textInformation.getWordsAtRow(row);
  for (int i=0; i < words.size(); i++) {
    int rowPixel=textInformation.getRowAt(row);
    WordPosition word=words.get(i);
    rowText+=recognizeWord(word,rowPixel);
    if ((i + 1) == words.size()) {
      rowText+=addSpaces(word,null);
    }
 else {
      WordPosition next=words.get(i + 1);
      rowText+=addSpaces(word,next);
    }
  }
  return rowText;
}
"
1212,"recognizeWord(WordPosition,int)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OCRTextRecognition.java,neuroph,32,443,390,9,0.0775,0.0331,0.4,18,8,"private String recognizeWord(WordPosition word,int rowPixel){
  String wordText="""";
  int tmpWidth=3 * letterInformation.getCropWidth();
  int tmpHeight=3 * letterInformation.getCropHeight();
  int trashsize=letterInformation.getTrashSize();
  OCRExtractLetter extractionLetter=new OCRExtractLetter(tmpWidth,tmpHeight,trashsize);
  int letterSize=letterInformation.getLetterSize();
  int start=word.getStartPixel();
  int end=word.getEndPixel();
  Color white=Color.WHITE;
  Color color;
  for (int j=start; j < end; j++) {
    for (int k=-(letterSize / 4); k < (letterSize / 4); k++) {
      int i=rowPixel + k;
      if (i < 0 || i > image.getHeight()) {
        continue;
      }
      color=new Color(image.getRGB(j,i));
      if (color.equals(white)) {
        visited[i][j]=true;
      }
 else       if (visited[i][j] == false) {
        BufferedImage letter=extractionLetter.extraxtLetter(image,visited,i,j);
        if (letter != null) {
          OCRCropLetter crop=new OCRCropLetter(letter,letterInformation.getCropWidth(),letterInformation.getCropHeight());
          BufferedImage croped=crop.processImage();
          wordText+=recognizeLetter(croped);
        }
      }
    }
  }
  return wordText;
}
"
1214,"addSpaces(WordPosition,WordPosition)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OCRTextRecognition.java,neuroph,9,30,24,4,0.1905,0.1081,0.666666667,6,3,"private String addSpaces(WordPosition first,WordPosition second){
  if (second == null) {
    return """";
  }
  String space="""";
  int gap=second.getStartPixel() - first.getEndPixel();
  int num=gap / letterInformation.getSpaceGap();
  for (int i=0; i < num; i++) {
    space+="" "";
  }
  return space;
}
"
1216,saveText(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OCRTextRecognition.java,neuroph,13,65,52,4,0.1635,0.0962,0,6,4,"/** 
 * save the recognized text to the file specified earlier in location folder
 */
public void saveText(){
  try {
    File file=new File(recognizedTextPath);
    if (!file.exists()) {
      file.createNewFile();
    }
    String[] lines=text.split(""\n"");
    FileWriter fw=new FileWriter(file.getAbsoluteFile());
    BufferedWriter bw=new BufferedWriter(fw);
    for (    String line : lines) {
      bw.write(line);
      bw.newLine();
    }
    bw.close();
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
"
1226,createCharacterLabels(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OCRTraining.java,neuroph,7,14,7,3,0.3929,0.1583,0,2,3,"private void createCharacterLabels(){
  characterLabels=new ArrayList<String>();
  for (int i=0; i < trainingText.length(); i++) {
    String c=trainingText.charAt(i) + """";
    if (!characterLabels.contains(c)) {
      characterLabels.add(trainingText.charAt(i) + """");
    }
  }
}
"
1227,prepateText(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OCRTraining.java,neuroph,8,19,10,3,0.3,0.1265,0,3,4,"private void prepateText(){
  String tmp="""";
  for (int i=0; i < trainingText.length(); i++) {
    char c=trainingText.charAt(i);
    if ((!Character.isSpaceChar(c)) && (!Character.isWhitespace(c))) {
      tmp+=c;
    }
  }
  trainingText=tmp;
}
"
1228,createImagesWithLetters(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OCRTraining.java,neuroph,39,670,599,9,0.0611,0.0267,0.454545455,23,9,"private void createImagesWithLetters(){
  int cropWidth=letterInformation.getCropWidth();
  int cropHeight=letterInformation.getCropHeight();
  int tmpWidth=3 * cropWidth;
  int tmpHeight=3 * cropHeight;
  int trashSize=letterInformation.getTrashSize();
  OCRExtractLetter extractionLetter=new OCRExtractLetter(tmpWidth,tmpHeight,trashSize);
  int letterSize=letterInformation.getLetterSize();
  int imageHeight=image.getHeight();
  int imageWidth=image.getWidth();
  boolean[][] visited=new boolean[imageHeight][imageWidth];
  Color white=Color.WHITE;
  Color color;
  int seqNum=0;
  for (int line=0; line < textInformation.numberOfRows(); line++) {
    for (int j=0; j < imageWidth; j++) {
      for (int k=-(letterSize / 4); k < (letterSize / 4); k++) {
        int rowPixel=textInformation.getRowAt(line);
        int i=rowPixel + k;
        if (i < 0 || i >= imageHeight) {
          continue;
        }
        color=new Color(image.getRGB(j,i));
        if (color.equals(white)) {
          visited[i][j]=true;
        }
 else         if (visited[i][j] == false) {
          BufferedImage letter=extractionLetter.extraxtLetter(image,visited,i,j);
          if (letter != null) {
            OCRCropLetter crop=new OCRCropLetter(letter,cropWidth,cropHeight);
            BufferedImage croped=crop.processImage();
            String character=trainingText.charAt(seqNum) + """";
            String name=character + ""_"" + seqNum;
            OCRUtilities.saveToFile(croped,folderPath,name,imageExtension);
            seqNum++;
          }
        }
      }
    }
  }
}
"
1229,blackAndWhiteCleaning(Image),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OcrUtils.java,neuroph,7,11,1,3,0.5238,0.2833,0.25,3,4,"/** 
 * This method cleans input image by replacing
 * all non black pixels with white pixels
 * @param image - input image that will be cleaned
 * @return - cleaned input image as BufferedImage
 */
public static Image blackAndWhiteCleaning(Image image){
  for (int j=0; j < image.getHeight(); j++) {
    for (int i=0; i < image.getWidth(); i++) {
      if (image.getPixel(i,j) != -16777216) {
        image.setPixel(i,j,-1);
      }
    }
  }
  return image;
}
"
1230,blackAndGrayCleaning(Image),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OcrUtils.java,neuroph,8,13,0,3,0.5833,0.3457,0.25,3,4,"/** 
 * This method cleans input image by replacing all pixels with RGB values
 * from -4473925 (gray) to -1 (white) with white pixels and
 * from -4473925 (gray) to -16777216 (black) with black pixels
 * @param image - input image that will be cleaned
 * @return - cleaned input image as BufferedImage
 */
public static Image blackAndGrayCleaning(Image image){
  for (int j=0; j < image.getHeight(); j++) {
    for (int i=0; i < image.getWidth(); i++) {
      if (image.getPixel(i,j) > -4473925) {
        image.setPixel(i,j,-1);
      }
 else {
        image.setPixel(i,j,-16777216);
      }
    }
  }
  return image;
}
"
1231,blackAndLightGrayCleaning(Image),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OcrUtils.java,neuroph,8,13,0,3,0.5833,0.3457,0.25,3,4,"/** 
 * This method cleans input image by replacing all pixels with RGB values
 * from -3092272 (light gray) to -1 (white) with white pixels and
 * from -3092272 (light gray) to -16777216 (black) with black pixels
 * @param image - input image that will be cleaned
 * @return - cleaned input image as BufferedImage
 */
public static Image blackAndLightGrayCleaning(Image image){
  for (int j=0; j < image.getHeight(); j++) {
    for (int i=0; i < image.getWidth(); i++) {
      if (image.getPixel(i,j) > -4473925) {
        image.setPixel(i,j,-1);
      }
 else {
        image.setPixel(i,j,-16777216);
      }
    }
  }
  return image;
}
"
1232,"colorCleaning(Image,int)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OcrUtils.java,neuroph,8,13,0,3,0.4688,0.3117,0.25,4,4,"/** 
 * This method cleans input image by replacing all pixels with RGB values
 * from RGBcolor input (the input color) to -1 (white) with white pixels and
 * from RGBcolor input (the input color) to -16777216 (black) with black pixels
 * @param image - input image that will be cleaned
 * @param RGBcolor - input RGB value of wanted color as reference for celaning
 * @return - cleaned input image as BufferedImage
 */
public static Image colorCleaning(Image image,int RGBcolor){
  for (int j=0; j < image.getHeight(); j++) {
    for (int i=0; i < image.getWidth(); i++) {
      if (image.getPixel(i,j) == RGBcolor) {
        image.setPixel(i,j,-16777216);
      }
 else {
        image.setPixel(i,j,-1);
      }
    }
  }
  return image;
}
"
1235,trimLockup(Image),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OcrUtils.java,neuroph,6,10,5,3,0.4444,0.1786,0.333333333,3,4,"/** 
 * This method reads the image pixels until it reads the first black pixel
 * by height and then returns that value
 * @param Img - input image that will be read
 * @return - returns the value of height when conditions are true
 */
private static int trimLockup(Image img){
  for (int j=0; j < img.getHeight(); j++) {
    for (int i=0; i < img.getWidth(); i++) {
      if (img.getPixel(i,j) == -16777216) {
        return j;
      }
    }
  }
  return 0;
}
"
1236,"trimLockdown(Image,int)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\OcrUtils.java,neuroph,12,37,8,3,0.3167,0.2077,0.333333333,5,7,"/** 
 * This method reads the input image from the input from
 * start pixel height (y1) until it reads the first next row
 * where all pixel are white by height and return that value
 * @param Img - input image that will be read
 * @param y1 - input start height pixel of image
 * @return - returns the value of height when conditions are true
 */
private static int trimLockdown(Image img,int y1){
  for (int j=y1 + 1; j < img.getHeight(); j++) {
    int counterWhite=0;
    for (int i=0; i < img.getWidth(); i++) {
      if (img.getPixel(i,j) == -1) {
        counterWhite++;
      }
    }
    if (counterWhite == img.getWidth()) {
      if (j > (img.getHeight() / 2)) {
        return j;
      }
    }
    if (j == img.getHeight() - 1) {
      return j + 1;
    }
  }
  return 0;
}
"
1239,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\BufferedDataSetSample.java,neuroph,6,11,7,3,0.2292,0.0833,0.8,3,1,"public void run() throws FileNotFoundException {
  String inputFileName=BufferedDataSetSample.class.getResource(""data/iris_data_normalised.txt"").getFile();
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(4,16,3);
  BufferedDataSet irisDataSet=new BufferedDataSet(new File(inputFileName),4,3,"","");
  neuralNet.getLearningRule().addListener(this);
  neuralNet.learn(irisDataSet);
}
"
1242,main(String),D:\temp\case study\neuroph-2.94\org\neuroph\samples\HopfieldSample.java,neuroph,7,11,1,1,0.3571,0.246,0.4,5,2,"/** 
 * Runs this sample
 */
public static void main(String args[]){
  DataSet trainingSet=new DataSet(9);
  trainingSet.addRow(new DataSetRow(new double[]{1,0,1,1,1,1,1,0,1}));
  trainingSet.addRow(new DataSetRow(new double[]{1,1,1,0,1,0,0,1,0}));
  Hopfield myHopfield=new Hopfield(9);
  myHopfield.learn(trainingSet);
  System.out.println(""Testing network"");
  trainingSet.addRow(new DataSetRow(new double[]{1,0,0,1,0,1,1,0,1}));
  for (  DataSetRow trainingSetRow : trainingSet.getRows()) {
    myHopfield.setInput(trainingSetRow.getInput());
    myHopfield.calculate();
    myHopfield.calculate();
    double[] networkOutput=myHopfield.getOutput();
    System.out.print(""Input: "" + Arrays.toString(trainingSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
1243,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\IrisClassificationSample.java,neuroph,6,0,0,1,0.375,0.6389,0.7,4,1,"/** 
 * Runs this sample
 */
public static void main(String[] args){
  String inputFileName=""data_sets/iris_data_normalised.txt"";
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(4,16,3);
  DataSet irisDataSet=DataSet.createFromFile(inputFileName,4,3,"","");
  neuralNet.getLearningRule().addListener(new LearningListener());
  neuralNet.getLearningRule().setLearningRate(0.2);
  neuralNet.getLearningRule().setMaxError(0.01);
  neuralNet.getLearningRule().setMaxIterations(30000);
  neuralNet.learn(irisDataSet);
  neuralNet.save(""irisNet.nnet"");
  System.out.println(""Done training."");
  System.out.println(""Testing network..."");
}
"
1244,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\IrisClassificationSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"/** 
 * Prints network output for the each element from the specified training set.
 * @param neuralNet neural network
 * @param testSet test data set
 */
public static void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
1246,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\JDBCSample.java,neuroph,18,129,105,2,0.123,0.0464,0.4,12,2,"/** 
 * Runs this sample
 */
public static void main(String[] args) throws FileNotFoundException, IOException, ClassNotFoundException, SQLException {
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(2,3,1);
  Class.forName(""sun.jdbc.odbc.JdbcOdbcDriver"");
  String dbName=""neuroph"";
  String dbUser=""root"";
  String dbPass="""";
  Connection connection=DriverManager.getConnection(""jdbc:mysql://localhost:3306/"" + dbName,dbUser,dbPass);
  String inputSql=""SELECT * FROM input_data"";
  JDBCInputAdapter in=new JDBCInputAdapter(connection,inputSql);
  String outputTable=""output_data"";
  JDBCOutputAdapter out=new JDBCOutputAdapter(connection,outputTable);
  double[] input;
  while ((input=in.readInput()) != null) {
    neuralNet.setInput(input);
    neuralNet.calculate();
    double[] output=neuralNet.getOutput();
    out.writeOutput(output);
  }
  in.close();
  out.close();
  connection.close();
}
"
1247,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\NormalizationSample.java,neuroph,11,30,5,2,0.2149,0.1697,0.5,4,2,"/** 
 * Runs this sample
 */
public static void main(String[] args){
  DataSet dataSet=new DataSet(2,1);
  dataSet.addRow(new DataSetRow(new double[]{10,12},new double[]{0}));
  dataSet.addRow(new DataSetRow(new double[]{23,19},new double[]{0}));
  dataSet.addRow(new DataSetRow(new double[]{47,76},new double[]{0}));
  dataSet.addRow(new DataSetRow(new double[]{98,123},new double[]{1}));
  Normalizer norm=new MaxMinNormalizer();
  norm.normalize(dataSet);
  for (  DataSetRow dataSetRow : dataSet.getRows()) {
    System.out.print(""Input: "" + Arrays.toString(dataSetRow.getInput()));
    System.out.print(""Output: "" + Arrays.toString(dataSetRow.getDesiredOutput()));
  }
}
"
1248,main(String),D:\temp\case study\neuroph-2.94\org\neuroph\samples\PerceptronSample.java,neuroph,14,57,23,4,0.2071,0.1451,0.571428571,4,1,"/** 
 * Runs this sample
 */
public static void main(String args[]){
  DataSet trainingSet=new DataSet(2,1);
  trainingSet.addRow(new DataSetRow(new double[]{0,0},new double[]{0}));
  trainingSet.addRow(new DataSetRow(new double[]{0,1},new double[]{0}));
  trainingSet.addRow(new DataSetRow(new double[]{1,0},new double[]{0}));
  trainingSet.addRow(new DataSetRow(new double[]{1,1},new double[]{1}));
  NeuralNetwork myPerceptron=new Perceptron(2,1);
  myPerceptron.learn(trainingSet);
  System.out.println(""Testing trained perceptron"");
  testNeuralNetwork(myPerceptron,trainingSet);
  myPerceptron.save(""mySamplePerceptron.nnet"");
  NeuralNetwork loadedPerceptron=NeuralNetwork.load(""mySamplePerceptron.nnet"");
  System.out.println(""Testing loaded perceptron"");
  testNeuralNetwork(loadedPerceptron,trainingSet);
}
"
1249,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\PerceptronSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"/** 
 * Prints network output for the each element from the specified training set.
 * @param neuralNet neural network
 * @param testSet data set used for testing
 */
public static void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow trainingElement : testSet.getRows()) {
    neuralNet.setInput(trainingElement.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(trainingElement.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
1251,printWeights(NeuralNetwork<?>),D:\temp\case study\neuroph-2.94\org\neuroph\samples\RandomizationSample.java,neuroph,7,18,15,4,0.25,0.0648,1,5,4,"public static void printWeights(NeuralNetwork<?> neuralNet){
  for (  Layer layer : neuralNet.getLayers()) {
    for (    Neuron neuron : layer.getNeurons()) {
      for (      Connection connection : neuron.getInputConnections()) {
        System.out.print(connection.getWeight().value + "" "");
      }
      System.out.println();
    }
  }
}
"
1253,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\RBFClassificationSample.java,neuroph,9,29,22,5,0.25,0.1667,0.857142857,4,1,"public void run(){
  String inputFileName=""data_sets/sine.csv"";
  RBFNetwork neuralNet=new RBFNetwork(1,15,1);
  DataSet dataSet=DataSet.createFromFile(inputFileName,1,1,"","",false);
  RBFLearning learningRule=((RBFLearning)neuralNet.getLearningRule());
  learningRule.setLearningRate(0.02);
  learningRule.setMaxError(0.01);
  learningRule.addListener(this);
  neuralNet.learn(dataSet);
  System.out.println(""Done training."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
}
"
1254,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\RBFClassificationSample.java,neuroph,8,21,14,3,0.2813,0.1173,0.6,4,2,"/** 
 * Prints network output for the each element from the specified training set.
 * @param neuralNet neural network
 * @param testSet test data set
 */
public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
1257,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\XorMultiLayerPerceptronSample.java,neuroph,22,166,101,6,0.1165,0.1167,0.533333333,4,1,"/** 
 * Runs this sample
 */
public void run(){
  DataSet trainingSet=new DataSet(2,1);
  trainingSet.addRow(new DataSetRow(new double[]{0,0},new double[]{0}));
  trainingSet.addRow(new DataSetRow(new double[]{0,1},new double[]{1}));
  trainingSet.addRow(new DataSetRow(new double[]{1,0},new double[]{1}));
  trainingSet.addRow(new DataSetRow(new double[]{1,1},new double[]{0}));
  MultiLayerPerceptron myMlPerceptron=new MultiLayerPerceptron(TransferFunctionType.SIGMOID,2,3,1);
  myMlPerceptron.randomizeWeights(new WeightsRandomizer(new Random(123)));
  System.out.println(Arrays.toString(myMlPerceptron.getWeights()));
  myMlPerceptron.setLearningRule(new BackPropagation());
  myMlPerceptron.getLearningRule().setLearningRate(0.5);
  LearningRule learningRule=myMlPerceptron.getLearningRule();
  learningRule.addListener(this);
  System.out.println(""Training neural network..."");
  myMlPerceptron.learn(trainingSet);
  System.out.println(""Testing trained neural network"");
  testNeuralNetwork(myMlPerceptron,trainingSet);
  myMlPerceptron.save(""myMlPerceptron.nnet"");
  NeuralNetwork loadedMlPerceptron=NeuralNetwork.createFromFile(""myMlPerceptron.nnet"");
  System.out.println(""Testing loaded neural network"");
  testNeuralNetwork(loadedMlPerceptron,trainingSet);
}
"
1258,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\XorMultiLayerPerceptronSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"/** 
 * Prints network output for the each element from the specified training set.
 * @param neuralNet neural network
 * @param testSet test set
 */
public static void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
1261,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\XorResilientPropagationSample.java,neuroph,15,68,31,3,0.1744,0.1303,0.7,4,1,"/** 
 * Runs this sample
 */
public void run(){
  DataSet trainingSet=new DataSet(2,1);
  trainingSet.addRow(new DataSetRow(new double[]{0,0},new double[]{0}));
  trainingSet.addRow(new DataSetRow(new double[]{0,1},new double[]{1}));
  trainingSet.addRow(new DataSetRow(new double[]{1,0},new double[]{1}));
  trainingSet.addRow(new DataSetRow(new double[]{1,1},new double[]{0}));
  MultiLayerPerceptron myMlPerceptron=new MultiLayerPerceptron(TransferFunctionType.SIGMOID,2,3,1);
  myMlPerceptron.setLearningRule(new ResilientPropagation());
  LearningRule learningRule=myMlPerceptron.getLearningRule();
  learningRule.addListener(this);
  System.out.println(""Training neural network..."");
  myMlPerceptron.learn(trainingSet);
  int iterations=((SupervisedLearning)myMlPerceptron.getLearningRule()).getCurrentIteration();
  System.out.println(""Learned in "" + iterations + "" iterations"");
  System.out.println(""Testing trained neural network"");
  testNeuralNetwork(myMlPerceptron,trainingSet);
}
"
1262,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\XorResilientPropagationSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"/** 
 * Prints network output for each element from the specified training set.
 * @param neuralNet neural network
 * @param trainingSet training set
 */
public static void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
1270,"fullConnect(Layer,Layer,boolean)",D:\temp\case study\neuroph-2.94\org\neuroph\util\ConnectionFactory.java,neuroph,6,11,7,3,0.2917,0.119,0.5,8,4,"/** 
 * Creates full connectivity within layer - each neuron with all other
 * within the same layer with the specified weight and delay values for all
 * conections.
 */
public static void fullConnect(Layer layer,double weightVal,int delay){
  int neuronNum=layer.getNeuronsCount();
  for (int i=0; i < neuronNum; i++) {
    for (int j=0; j < neuronNum; j++) {
      if (j == i)       continue;
      Neuron from=layer.getNeuronAt(i);
      Neuron to=layer.getNeuronAt(j);
      createConnection(from,to,weightVal,delay);
    }
  }
}
"
1275,"forwardConnect(Layer,Layer,double)",D:\temp\case study\neuroph-2.94\org\neuroph\util\ConnectionFactory.java,neuroph,6,10,5,3,0.3056,0.1083,0.5,5,2,"/** 
 * Creates forward connection pattern between specified layers
 * @param fromLayerlayer to connect
 * @param toLayerlayer to connect to
 */
public static void forwardConnect(Layer fromLayer,Layer toLayer){
  for (int i=0; i < fromLayer.getNeuronsCount(); i++) {
    Neuron fromNeuron=fromLayer.getNeuronAt(i);
    Neuron toNeuron=toLayer.getNeuronAt(i);
    createConnection(fromNeuron,toNeuron,1);
  }
}
"
1277,DataSetStatistics(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\DataSetStatistics.java,neuroph,13,47,16,4,0.1657,0.1721,0.333333333,18,1,"public DataSetStatistics(DataSet dataSet){
  this.dataSet=dataSet;
  this.rowSize=dataSet.getInputSize() + dataSet.getOutputSize();
  this.rowCount=dataSet.getRows().size();
  this.mean=new double[this.rowSize];
  this.max=new double[this.rowSize];
  this.min=new double[this.rowSize];
  this.sum=new double[this.rowSize];
  this.var=new double[this.rowSize];
  this.stdDev=new double[this.rowSize];
  this.frequency=new double[this.rowSize];
  this.setDefaultValues();
}
"
1279,resetValues(),D:\temp\case study\neuroph-2.94\org\neuroph\util\DataSetStatistics.java,neuroph,6,9,3,3,0.2667,0.1429,0,5,2,"/** 
 * Resets statistics values to default.
 */
private void resetValues(){
  for (int i=0; i < this.rowSize; i++) {
    this.sum[i]=0;
    this.var[i]=0;
    this.frequency[i]=-0.0;
  }
}
"
1280,calculateStatistics(),D:\temp\case study\neuroph-2.94\org\neuroph\util\DataSetStatistics.java,neuroph,24,211,146,3,0.1155,0.0635,0.666666667,34,9,"/** 
 * Calculates basic statistics by columns of the dataset.
 */
public void calculateStatistics(){
  this.resetValues();
  DataSetColumnType[] columnTypes=this.dataSet.getColumnTypes();
  for (  DataSetRow dataSetRow : this.dataSet.getRows()) {
    double[] row=dataSetRow.toArray();
    for (int i=0; i < this.rowSize; i++) {
      this.max[i]=Math.max(this.max[i],row[i]);
      this.min[i]=Math.min(this.min[i],row[i]);
      this.sum[i]+=row[i];
      if (columnTypes[i] == DataSetColumnType.NOMINAL) {
        this.frequency[i]+=row[i];
      }
    }
  }
  for (int i=0; i < this.rowSize; i++) {
    this.mean[i]=this.sum[i] / (double)this.rowCount;
    if (columnTypes[i] == DataSetColumnType.NOMINAL) {
      this.frequency[i]/=(double)this.rowCount;
    }
  }
  for (  DataSetRow dataSetRow : this.dataSet.getRows()) {
    double[] row=dataSetRow.toArray();
    for (int i=0; i < this.rowSize; i++) {
      double delta=row[i] - this.mean[i];
      this.var[i]+=delta * delta;
    }
  }
  for (int i=0; i < this.rowSize; i++) {
    this.var[i]/=(double)this.rowCount;
    this.stdDev[i]=Math.sqrt(this.var[i]);
  }
}
"
1288,calculateMeanByColumns(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\DataSetStats.java,neuroph,10,30,15,3,0.2667,0.1258,0.666666667,6,4,"/** 
 * @param dataSet Neuroph dataset
 * @return arithmetic mean for each variable in data set
 */
public static double[] calculateMeanByColumns(DataSet dataSet){
  double[] mean=new double[dataSet.getInputSize()];
  for (  DataSetRow row : dataSet.getRows()) {
    double[] currentInput=row.getInput();
    for (int i=0; i < dataSet.getInputSize(); i++) {
      mean[i]+=currentInput[i];
    }
  }
  for (int i=0; i < dataSet.getInputSize(); i++) {
    mean[i]/=(double)dataSet.getRows().size();
  }
  return mean;
}
"
1289,calculateMaxByColumns(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\DataSetStats.java,neuroph,10,31,17,2,0.225,0.1133,0.666666667,7,4,"/** 
 * @param dataSet Neuroph dataset
 * @return maximum value for each variable in data set
 */
public static double[] calculateMaxByColumns(DataSet dataSet){
  int inputSize=dataSet.getInputSize();
  double[] maxColumnElements=new double[inputSize];
  for (int i=0; i < inputSize; i++) {
    maxColumnElements[i]=-Double.MAX_VALUE;
  }
  for (  DataSetRow dataSetRow : dataSet.getRows()) {
    double[] input=dataSetRow.getInput();
    for (int i=0; i < inputSize; i++) {
      maxColumnElements[i]=Math.max(maxColumnElements[i],input[i]);
    }
  }
  return maxColumnElements;
}
"
1290,calculateMinByColumns(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\DataSetStats.java,neuroph,10,31,17,2,0.225,0.1133,0.666666667,7,4,"/** 
 * @param dataSet Neuroph dataset
 * @return minimum value for each variable in data set
 */
public static double[] calculateMinByColumns(DataSet dataSet){
  int inputSize=dataSet.getInputSize();
  double[] minColumnElements=new double[inputSize];
  for (int i=0; i < inputSize; i++) {
    minColumnElements[i]=Double.MAX_VALUE;
  }
  for (  DataSetRow dataSetRow : dataSet.getRows()) {
    double[] input=dataSetRow.getInput();
    for (int i=0; i < inputSize; i++) {
      minColumnElements[i]=Math.min(minColumnElements[i],input[i]);
    }
  }
  return minColumnElements;
}
"
1293,"createLayer(int,TransferFunctionType)",D:\temp\case study\neuroph-2.94\org\neuroph\util\LayerFactory.java,neuroph,6,11,7,3,0.2917,0.1012,0.666666667,4,2,"public static Layer createLayer(List<NeuronProperties> neuronPropertiesVector){
  Layer layer=new Layer();
  for (  NeuronProperties neuronProperties : neuronPropertiesVector) {
    Neuron neuron=NeuronFactory.createNeuron(neuronProperties);
    layer.addNeuron(neuron);
  }
  return layer;
}
"
1297,"network2array(NeuralNetwork,double[])",D:\temp\case study\neuroph-2.94\org\neuroph\util\NeuralNetworkCODEC.java,neuroph,8,23,18,3,0.2143,0.0586,1,7,4,"/** 
 * Encode a network to an array.
 * @param network The network to encode.
 */
public static void network2array(NeuralNetwork network,double[] array){
  int index=0;
  List<Layer> layers=network.getLayers();
  for (  Layer layer : layers) {
    for (    Neuron neuron : layer.getNeurons()) {
      for (      Connection connection : neuron.getOutConnections()) {
        array[index++]=connection.getWeight().getValue();
      }
    }
  }
}
"
1298,"array2network(double[],NeuralNetwork)",D:\temp\case study\neuroph-2.94\org\neuroph\util\NeuralNetworkCODEC.java,neuroph,9,31,26,4,0.1905,0.048,1,7,4,"/** 
 * Decode a network from an array.
 * @param array The array used to decode.
 * @param network The network to decode into.
 */
public static void array2network(double[] array,NeuralNetwork network){
  int index=0;
  List<Layer> layers=network.getLayers();
  for (  Layer layer : layers) {
    for (    Neuron neuron : layer.getNeurons()) {
      for (      Connection connection : neuron.getOutConnections()) {
        connection.getWeight().setValue(array[index++]);
      }
    }
  }
}
"
1299,determineArraySize(NeuralNetwork),D:\temp\case study\neuroph-2.94\org\neuroph\util\NeuralNetworkCODEC.java,neuroph,8,22,16,3,0.25,0.1111,1,5,3,"/** 
 * Determine the array size for the given neural network.
 * @param network The neural network to determine for.
 * @return The size of the array necessary to hold that network.
 */
public static int determineArraySize(NeuralNetwork network){
  int result=0;
  List<Layer> layers=network.getLayers();
  for (  Layer layer : layers) {
    for (    Neuron neuron : layer.getNeurons()) {
      result+=neuron.getOutConnections().size();
    }
  }
  return result;
}
"
1302,"createPerceptron(int,int,TransferFunctionType,Class)",D:\temp\case study\neuroph-2.94\org\neuroph\util\NeuralNetworkFactory.java,neuroph,8,21,14,4,0.1806,0.0858,1,5,3,"/** 
 * Creates  and returns a new instance of Perceptron network
 * @param inputNeuronsCount number of neurons in input layer
 * @param outputNeuronsCount number of neurons in output layer
 * @param transferFunctionType type of transfer function to use
 * @param learningRule learning rule class
 * @return instance of Perceptron network
 */
public static Perceptron createPerceptron(int inputNeuronsCount,int outputNeuronsCount,TransferFunctionType transferFunctionType,Class learningRule){
  Perceptron nnet=new Perceptron(inputNeuronsCount,outputNeuronsCount,transferFunctionType);
  if (learningRule.getName().equals(PerceptronLearning.class.getName())) {
    nnet.setLearningRule(new PerceptronLearning());
  }
 else   if (learningRule.getName().equals(BinaryDeltaRule.class.getName())) {
    nnet.setLearningRule(new BinaryDeltaRule());
  }
  return nnet;
}
"
1304,"createMLPerceptron(String,TransferFunctionType,Class,boolean,boolean)",D:\temp\case study\neuroph-2.94\org\neuroph\util\NeuralNetworkFactory.java,neuroph,15,79,53,5,0.1083,0.0968,0.888888889,8,6,"/** 
 * Creates and returns a new instance of Multi Layer Perceptron
 * @param layersStr space separated number of neurons in layers
 * @param transferFunctionType transfer function type for neurons
 * @return instance of Multi Layer Perceptron
 */
public static MultiLayerPerceptron createMLPerceptron(String layersStr,TransferFunctionType transferFunctionType,Class learningRule,boolean useBias,boolean connectIO){
  ArrayList<Integer> layerSizes=VectorParser.parseInteger(layersStr);
  NeuronProperties neuronProperties=new NeuronProperties(transferFunctionType,useBias);
  MultiLayerPerceptron nnet=new MultiLayerPerceptron(layerSizes,neuronProperties);
  if (learningRule.getName().equals(BackPropagation.class.getName())) {
    nnet.setLearningRule(new BackPropagation());
  }
 else   if (learningRule.getName().equals(MomentumBackpropagation.class.getName())) {
    nnet.setLearningRule(new MomentumBackpropagation());
  }
 else   if (learningRule.getName().equals(DynamicBackPropagation.class.getName())) {
    nnet.setLearningRule(new DynamicBackPropagation());
  }
 else   if (learningRule.getName().equals(ResilientPropagation.class.getName())) {
    nnet.setLearningRule(new ResilientPropagation());
  }
  if (connectIO) {
    nnet.connectInputsToOutputs();
  }
  return nnet;
}
"
1317,createNeuron(NeuronProperties),D:\temp\case study\neuroph-2.94\org\neuroph\util\NeuronFactory.java,neuroph,34,447,333,5,0.1294,0.146,0.625,15,11,"/** 
 * Creates and returns neuron instance according to the given specification in neuronProperties.
 * @param neuronPropertiesspecification of neuron properties
 * @return returns instance of neuron with specified properties
 */
public static Neuron createNeuron(NeuronProperties neuronProperties){
  InputFunction inputFunction=null;
  Class inputFunctionClass=neuronProperties.getInputFunction();
  if (inputFunctionClass != null) {
    inputFunction=createInputFunction(inputFunctionClass);
  }
  TransferFunction transferFunction=createTransferFunction(neuronProperties.getTransferFunctionProperties());
  Neuron neuron=null;
  Class neuronClass=neuronProperties.getNeuronType();
  try {
    Class[] paramTypes={InputFunction.class,TransferFunction.class};
    Constructor con=neuronClass.getConstructor(paramTypes);
    Object[] paramList=new Object[2];
    paramList[0]=inputFunction;
    paramList[1]=transferFunction;
    neuron=(Neuron)con.newInstance(paramList);
  }
 catch (  NoSuchMethodException e) {
  }
catch (  InstantiationException e) {
    throw new NeurophException(""InstantiationException while creating Neuron!"",e);
  }
catch (  IllegalAccessException e) {
    throw new NeurophException(""IllegalAccessException while creating Neuron!"",e);
  }
catch (  InvocationTargetException e) {
    throw new NeurophException(""InvocationTargetException while creating Neuron!"",e);
  }
  if (neuron == null) {
    try {
      neuron=(Neuron)neuronClass.newInstance();
    }
 catch (    IllegalAccessException e) {
      System.err.println(""InstantiationException while creating Neuron!"");
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      System.err.println(""InstantiationException while creating Neuron!"");
      e.printStackTrace();
    }
  }
  if (neuronProperties.hasProperty(""thresh"")) {
    ((ThresholdNeuron)neuron).setThresh((Double)neuronProperties.getProperty(""thresh""));
  }
 else   if (neuronProperties.hasProperty(""bias"")) {
    ((InputOutputNeuron)neuron).setBias((Double)neuronProperties.getProperty(""bias""));
  }
  return neuron;
}
"
1318,createInputFunction(Class),D:\temp\case study\neuroph-2.94\org\neuroph\util\NeuronFactory.java,neuroph,9,27,18,4,0.2963,0.2286,1,4,3,"private static InputFunction createInputFunction(Class inputFunctionClass){
  InputFunction inputFunction=null;
  try {
    inputFunction=(InputFunction)inputFunctionClass.newInstance();
  }
 catch (  InstantiationException e) {
    throw new NeurophException(""InstantiationException while creating InputFunction!"",e);
  }
catch (  IllegalAccessException e) {
    throw new NeurophException(""IllegalAccessException while creating InputFunction!"",e);
  }
  return inputFunction;
}
"
1319,createTransferFunction(Properties),D:\temp\case study\neuroph-2.94\org\neuroph\util\NeuronFactory.java,neuroph,31,407,349,8,0.1147,0.1004,1,13,9,"/** 
 * Creates and returns instance of transfer function
 * @param tfPropertiestransfer function properties
 * @return returns transfer function
 */
private static TransferFunction createTransferFunction(Properties tfProperties){
  TransferFunction transferFunction=null;
  Class tfClass=(Class)tfProperties.getProperty(""transferFunction"");
  try {
    Class[] paramTypes=null;
    Constructor[] cons=tfClass.getConstructors();
    for (int i=0; i < cons.length; i++) {
      paramTypes=cons[i].getParameterTypes();
      if ((paramTypes.length == 1) && (paramTypes[0] == Properties.class)) {
        Class[] argTypes=new Class[1];
        argTypes[0]=Properties.class;
        Constructor ct=tfClass.getConstructor(argTypes);
        Object[] argList=new Object[1];
        argList[0]=tfProperties;
        transferFunction=(TransferFunction)ct.newInstance(argList);
        break;
      }
 else       if (paramTypes.length == 0) {
        transferFunction=(TransferFunction)tfClass.newInstance();
        break;
      }
    }
    return transferFunction;
  }
 catch (  NoSuchMethodException e) {
    System.err.println(""getConstructor() couldn't find the constructor while creating TransferFunction!"");
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    System.err.println(""InstantiationException while creating TransferFunction!"");
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    System.err.println(""No permission to invoke method while creating TransferFunction!"");
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    System.err.println(""Method threw an: "" + e.getTargetException() + "" while creating TransferFunction!"");
    e.printStackTrace();
  }
  return transferFunction;
}
"
1320,NeuronProperties(),D:\temp\case study\neuroph-2.94\org\neuroph\util\NeuronProperties.java,neuroph,6,12,9,4,0.5,0.25,1,2,1,"public NeuronProperties(TransferFunctionType transferFunctionType,boolean useBias){
  initKeys();
  this.setProperty(""inputFunction"",WeightedSum.class);
  this.setProperty(""transferFunction"",transferFunctionType.getTypeClass());
  this.setProperty(""useBias"",useBias);
  this.setProperty(""neuronType"",Neuron.class);
}
"
1347,"importFromFile(String,int,int,String)",D:\temp\case study\neuroph-2.94\org\neuroph\util\TrainingSetImport.java,neuroph,28,309,240,3,0.0966,0.1278,0.666666667,16,10,"public static DataSet importFromFile(String filePath,int inputsCount,int outputsCount,String separator) throws IOException, FileNotFoundException, NumberFormatException {
  FileReader fileReader=null;
  try {
    DataSet trainingSet=new DataSet(inputsCount,outputsCount);
    fileReader=new FileReader(new File(filePath));
    BufferedReader reader=new BufferedReader(fileReader);
    String line="""";
    while ((line=reader.readLine()) != null) {
      double[] inputs=new double[inputsCount];
      double[] outputs=new double[outputsCount];
      String[] values=line.split(separator);
      if (values[0].equals(""""))       continue;
      for (int i=0; i < inputsCount; i++)       inputs[i]=Double.parseDouble(values[i]);
      for (int i=0; i < outputsCount; i++)       outputs[i]=Double.parseDouble(values[inputsCount + i]);
      if (outputsCount > 0) {
        trainingSet.addRow(new DataSetRow(inputs,outputs));
      }
 else {
        trainingSet.addRow(new DataSetRow(inputs));
      }
    }
    return trainingSet;
  }
 catch (  FileNotFoundException ex) {
    ex.printStackTrace();
    throw ex;
  }
catch (  IOException ex) {
    if (fileReader != null) {
      fileReader.close();
    }
    ex.printStackTrace();
    throw ex;
  }
catch (  NumberFormatException ex) {
    fileReader.close();
    ex.printStackTrace();
    throw ex;
  }
}
"
1348,parseInteger(String),D:\temp\case study\neuroph-2.94\org\neuroph\util\VectorParser.java,neuroph,8,21,14,3,0.25,0.1235,0,4,2,"/** 
 * This method parses input String and returns Integer vector
 * @param strinput String
 * @return Integer vector
 */
static public ArrayList<Integer> parseInteger(String str){
  StringTokenizer tok=new StringTokenizer(str);
  ArrayList<Integer> ret=new ArrayList<Integer>();
  while (tok.hasMoreTokens()) {
    Integer d=Integer.valueOf(tok.nextToken());
    ret.add(d);
  }
  return ret;
}
"
1349,parseDoubleArray(String),D:\temp\case study\neuroph-2.94\org\neuroph\util\VectorParser.java,neuroph,7,15,9,3,0.2857,0.1267,0,4,2,"/** 
 * This method parses input String and returns double array
 * @param inputStrinput String
 * @return double array
 */
static public double[] parseDoubleArray(String inputStr){
  String[] inputsArrStr=inputStr.split("" "");
  double[] ret=new double[inputsArrStr.length];
  for (int i=0; i < inputsArrStr.length; i++) {
    ret[i]=Double.parseDouble(inputsArrStr[i]);
  }
  return ret;
}
"
1350,toDoubleArray(List<Double>),D:\temp\case study\neuroph-2.94\org\neuroph\util\VectorParser.java,neuroph,6,11,7,3,0.3889,0.1667,0,3,2,"public static double[] toDoubleArray(List<Double> list){
  double[] ret=new double[list.size()];
  for (int i=0; i < list.size(); i++) {
    ret[i]=list.get(i).doubleValue();
  }
  return ret;
}
"
1351,convertToVector(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\util\VectorParser.java,neuroph,6,11,7,3,0.3333,0.1667,0,3,2,"public static ArrayList<Double> convertToVector(double[] array){
  ArrayList<Double> vector=new ArrayList<Double>(array.length);
  for (  double val : array) {
    vector.add(val);
  }
  return vector;
}
"
1352,"convertJMLToNeurophDataset(Dataset,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\adapters\jml\JMLDataSetConverter.java,neuroph,42,747,633,4,0.0855,0.0484,0.5,19,14,"/** 
 * Converts Java-ML data set to Neuroph data set
 * @param jmlDataset Dataset Java-ML data set
 * @param numInputs int Number of inputs
 * @param numOutputs int Number of outputs
 * @return Neuroph data set
 */
public static DataSet convertJMLToNeurophDataset(Dataset jmlDataset,int numInputs,int numOutputs){
  if (numInputs <= 0) {
    throw new IllegalArgumentException(""Number of inputs  in DataSet cannot be zero or negative!"");
  }
  if (numOutputs < 0) {
    throw new IllegalArgumentException(""Number of outputs  in DataSet cannot be negative!"");
  }
  int rowSize=jmlDataset.noAttributes() + 1;
  if (numOutputs + numInputs < rowSize) {
    throw new IllegalArgumentException(""Number of outputs and inputs should be equal to number of attributes from data set!"");
  }
  DataSet neurophDataset;
  if (numOutputs == 0) {
    neurophDataset=new DataSet(rowSize);
  }
 else {
    neurophDataset=new DataSet(numInputs,numOutputs);
  }
  List<String> outputClasses=new ArrayList<String>();
  for (int i=0; i < jmlDataset.size(); i++) {
    if (!outputClasses.contains(jmlDataset.get(i).classValue().toString())) {
      outputClasses.add(jmlDataset.get(i).classValue().toString());
    }
  }
  for (int i=0; i < jmlDataset.size(); i++) {
    Iterator attributeIterator=jmlDataset.get(i).iterator();
    double[] values=new double[rowSize];
    int index=0;
    while (attributeIterator.hasNext()) {
      Double attrValue=(Double)attributeIterator.next();
      values[index]=attrValue.doubleValue();
      index++;
    }
    DataSetRow row=null;
    if (numOutputs == 0) {
      row=new DataSetRow(values);
    }
 else {
      double[] inputs=new double[numInputs];
      double[] outputs=new double[outputClasses.size()];
      int k=0;
      int j=0;
      for (int v=0; v < values.length; v++) {
        if (v < numInputs) {
          inputs[j]=values[v];
          j++;
        }
      }
      for (      String cla : outputClasses) {
        if (cla.equals(jmlDataset.get(i).classValue().toString())) {
          outputs[k]=1;
        }
 else {
          outputs[k]=0;
        }
        k++;
      }
      row=new DataSetRow(inputs,outputs);
    }
    row.setLabel(jmlDataset.get(i).classValue().toString());
    neurophDataset.addRow(row);
  }
  return neurophDataset;
}
"
1353,convertNeurophToJMLDataset(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\jml\JMLDataSetConverter.java,neuroph,19,133,95,3,0.1579,0.0768,0.333333333,10,5,"/** 
 * Converts Neuroph data set to Java-ML data set
 * @param neurophDataset Dataset Neuroph data set
 * @return Dataset Java-ML data set
 */
public static Dataset convertNeurophToJMLDataset(DataSet neurophDataset){
  Dataset jmlDataset=new DefaultDataset();
  int numInputs=neurophDataset.getInputSize();
  int numOutputs=neurophDataset.getOutputSize();
  for (  DataSetRow row : neurophDataset.getRows()) {
    if (numOutputs > 0) {
      double[] mergedIO=new double[numInputs + numOutputs];
      for (int i=0; i < numInputs; i++) {
        mergedIO[i]=row.getInput()[i];
      }
      for (int i=0; i < numOutputs; i++) {
        mergedIO[numInputs + i]=row.getDesiredOutput()[i];
      }
      Instance instance=new DenseInstance(mergedIO);
      instance.setClassValue(row.getLabel());
      jmlDataset.add(instance);
    }
 else {
      Instance instance=new DenseInstance(row.getInput());
      instance.setClassValue(row.getLabel());
      jmlDataset.add(instance);
    }
  }
  return jmlDataset;
}
"
1356,classify(Instance),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\jml\JMLNeurophClassifier.java,neuroph,8,17,6,2,0.3438,0.2024,0.4,5,3,"/** 
 * Classifies instance as one of possible classes
 * @param instnc Instance to classify
 * @return Object class as Object
 */
@Override public Object classify(Instance instnc){
  double[] item=convertInstanceToDoubleArray(instnc);
  neuralNet.setInput(item);
  neuralNet.calculate();
  Neuron maxNeuron=null;
  double maxOut=Double.NEGATIVE_INFINITY;
  for (  Neuron neuron : neuralNet.getOutputNeurons()) {
    if (neuron.getOutput() > maxOut) {
      maxNeuron=neuron;
      maxOut=neuron.getOutput();
    }
  }
  return maxNeuron.getLabel();
}
"
1358,convertInstanceToDoubleArray(Instance),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\jml\JMLNeurophClassifier.java,neuroph,10,35,25,3,0.24,0.1117,0,5,2,"/** 
 * Convert instance attribute values to double array values
 * @param instnc Instance to convert
 * @return double[]
 */
private double[] convertInstanceToDoubleArray(Instance instnc){
  Iterator attributeIterator=instnc.iterator();
  double[] item=new double[instnc.noAttributes()];
  int index=0;
  while (attributeIterator.hasNext()) {
    Double attrValue=(Double)attributeIterator.next();
    item[index]=attrValue.doubleValue();
    index++;
  }
  return item;
}
"
1359,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\jml\JMLNeurophSample.java,neuroph,18,125,97,7,0.1358,0.1072,0.5,6,2,"public static void main(String[] args){
  try {
    Dataset jmlDataset=FileHandler.loadDataset(new File(""datasets/iris.data""),4,"","");
    NormalizeMidrange nmr=new NormalizeMidrange(0,1);
    nmr.build(jmlDataset);
    nmr.filter(jmlDataset);
    System.out.println(jmlDataset);
    DataSet neurophDataset=JMLDataSetConverter.convertJMLToNeurophDataset(jmlDataset,4,3);
    Dataset jml=JMLDataSetConverter.convertNeurophToJMLDataset(neurophDataset);
    System.out.println(""Java-ML data set read from file"");
    printDataset(jmlDataset);
    System.out.println(""Neuroph data set converted from Java-ML data set"");
    printDataset(neurophDataset);
    System.out.println(""Java-ML data set reconverted from Neuroph data set"");
    printDataset(jml);
    System.out.println(""JMLNeuroph classifier test"");
    testJMLNeurophClassifier(jmlDataset);
  }
 catch (  Exception ex) {
    Logger.getLogger(JMLNeurophSample.class.getName()).log(Level.SEVERE,null,ex);
  }
}
"
1360,printDataset(Dataset),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\jml\JMLNeurophSample.java,neuroph,7,15,9,3,0.3333,0.1667,0.666666667,4,3,"/** 
 * Prints Neuroph data set
 * @param neurophDataset Dataset Neuroph data set
 */
public static void printDataset(DataSet neurophDataset){
  System.out.println(""Neuroph dataset"");
  Iterator iterator=neurophDataset.iterator();
  while (iterator.hasNext()) {
    DataSetRow row=(DataSetRow)iterator.next();
    System.out.println(""inputs"");
    System.out.println(Arrays.toString(row.getInput()));
    if (row.getDesiredOutput().length > 0) {
      System.out.println(""outputs"");
      System.out.println(Arrays.toString(row.getDesiredOutput()));
    }
  }
}
"
1362,convertJMLDatasetToMap(Dataset),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\jml\JMLNeurophSample.java,neuroph,8,19,10,2,0.3,0.1202,0,7,3,"/** 
 * Converts Java-ML data set to Map
 * @param jmlDataset Dataset Java-ML data set
 * @return Map converted from Java-ML data set
 */
private static Map<double[],String> convertJMLDatasetToMap(Dataset jmlDataset){
  int numOfAttributes=jmlDataset.noAttributes();
  Map<double[],String> itemClassMap=new HashMap<double[],String>();
  for (  Instance dataRow : jmlDataset) {
    double[] values=new double[numOfAttributes];
    int ind=0;
    for (    Double val : dataRow) {
      values[ind]=val;
      ind++;
    }
    itemClassMap.put(values,dataRow.classValue().toString());
  }
  return itemClassMap;
}
"
1363,testJMLNeurophClassifier(Dataset),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\jml\JMLNeurophSample.java,neuroph,14,72,53,5,0.1735,0.1245,0.571428571,5,1,"/** 
 * Test JMLNeurophClassifier
 * @param jmlDataset Dataset Java-ML data set
 */
private static void testJMLNeurophClassifier(Dataset jmlDataset){
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(4,16,3);
  neuralNet.getOutputNeurons().get(0).setLabel(""Setosa"");
  neuralNet.getOutputNeurons().get(1).setLabel(""Versicolor"");
  neuralNet.getOutputNeurons().get(2).setLabel(""Virginica"");
  JMLNeurophClassifier jmlnClassifier=new JMLNeurophClassifier(neuralNet);
  jmlnClassifier.buildClassifier(jmlDataset);
  double[] item={-0.27777777777777773,0.1249999999999999,-0.4322033898305085,-0.45833333333333337};
  Instance instance=new DenseInstance(item);
  System.out.println(""NeurophJMLClassifier - classify of {0.22222222222222213, 0.6249999999999999, 0.06779661016949151, 0.04166666666666667}"");
  System.out.println(jmlnClassifier.classify(instance));
  System.out.println(""NeurophJMLClassifier - classDistribution of {0.22222222222222213, 0.6249999999999999, 0.06779661016949151, 0.04166666666666667}"");
  System.out.println(jmlnClassifier.classDistribution(instance));
}
"
1364,"convertWekaToNeurophDataset(Instances,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\adapters\weka\WekaDataSetConverter.java,neuroph,35,510,425,4,0.0984,0.0562,0.4,16,13,"/** 
 * Converts Weka data set to Neuroph data set
 * @param wekaDataset Instances Weka data set
 * @param numInputs int Number of inputs
 * @param numOutputs int Number of outputs
 * @return Neuroph data set
 */
public static DataSet convertWekaToNeurophDataset(Instances wekaDataset,int numInputs,int numOutputs){
  if (numInputs <= 0) {
    throw new IllegalArgumentException(""Number of inputs  in DataSet cannot be zero or negative!"");
  }
  if (numOutputs < 0) {
    throw new IllegalArgumentException(""Number of outputs  in DataSet cannot be negative!"");
  }
  if (numOutputs + numInputs < wekaDataset.numAttributes()) {
    throw new IllegalArgumentException(""Number of outputs and inputs should be equal to number of attributes from data set!"");
  }
  DataSet neurophDataset=null;
  if (numOutputs > 0) {
    neurophDataset=new DataSet(numInputs,numOutputs);
  }
 else {
    neurophDataset=new DataSet(numInputs);
  }
  List<Double> classValues=new ArrayList<Double>();
  for (  Instance inst : wekaDataset) {
    Double classDouble=inst.classValue();
    if (!classValues.contains(classDouble)) {
      classValues.add(classDouble);
    }
  }
  Enumeration en=wekaDataset.enumerateInstances();
  while (en.hasMoreElements()) {
    Instance instance=(Instance)en.nextElement();
    double[] values=instance.toDoubleArray();
    if (numOutputs == 0) {
      neurophDataset.addRow(values);
    }
 else {
      double[] inputs=new double[numInputs];
      double[] outputs=new double[numOutputs];
      for (int k=0; k < values.length; k++) {
        if (k < numInputs) {
          inputs[k]=values[k];
        }
      }
      int k=0;
      for (      Double entry : classValues) {
        if (entry.doubleValue() == instance.classValue()) {
          outputs[k]=1;
        }
 else {
          outputs[k]=0;
        }
        k++;
      }
      DataSetRow row=new DataSetRow(inputs,outputs);
      row.setLabel(instance.stringValue(instance.classIndex()));
      neurophDataset.addRow(row);
    }
  }
  return neurophDataset;
}
"
1365,convertNeurophToWekaDataset(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\weka\WekaDataSetConverter.java,neuroph,25,221,142,2,0.13,0.0839,0.454545455,14,9,"/** 
 * Converts Neuroph data set to Weka data set
 * @param neurophDataset DataSet Neuroph data set
 * @return instances Weka data set
 */
public static Instances convertNeurophToWekaDataset(DataSet neurophDataset){
  Map<double[],String> classValues=getClassValues(neurophDataset);
  Instances instances=createEmptyWekaDataSet(neurophDataset.getInputSize(),neurophDataset.size(),classValues);
  int numInputs=neurophDataset.getInputSize();
  int numOutputs=1;
  instances.setClassIndex(numInputs);
  Iterator<DataSetRow> iterator=neurophDataset.iterator();
  while (iterator.hasNext()) {
    DataSetRow row=iterator.next();
    if (numOutputs > 0) {
      Instance instance=new DenseInstance(numInputs + numOutputs);
      for (int i=0; i < numInputs; i++) {
        instance.setValue(i,row.getInput()[i]);
      }
      instance.setDataset(instances);
      for (      Map.Entry<double[],String> entry : classValues.entrySet()) {
        if (entry.getValue().equals(row.getLabel())) {
          instance.setValue(numInputs,entry.getValue());
          double[] rowDouble=row.getDesiredOutput();
          for (int i=0; i < rowDouble.length; i++) {
            if (rowDouble[i] == 1) {
              instance.setValue(numInputs,i);
            }
            break;
          }
          break;
        }
      }
      instances.add(instance);
    }
 else {
      Instance instance=new DenseInstance(numInputs);
      for (int i=0; i < numInputs; i++) {
        instance.setValue(i,row.getInput()[i]);
      }
      instance.setDataset(instances);
      instances.add(instance);
    }
  }
  return instances;
}
"
1366,"createEmptyWekaDataSet(int,int,Map<double[],String>)",D:\temp\case study\neuroph-2.94\org\neuroph\adapters\weka\WekaDataSetConverter.java,neuroph,9,27,18,3,0.1667,0.062,0.75,12,3,"/** 
 * Creates and returns empty weka data set
 * @param numOfAttr int Number of attributes without class attribute
 * @param capacity int Capacity of sample
 * @return empty weka data set
 */
private static Instances createEmptyWekaDataSet(int numOfAttr,int capacity,Map<double[],String> classValues){
  FastVector fvClassVal=new FastVector();
  HashMap classVals=new HashMap<String,Double>();
  HashMap classValsDoubleAsKey=new HashMap<Double,String>();
  int ind=0;
  for (  Map.Entry<double[],String> values : classValues.entrySet()) {
    fvClassVal.addElement(values.getValue());
    classVals.put(values.getValue(),new Double(ind));
    classValsDoubleAsKey.put(new Double(ind),values.getValue());
    ind++;
  }
  Attribute classAttribute=new Attribute(""theClass"",fvClassVal,classValues.size());
  FastVector fvWekaAttributes=new FastVector(numOfAttr + 1);
  for (int i=0; i < numOfAttr; i++) {
    fvWekaAttributes.addElement(new Attribute(i + """",i));
  }
  fvWekaAttributes.addElement(classAttribute);
  Instances newDataSet=new Instances(""newDataSet"",fvWekaAttributes,capacity);
  return newDataSet;
}
"
1369,"createDataSetFromFile(String,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\adapters\weka\WekaDataSetConverter.java,neuroph,8,23,18,4,0.2031,0.0531,0.75,7,2,"/** 
 * Creates neuroph dataset from arff weka file.
 * @param filePath Path to the file.
 * @param numInputs Number of inputs.
 * @param numOutputs Number of outputs.
 * @return Neuroph dataset.
 */
public static DataSet createDataSetFromFile(String filePath,int numInputs,int numOutputs){
  try {
    ConverterUtils.DataSource dataSource=new ConverterUtils.DataSource(filePath);
    Instances wekaDataset=dataSource.getDataSet();
    wekaDataset.setClassIndex(numInputs);
    DataSet neurophDataset=WekaDataSetConverter.convertWekaToNeurophDataset(wekaDataset,numInputs,numOutputs);
    return neurophDataset;
  }
 catch (  Exception e) {
    return new DataSet(0);
  }
}
"
1372,classifyInstance(Instance),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\weka\WekaNeurophClassifier.java,neuroph,14,73,55,4,0.1875,0.0926,0.5,7,3,"/** 
 * Classifies instance as one of possible classes
 * @param instance Instance to classify
 * @return double classes double value
 * @throws Exception
 */
@Override public double classifyInstance(Instance instance) throws Exception {
  double[] item=convertInstanceToDoubleArray(instance);
  neuralNet.setInput(item);
  neuralNet.calculate();
  List<Neuron> outputNeurons=neuralNet.getOutputNeurons();
  Neuron maxNeuron=null;
  int maxIdx=0;
  double maxOut=Double.NEGATIVE_INFINITY;
  for (int i=0; i < outputNeurons.size(); i++) {
    if (outputNeurons.get(i).getOutput() > maxOut) {
      maxOut=outputNeurons.get(i).getOutput();
      maxIdx=i;
    }
  }
  return maxIdx;
}
"
1376,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\weka\WekaNeurophSample.java,neuroph,17,108,80,6,0.1438,0.0981,0.625,6,1,"public static void main(String[] args) throws Exception {
  DataSource dataSource=new DataSource(""datasets/iris.arff"");
  Instances wekaDataset=dataSource.getDataSet();
  wekaDataset.setClassIndex(4);
  Normalize filter=new Normalize();
  filter.setInputFormat(wekaDataset);
  wekaDataset=Filter.useFilter(wekaDataset,filter);
  DataSet neurophDataset=WekaDataSetConverter.convertWekaToNeurophDataset(wekaDataset,4,3);
  Instances testWekaDataset=WekaDataSetConverter.convertNeurophToWekaDataset(neurophDataset);
  System.out.println(""Weka data set from file"");
  printDataSet(wekaDataset);
  System.out.println(""Neuroph data set converted from Weka data set"");
  printDataSet(neurophDataset);
  System.out.println(""Weka data set reconverted from Neuroph data set"");
  printDataSet(testWekaDataset);
  System.out.println(""Testing WekaNeurophClassifier"");
  testNeurophWekaClassifier(wekaDataset);
}
"
1377,printDataSet(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\weka\WekaNeurophSample.java,neuroph,10,32,19,4,0.3,0.2222,0.5,4,2,"/** 
 * Prints Weka data set
 * @param wekaDataset Instances Weka data set
 */
private static void printDataSet(Instances wekaDataset){
  System.out.println(""Weka dataset"");
  Enumeration en=wekaDataset.enumerateInstances();
  while (en.hasMoreElements()) {
    Instance instance=(Instance)en.nextElement();
    double[] values=instance.toDoubleArray();
    System.out.println(Arrays.toString(values));
    System.out.println(instance.stringValue(instance.classIndex()));
  }
}
"
1379,testNeurophWekaClassifier(Instances),D:\temp\case study\neuroph-2.94\org\neuroph\adapters\weka\WekaNeurophSample.java,neuroph,18,129,105,5,0.125,0.0827,0.666666667,8,3,"/** 
 * Test NeurophWekaClassifier
 * @param wekaDataset Instances Weka data set
 */
private static void testNeurophWekaClassifier(Instances wekaDataset){
  try {
    MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(4,16,3);
    neuralNet.getOutputNeurons().get(0).setLabel(""Setosa"");
    neuralNet.getOutputNeurons().get(1).setLabel(""Versicolor"");
    neuralNet.getOutputNeurons().get(2).setLabel(""Virginica"");
    WekaNeurophClassifier neurophWekaClassifier=new WekaNeurophClassifier(neuralNet);
    wekaDataset.setClassIndex(4);
    neurophWekaClassifier.buildClassifier(wekaDataset);
    double[] item={0.22222222222222213,0.6249999999999999,0.06779661016949151,0.04166666666666667,0};
    Instance instance=new DenseInstance(1,item);
    System.out.println(""NeurophWekaClassifier - classifyInstance for {5.1, 3.5, 1.4, 0.2}"");
    System.out.println(""Class idx: "" + neurophWekaClassifier.classifyInstance(instance));
    System.out.println(""NeurophWekaClassifier - distributionForInstance for {5.1, 3.5, 1.4, 0.2}"");
    double dist[]=neurophWekaClassifier.distributionForInstance(instance);
    for (int i=0; i < dist.length; i++) {
      System.out.println(""Class "" + i + "": ""+ dist[i]);
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(WekaNeurophSample.class.getName()).log(Level.SEVERE,null,ex);
  }
}
"
1404,generateTrainingSettings(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\autotrain\AutoTrainer.java,neuroph,11,47,39,4,0.1364,0.0465,0.2,7,4,"private void generateTrainingSettings(){
  double pom=minLearningRate;
  for (int hiddenNeurons=minHiddenNeurons; hiddenNeurons <= maxHiddenNeurons; hiddenNeurons+=hiddenNeuronsStep) {
    for (double learningRate=minLearningRate; learningRate <= maxLearningRate; learningRate+=learningRateStep) {
      for (double maxError=maxErrorMin; maxError <= maxErrorMax; maxError+=maxErrorStep) {
        TrainingSettings ts=new TrainingSettings().setHiddenNeurons(hiddenNeurons).setLearningRate(learningRate).setMaxError(maxError).setMaxIterations(getMaxIterations());
        this.trainingSettingsList.add(ts);
      }
    }
    minLearningRate=pom;
  }
  LOGGER.log(Level.INFO,""Generated : {0} settings."",this.trainingSettingsList.size());
}
"
1406,"calculateTrainingStatistics(TrainingSettings,List<TrainingResult>)",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\autotrain\AutoTrainer.java,neuroph,7,12,3,2,0.3095,0.1667,0.4,5,1,"private TrainingResult calculateTrainingStatistics(TrainingSettings ts,List<TrainingResult> results){
  System.out.println(""working on statistic..."");
  TrainingResult result=new TrainingResult(ts);
  TrainingStatistics iterationsStat=TrainingStatistics.calculateIterations(results);
  TrainingStatistics MSEStat=TrainingStatistics.calculateMSE(results);
  result.setMSE(MSEStat);
  result.setIterationStat(iterationsStat);
  return result;
}
"
1411,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\autotrain\RunExample.java,neuroph,6,11,7,3,0.2619,0.1,0.307692308,5,2,"public static void main(String[] args){
  AutoTrainer trainer=new AutoTrainer().setMaxError(0.01,0.03,0.01).setMaxIterations(20000).setTransferFunction(TransferFunctionType.TANH).setHiddenNeurons(new Range(10,20),2).setLearningRate(new Range(0.3,0.6),0.3).repeat(3).setTrainTestSplit(70);
  DataSet dataSet=DataSet.createFromFile(FILEPATH,4,3,""\t"",true);
  trainer.train(dataSet);
  List<TrainingResult> results=trainer.getResults();
  try {
    Util.saveToCSV(trainer,results);
  }
 catch (  FileNotFoundException ex) {
    System.out.println(""Error writing csv file"");
  }
  System.out.println(""Main done!"");
}
"
1455,calculateIterations(List<TrainingResult>),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\autotrain\TrainingStatistics.java,neuroph,19,119,67,3,0.1842,0.0957,1,9,4,"/** 
 * Based on list of TrainingResults this method calculate minimum iterations, maximum iterations, mean and standard deviation of list.
 * @param list
 * @return
 */
public static TrainingStatistics calculateIterations(List<TrainingResult> list){
  int minIt=list.get(0).getIterations();
  int maxIt=list.get(0).getIterations();
  double meanIt;
  double stdIt;
  int sumIt=0;
  double[] v=new double[list.size()];
  int i=0;
  for (  TrainingResult tr : list) {
    if (tr.getIterations() < minIt) {
      minIt=tr.getIterations();
    }
    if (tr.getIterations() > maxIt) {
      maxIt=tr.getIterations();
    }
    sumIt+=tr.getIterations();
    v[i++]=tr.getIterations();
  }
  meanIt=sumIt / list.size();
  stdIt=std(meanIt,v);
  return new TrainingStatistics(minIt,maxIt,meanIt,stdIt);
}
"
1456,calculateMSE(List<TrainingResult>),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\autotrain\TrainingStatistics.java,neuroph,19,119,67,3,0.1842,0.0957,1,9,4,"/** 
 * Based on list of TrainingResults this method calculate minimum MSE, maximum MSE, mean and standard deviation of list.
 * @param list
 * @return
 */
public static TrainingStatistics calculateMSE(List<TrainingResult> list){
  double minIt=list.get(0).getTotalError();
  double maxIt=list.get(0).getTotalError();
  double meanIt;
  double stdIt;
  double pom=0;
  double[] vrednosti=new double[list.size()];
  int i=0;
  for (  TrainingResult tr : list) {
    if (tr.getTotalError() < minIt) {
      minIt=tr.getTotalError();
    }
    if (tr.getTotalError() > maxIt) {
      maxIt=tr.getTotalError();
    }
    pom+=tr.getTotalError();
    vrednosti[i++]=tr.getTotalError();
  }
  meanIt=pom / list.size();
  stdIt=std(meanIt,vrednosti);
  return new TrainingStatistics(minIt,maxIt,meanIt,stdIt);
}
"
1457,calculateStatistic(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\autotrain\TrainingStatistics.java,neuroph,16,75,30,3,0.2679,0.1517,0,7,4,"private static TrainingStatistics calculateStatistic(int[] array){
  int min=array[0];
  int max=array[0];
  double mean=0;
  double std=0;
  int sum=0;
  for (int i=0; i < array.length; i++) {
    if (array[i] < min) {
      min=array[i];
    }
    if (array[i] > max) {
      max=array[i];
    }
    sum+=array[i];
  }
  mean=sum / array.length;
  std=std(mean,array);
  return new TrainingStatistics(min,max,mean,std);
}
"
1460,"std(double,int[])",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\autotrain\TrainingStatistics.java,neuroph,6,10,5,3,0.3333,0.1024,0,4,2,"private static double std(double mean,double[] sum){
  double std=0;
  for (  double temp : sum) {
    std+=Math.pow(temp - mean,2);
  }
  return Math.sqrt(std / sum.length);
}
"
1465,createMatrix(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\AbstractTraining.java,neuroph,8,19,10,3,0.3,0.1216,0.5,3,2,"/** 
 * Method that creates confusion matrix from given dataset and neuraln
 * network
 * @return confusion matrix for this training
 */
public ConfusionMatrix createMatrix(){
  Evaluation eval=new Evaluation();
  String[] classLabels=new String[dataset.getOutputSize()];
  for (int i=0; i < dataset.getOutputSize(); i++) {
    classLabels[i]=dataset.getColumnName(dataset.getInputSize() + i);
  }
  eval.addEvaluator(new ClassifierEvaluator.MultiClass(classLabels));
  return eval.evaluateDataSet(neuralNet,dataset).getConfusionMatrix();
}
"
1466,"AbstractTraining(NeuralNetwork,DataSet,TrainingSettings)",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\AbstractTraining.java,neuroph,6,15,15,6,0.1667,0,0.8,6,1,"/** 
 * Create instance of training with new neural network
 * @param dataset
 * @param settings
 */
public AbstractTraining(DataSet dataset,TrainingSettings settings){
  this.dataset=dataset;
  this.settings=settings;
  this.stats=new TrainingStatistics();
  this.neuralNet=new MultiLayerPerceptron(TransferFunctionType.SIGMOID,dataset.getInputSize(),settings.getHiddenNeurons(),dataset.getOutputSize());
}
"
1475,testNeuralNet(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\BackpropagationTraining.java,neuroph,6,5,0,2,0.5,0.4,0.545454545,1,1,"/** 
 * Method that set up learning rule with given settings, learns dataset and
 * creates statistics from results of the test
 */
@Override public void testNeuralNet(){
  BackPropagation bp=(BackPropagation)this.setParameters();
  this.getNeuralNet().setLearningRule(bp);
  this.getNeuralNet().learn(this.getDataset());
  this.getStats().addData(new TrainingResult(bp.getCurrentIteration(),bp.getTotalNetworkError(),createMatrix()));
  this.getStats().calculateParameters();
}
"
1480,run(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\BackPropBenchmarks.java,neuroph,6,9,3,3,0.2917,0.3,0.5,2,3,"/** 
 * Executes all training`s from list with predefined number of repetitions
 * and resets neural net
 */
public void run(){
  for (  AbstractTraining training : listOfTrainings) {
    for (int i=0; i < noOfRepetitions; i++) {
      training.testNeuralNet();
      training.getNeuralNet().randomizeWeights();
    }
    System.out.println(training.getStats());
  }
}
"
1483,"startBenchmark(List<Class<? extends AbstractTraining>>,List<TrainingSettings>,DataSet,MultiLayerPerceptron)",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\BackPropBenchmarks.java,neuroph,12,45,24,4,0.2014,0.1232,1,6,7,"/** 
 * Creates all training`s using list training types, settings and execute run method
 * @param trainingTypeCollection
 * @param settingsCollection
 * @param trainingSet 
 */
public void startBenchmark(List<Class<? extends AbstractTraining>> trainingTypeCollection,List<TrainingSettings> settingsCollection,DataSet trainingSet){
  for (  TrainingSettings trainingSettings : settingsCollection) {
    for (    Class<? extends AbstractTraining> trainingType : trainingTypeCollection) {
      AbstractTraining training=null;
      if (trainingType.equals(BackpropagationTraining.class)) {
        training=new BackpropagationTraining(trainingSet,trainingSettings);
      }
 else       if (trainingType.equals(MomentumTraining.class)) {
        training=new MomentumTraining(trainingSet,trainingSettings);
      }
 else       if (trainingType.equals(QuickpropagationTraining.class)) {
        training=new QuickpropagationTraining(trainingSet,trainingSettings);
      }
 else       if (trainingType.equals(ResilientTraining.class)) {
        training=new ResilientTraining(trainingSet,trainingSettings);
      }
      this.addTraining(training);
    }
  }
  this.run();
}
"
1487,"exportToCSV(String,List<AbstractTraining>)",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\ExportUtil.java,neuroph,8,17,6,3,0.3333,0.3086,0,4,2,"/** 
 * Method for writing to csv into given file path
 * @param filePath
 * @param listOfTrainings
 * @throws IOException 
 */
public static void exportToCSV(String filePath,List<AbstractTraining> listOfTrainings) throws IOException {
  FileWriter out=new FileWriter(filePath + "".csv"");
  out.write(writeheader());
  for (  AbstractTraining training : listOfTrainings) {
    out.write(prepareLine(training));
  }
  out.flush();
  out.close();
}
"
1488,prepareLine(AbstractTraining),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\ExportUtil.java,neuroph,24,45,0,3,0.6563,0.7252,0.173913043,2,1,"/** 
 * Method for generating one line from training
 * @param training
 * @return 
 */
private static String prepareLine(AbstractTraining training){
  String line="""";
  line+=training.getNeuralNet().getLearningRule().getClass().getName() + DELIMITER;
  line+=training.getStats().getMinIterations() + DELIMITER;
  line+=training.getStats().getMaxIterations() + DELIMITER;
  line+=training.getStats().getMeanIterations() + DELIMITER;
  line+=training.getStats().getStdIterations() + DELIMITER;
  line+=training.getStats().getMinError() + DELIMITER;
  line+=training.getStats().getMaxError() + DELIMITER;
  line+=training.getStats().getMeanError() + DELIMITER;
  line+=training.getStats().getStdError() + DELIMITER;
  line+=training.getSettings().getLearningRate() + DELIMITER;
  line+=training.getSettings().getMomentum() + DELIMITER;
  line+=training.getSettings().getMaxIterations() + DELIMITER;
  line+=training.getSettings().getMaxError() + DELIMITER;
  line+=String.valueOf(training.getSettings().isBatchMode()) + DELIMITER;
  line+=training.getSettings().getHiddenNeurons() + DELIMITER;
  line+=training.getSettings().getDecreaseFactor() + DELIMITER;
  line+=training.getSettings().getIncreaseFactor() + DELIMITER;
  line+=training.getSettings().getInitialDelta() + DELIMITER;
  line+=training.getSettings().getMaxDelta() + DELIMITER;
  line+=training.getSettings().getMinDelta() + DELIMITER + ""\n"";
  return line;
}
"
1489,writeheader(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\ExportUtil.java,neuroph,24,45,0,3,0.875,0.7673,0,1,1,"/** 
 * Method for generating header for csv file
 * @return 
 */
private static String writeheader(){
  String header="""";
  header+=""Algorithm"" + DELIMITER;
  header+=""Minimum iterations"" + DELIMITER;
  header+=""Maximum iterations"" + DELIMITER;
  header+=""Mean of iterations"" + DELIMITER;
  header+=""Standard deviation of iterations"" + DELIMITER;
  header+=""Minimum total error"" + DELIMITER;
  header+=""Maximum total error"" + DELIMITER;
  header+=""Mean of total error"" + DELIMITER;
  header+=""Standard deviation of total error"" + DELIMITER;
  header+=""Learning rate"" + DELIMITER;
  header+=""Momentum"" + DELIMITER;
  header+=""Maximum iterations"" + DELIMITER;
  header+=""Maximum error"" + DELIMITER;
  header+=""Batch mode"" + DELIMITER;
  header+=""Hidden neurons"" + DELIMITER;
  header+=""Decrease factor"" + DELIMITER;
  header+=""Increase factor"" + DELIMITER;
  header+=""Initial delta"" + DELIMITER;
  header+=""Maximum delta"" + DELIMITER;
  header+=""Minimum delta"" + DELIMITER + ""\n"";
  return header;
}
"
1492,testNeuralNet(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\MomentumTraining.java,neuroph,6,11,7,2,0.3333,0.1429,0.545454545,1,1,"/** 
 * Method that set up learning rule with given settings, learns dataset and
 * creates statistics from results of the test
 */
@Override public void testNeuralNet(){
  MomentumBackpropagation mbp=(MomentumBackpropagation)setParameters();
  getNeuralNet().setLearningRule(mbp);
  getNeuralNet().learn(getDataset());
  this.getStats().addData(new TrainingResult(mbp.getCurrentIteration(),mbp.getTotalNetworkError(),createMatrix()));
  this.getStats().calculateParameters();
}
"
1496,testNeuralNet(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\QuickpropagationTraining.java,neuroph,6,11,7,2,0.3333,0.1429,0.545454545,1,1,"/** 
 * Method that set up learning rule with given settings, learns dataset and
 * creates statistics from results of the test
 */
@Override public void testNeuralNet(){
  QuickPropagation qp=(QuickPropagation)setParameters();
  getNeuralNet().setLearningRule(qp);
  getNeuralNet().learn(getDataset());
  this.getStats().addData(new TrainingResult(qp.getCurrentIteration(),qp.getTotalNetworkError(),createMatrix()));
  this.getStats().calculateParameters();
}
"
1500,testNeuralNet(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\ResilientTraining.java,neuroph,6,11,7,2,0.3333,0.1429,0.545454545,1,1,"/** 
 * Method that set up learning rule with given settings, learns dataset and
 * creates statistics from results of the test
 */
@Override public void testNeuralNet(){
  ResilientPropagation rp=(ResilientPropagation)setParameters();
  getNeuralNet().setLearningRule(rp);
  getNeuralNet().learn(getDataset());
  this.getStats().addData(new TrainingResult(rp.getCurrentIteration(),rp.getTotalNetworkError(),createMatrix()));
  this.getStats().calculateParameters();
}
"
1510,"TrainingSettings(double,double,int,int,double,boolean)",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\TrainingSettings.java,neuroph,8,28,28,8,0.125,0,0,12,1,"/** 
 * Create instance of training settings with given parameters
 * @param learningRate
 * @param momentum
 * @param hiddenNeurons
 * @param maxIterations
 * @param maxError
 * @param batchMode
 */
public TrainingSettings(double learningRate,double momentum,int hiddenNeurons,int maxIterations,double maxError,boolean batchMode){
  this.learningRate=learningRate;
  this.momentum=momentum;
  this.hiddenNeurons=hiddenNeurons;
  this.maxIterations=maxIterations;
  this.maxError=maxError;
  this.batchMode=batchMode;
}
"
1534,"TrainingSettingsGenerator(double,double,double,int,int,int,double,double,int,boolean)",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\TrainingSettingsGenerator.java,neuroph,24,252,228,10,0.0833,0.0497,0,26,10,"/** 
 * Create instance of generator with given parameters
 * @param minLearningRate
 * @param maxLearningRate
 * @param learningRateStep
 * @param minHiddenNeurons
 * @param maxHiddenNeurons
 * @param hiddenNeuronsStep
 * @param momentum
 * @param maxError
 * @param maxIterations
 * @param batchMode
 */
public TrainingSettingsGenerator(double minLearningRate,double maxLearningRate,double learningRateStep,int minHiddenNeurons,int maxHiddenNeurons,int hiddenNeuronsStep,double momentum,double maxError,int maxIterations,boolean batchMode){
  if (minLearningRate > 0) {
    this.minLearningRate=minLearningRate;
  }
 else {
    this.minLearningRate=0.1;
  }
  if (maxLearningRate > 0 && maxLearningRate > minLearningRate) {
    this.maxLearningRate=maxLearningRate;
  }
 else {
    this.maxLearningRate=1;
  }
  if (learningRateStep > 0 && learningRateStep < 1) {
    this.learningRateStep=learningRateStep;
  }
 else {
    this.learningRateStep=0.1;
  }
  if (minHiddenNeurons > 0) {
    this.minHiddenNeurons=minHiddenNeurons;
  }
 else {
    this.minHiddenNeurons=1;
  }
  if (maxHiddenNeurons > 0 && maxHiddenNeurons > minHiddenNeurons) {
    this.maxHiddenNeurons=maxHiddenNeurons;
  }
 else {
    this.maxHiddenNeurons=10;
  }
  if (hiddenNeuronsStep > 0) {
    this.hiddenNeuronsStep=hiddenNeuronsStep;
  }
 else {
    this.hiddenNeuronsStep=1;
  }
  this.momentum=momentum;
  this.maxError=maxError;
  this.maxIterations=maxIterations;
  this.batchMode=batchMode;
}
"
1539,addData(TrainingResult),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\TrainingStatistics.java,neuroph,10,9,0,2,0.3,0.3259,0.5,1,5,"/** 
 * Method that adds new training result to statistic and set minimum and
 * maximum iterations and total error
 * @param result
 */
public void addData(TrainingResult result){
  if (result.getTrainingIterations() < minIterations) {
    minIterations=result.getTrainingIterations();
  }
  if (result.getTrainingIterations() > maxIterations) {
    maxIterations=result.getTrainingIterations();
  }
  if (result.getError() < minError) {
    minError=result.getError();
  }
  if (result.getError() > maxError) {
    maxError=result.getError();
  }
  trainingResults.add(result);
}
"
1541,calculateMean(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\TrainingStatistics.java,neuroph,9,22,8,3,0.2963,0.1505,0.5,3,2,"/** 
 * Method for calculating mean of iterations and total error
 */
private void calculateMean(){
  int sumIter=0;
  double sumError=0;
  for (int i=0; i < trainingResults.size(); i++) {
    sumError+=trainingResults.get(i).getError();
    sumIter+=trainingResults.get(i).getTrainingIterations();
  }
  meanError=sumError / trainingResults.size();
  meanIterations=(double)sumIter / (double)trainingResults.size();
}
"
1542,calculateStd(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\bpbench\TrainingStatistics.java,neuroph,11,39,23,4,0.2222,0.0734,0.5,3,4,"/** 
 * Method for calculating standard deviation of iterations and total error
 */
private void calculateStd(){
  if (meanError == 0 || meanIterations == 0) {
    calculateMean();
  }
  double sumError=0;
  int sumIter=0;
  for (  TrainingResult trainingResult : trainingResults) {
    sumError+=Math.pow(trainingResult.getError() - meanError,2);
    sumIter+=Math.pow(trainingResult.getTrainingIterations() - meanIterations,2);
  }
  stdError=Math.sqrt(sumError / trainingResults.size());
  stdIterations=Math.sqrt(sumIter / trainingResults.size());
}
"
1563,Example(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\graphml\Example.java,neuroph,6,11,7,3,0.3333,0.1667,0.5,2,1,"/** 
 * 1. Generate trained artificial neural network.
 * 2. Create GraphmlExport instance. 
 * 3. Parse the artificial neural network. 
 * 4. Print to STDOUT
 */
public Example(){
  NeuralNetwork ann=ExampleNetworXOR.getNetwork();
  GraphmlExport ge=new GraphmlExport(ann);
  ge.parse();
  ge.printToStdout();
}
"
1570,addEdges(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\graphml\Graph.java,neuroph,10,24,3,3,0.2444,0.1217,0.666666667,6,2,"/** 
 * Adds a child element of type edge for each connection in the given neuron. 
 * @param neuron
 */
private void addEdges(final Neuron neuron){
  final String source=neuron.getLabel();
  String target;
  String weight;
  String weightKeyId=""d1"";
  for (  Connection con : neuron.getOutConnections()) {
    target=con.getToNeuron().getLabel();
    weight=String.valueOf(con.getWeight());
    appendChild(new Edge(source,target,weightKeyId,weight));
  }
}
"
1573,Graphml(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\graphml\Graphml.java,neuroph,6,15,15,4,0.1667,0,0.75,0,1,"public Graphml(){
  addAttribute(new XMLAttribute(""xmlns"",getNameSpace()));
  addAttribute(new XMLAttribute(""xmlns:xsi"",getXsiNameSpace()));
  addAttribute(new XMLAttribute(""xsi:schemaLocation"",getXsiSchemaLocation()));
  appendChild(new Key(""d1"",""edge"",""weight"",""double""));
}
"
1580,writeToFile(String),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\graphml\GraphmlExport.java,neuroph,6,11,7,3,0.2917,0.1556,0,3,2,"/** 
 * Writes graphml object to specified file. 
 * @param filePathOut
 */
public void writeToFile(final String filePathOut){
  try {
    File file=new File(filePathOut);
    file.createNewFile();
    print(new PrintStream(file));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
1583,createGraph(NeuralNetwork),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\graphml\GraphmlExport.java,neuroph,8,18,8,3,0.3125,0.1667,0.666666667,3,3,"/** 
 * Create XML graph from neuroph neural network. 
 * @param ann
 * @return
 */
private Graph createGraph(final NeuralNetwork ann){
  String id=ann.getLabel();
  if (id == null || id.length() == 0) {
    id=""defaultId"";
  }
  Graph graph=new Graph(id);
  graph.addNetwork(ann);
  return graph;
}
"
1585,"labelNeuron(int,int,Neuron)",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\graphml\GraphmlExport.java,neuroph,7,11,1,3,0.4286,0.2667,0.5,3,4,"/** 
 * Labels unlabelled neuron according to following rules. 
 * 1. If Input neuron: ""Input-[neuronCount]""
 * 2. If Bias neuron: ""L[layer]-bias""
 * 3. otherwise: L[layer]-[neuronCount]  
 * @param layer
 * @param neuronCount
 * @param neuron
 */
private void labelNeuron(final int layer,final int neuronCount,final Neuron neuron){
  if (neuron.getLabel() == null) {
    if (neuron.getClass() == InputNeuron.class) {
      neuron.setLabel(""Input-"" + neuronCount);
    }
 else     if (neuron.getClass() == BiasNeuron.class) {
      neuron.setLabel(""L"" + layer + ""-bias"");
    }
 else {
      neuron.setLabel(""L"" + layer + ""-""+ neuronCount);
    }
  }
}
"
1589,"Key(String,String,String,String)",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\graphml\Key.java,neuroph,6,15,15,3,0.1667,0,1,4,1,"public Key(final String idValue,final String forValue,final String attrNameValue,final String attrTypeValue){
  addAttribute(new XMLAttribute(""id"",idValue));
  addAttribute(new XMLAttribute(""for"",forValue));
  addAttribute(new XMLAttribute(""attr.name"",attrNameValue));
  addAttribute(new XMLAttribute(""attr.type"",attrTypeValue));
}
"
1600,toString(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\graphml\XMLElement.java,neuroph,6,9,3,3,0.6667,0.4286,0,1,2,"@Override public String toString(){
  String out=getStartTag() + "">"";
  if (getChildElements().size() != 0) {
    out+=""\n"";
    out+=getChildElementsString();
  }
  out+=getEndTag();
  return out;
}
"
1612,"addPatternError(double[],double[])",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\learning\CrossEntropyError.java,neuroph,9,29,22,5,0.2222,0.1038,0,4,3,"@Override public double[] addPatternError(double[] predictedOutput,double[] targetOutput){
  double[] error=new double[targetOutput.length];
  if (predictedOutput.length != targetOutput.length)   throw new IllegalArgumentException(""Output array length and desired output array length must be the same size!"");
  for (int i=0; i < predictedOutput.length; i++) {
    errorDerivative[i]=targetOutput[i] - predictedOutput[i];
    totalError+=targetOutput[i] * Math.log(predictedOutput[i]);
  }
  n++;
  return error;
}
"
1616,invertImage(String),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\licenceplaterecognition\BinaryOps.java,neuroph,16,81,42,3,0.1705,0.144,0,9,5,"/** 
 * Inverts the image colors from negative to positive
 * @return the image with inverted colors
 */
public static BufferedImage invertImage(String imageName){
  BufferedImage inputFile=null;
  try {
    inputFile=ImageIO.read(new File(imageName));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  for (int x=0; x < inputFile.getWidth(); x++) {
    for (int y=0; y < inputFile.getHeight(); y++) {
      int rgba=inputFile.getRGB(x,y);
      Color col=new Color(rgba,true);
      col=new Color(255 - col.getRed(),255 - col.getGreen(),255 - col.getBlue());
      inputFile.setRGB(x,y,col.getRGB());
    }
  }
  try {
    File outputFile=new File(""blackandwhite.png"");
    ImageIO.write(inputFile,""png"",outputFile);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return inputFile;
}
"
1617,binary(String),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\licenceplaterecognition\BinaryOps.java,neuroph,14,79,67,4,0.1176,0.0389,0,1,1,"public static BufferedImage binary(String textImageFile){
  BufferedImage image=UtilImageIO.loadImage(textImageFile);
  ImageFloat32 input=ConvertBufferedImage.convertFromSingle(image,null,ImageFloat32.class);
  ImageUInt8 binary=new ImageUInt8(input.width,input.height);
  ImageSInt32 label=new ImageSInt32(input.width,input.height);
  double threshold=GThresholdImageOps.computeOtsu(input,0,256);
  ThresholdImageOps.threshold(input,binary,(float)threshold,true);
  ImageUInt8 filtered=BinaryImageOps.erode8(binary,1,null);
  filtered=BinaryImageOps.dilate8(filtered,1,null);
  BufferedImage visualFiltered=VisualizeBinaryData.renderBinary(filtered,null);
  File charFile=new File(""whiteandblack.png"");
  try {
    ImageIO.write(visualFiltered,""png"",charFile);
  }
 catch (  IOException ex) {
    Logger.getLogger(BinaryOps.class.getName()).log(Level.SEVERE,null,ex);
  }
  return invertImage(""whiteandblack.png"");
}
"
1621,crop(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\licenceplaterecognition\OcrDemo.java,neuroph,19,126,81,3,0.1617,0.0763,0,10,18,"/** 
 * Crop the part of an image with a white rectangle
 * @return A cropped image File
 */
public File crop(BufferedImage image){
  int upperLeftCornerx=Integer.MAX_VALUE;
  int upperLeftCornery=Integer.MAX_VALUE;
  int lowerRightCornerx=Integer.MIN_VALUE;
  int lowerRightCornery=Integer.MIN_VALUE;
  for (int i=0; i < image.getWidth(); i++) {
    for (int j=0; j < image.getHeight(); j++) {
      if (image.getRGB(i,j) == WHITE.getRGB() && (i < upperLeftCornerx && j < upperLeftCornery) || (i <= upperLeftCornerx && j < upperLeftCornery) || (i < upperLeftCornerx && j <= upperLeftCornery)) {
        upperLeftCornerx=i;
        upperLeftCornery=j;
      }
      if (image.getRGB(i,j) == WHITE.getRGB() && ((i > lowerRightCornerx && j >= lowerRightCornery) || (i >= lowerRightCornerx && j > lowerRightCornery) || (i > lowerRightCornerx && j >= lowerRightCornery))) {
        lowerRightCornerx=i;
        lowerRightCornery=j;
      }
    }
  }
  BufferedImage croppedImage=image.getSubimage(upperLeftCornerx,upperLeftCornery,lowerRightCornerx - upperLeftCornerx,lowerRightCornery - upperLeftCornery);
  File cropFile=new File(""croppedimage.png"");
  try {
    ImageIO.write(croppedImage,""png"",cropFile);
  }
 catch (  IOException ex) {
    Logger.getLogger(OcrDemo.class.getName()).log(Level.SEVERE,null,ex);
  }
  return cropFile;
}
"
1622,run(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\licenceplaterecognition\OcrDemo.java,neuroph,24,247,218,6,0.0759,0.0341,0.625,10,6,"public void run(){
  try {
    if (image == null) {
      image=ImageIO.read(new File(textImageFile));
    }
    image=BinaryOps.binary(textImageFile);
    File cropFile=crop(image);
    CharacterExtractor ce=new CharacterExtractor();
    File outputDirectory=new File(charOutputFile);
    ce.slice(cropFile,outputDirectory,60,60);
    List<BufferedImage> lista=new ArrayList<BufferedImage>();
    for (int i=0; i <= 7; i++) {
      File f=new File(""data/char_"" + i + "".png"");
      BufferedImage bi=ImageIO.read(f);
      lista.add(bi);
    }
    if (nnet == null) {
      NeuralNetwork nnet=NeuralNetwork.createFromFile(neuralNetworkFile);
    }
    nnet.addPlugin(new OcrPlugin(new Dimension(10,10),ColorMode.BLACK_AND_WHITE));
    OcrPlugin ocrPlugin=(OcrPlugin)nnet.getPlugin(OcrPlugin.class);
    for (int i=0; i < lista.size(); i++) {
      recognizedCharacters+=ocrPlugin.recognizeCharacter(new ImageJ2SE(lista.get(i))) + "" "";
      System.out.print(ocrPlugin.recognizeCharacter(new ImageJ2SE(lista.get(i))) + "" "");
    }
    recognizedCharacters.trim();
  }
 catch (  IOException e) {
    System.out.println(""Error reading dir: "" + e.getMessage());
  }
}
"
1635,"MatrixMlpLayer(Layer,MatrixLayer,TransferFunction)",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\matrixmlp\MatrixMlpLayer.java,neuroph,18,126,99,8,0.1111,0.0655,1,9,2,"public MatrixMlpLayer(Layer sourceLayer,MatrixLayer previousLayer,TransferFunction transferFunction){
  this.sourceLayer=sourceLayer;
  this.previousLayer=previousLayer;
  if (!(previousLayer instanceof MatrixInputLayer))   ((MatrixMlpLayer)previousLayer).setNextLayer(this);
  this.transferFunction=transferFunction;
  this.neuronsCount=sourceLayer.getNeuronsCount();
  this.inputsCount=previousLayer.getOutputs().length;
  outputs=new double[neuronsCount];
  inputs=new double[inputsCount];
  netInput=new double[neuronsCount];
  weights=new double[neuronsCount][inputsCount];
  deltaWeights=new double[neuronsCount][inputsCount];
  errors=new double[neuronsCount];
  copyNeuronsToMatrices();
}
"
1640,copyNeuronsToMatrices(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\matrixmlp\MatrixMlpLayer.java,neuroph,11,37,19,3,0.1919,0.1194,0.8,6,4,"public void copyNeuronsToMatrices(){
  int neuronIdx=0, connIdx=0;
  for (  Neuron neuron : this.sourceLayer.getNeurons()) {
    if (neuron instanceof BiasNeuron) {
      this.useBias=true;
    }
    outputs[neuronIdx]=neuron.getOutput();
    connIdx=0;
    for (    Connection conn : neuron.getInputConnections()) {
      weights[neuronIdx][connIdx]=conn.getWeight().getValue();
      connIdx++;
    }
    neuronIdx++;
  }
}
"
1648,calculate(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\matrixmlp\MatrixMlpLayer.java,neuroph,10,34,23,4,0.2,0.0762,1,3,4,"final public void calculate(){
  this.inputs=previousLayer.getOutputs();
  for (int i=0; i < neuronsCount; i++) {
    netInput[i]=0;
    for (int j=0; j < inputs.length; j++) {
      netInput[i]+=inputs[j] * weights[i][j];
    }
    outputs[i]=transferFunction.getOutput(netInput[i]);
  }
  if (useBias)   outputs[neuronsCount - 1]=1;
}
"
1658,calculateErrorAndUpdateOutputNeurons(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\matrixmlp\MatrixMomentumBackpropagation.java,neuroph,10,24,3,3,0.2222,0.1396,0.571428571,7,2,"/** 
 * This method implements weights update procedure for the output neurons
 * @param patternErrorsingle pattern error vector
 */
@Override protected void calculateErrorAndUpdateOutputNeurons(double[] patternError){
  MatrixMlpLayer outputLayer=(MatrixMlpLayer)matrixLayers[matrixLayers.length - 1];
  TransferFunction transferFunction=outputLayer.getTransferFunction();
  double[] outputs=outputLayer.getOutputs();
  double[] netInputs=outputLayer.getNetInput();
  double[] neuronErrors=outputLayer.getErrors();
  for (int i=0; i < outputs.length; i++) {
    neuronErrors[i]=patternError[i] * transferFunction.getDerivative(netInputs[i]);
  }
  this.updateLayerWeights(outputLayer,neuronErrors);
  System.out.println(""MSE:"" + getErrorFunction().getTotalError());
}
"
1659,"updateLayerWeights(MatrixMlpLayer,double[])",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\matrixmlp\MatrixMomentumBackpropagation.java,neuroph,9,19,2,2,0.2556,0.1482,0.25,10,3,"protected void updateLayerWeights(MatrixMlpLayer layer,double[] errors){
  double[] inputs=layer.getInputs();
  double[][] weights=layer.getWeights();
  double[][] deltaWeights=layer.getDeltaWeights();
  for (int neuronIdx=0; neuronIdx < layer.getNeuronsCount(); neuronIdx++) {
    for (int weightIdx=0; weightIdx < weights[neuronIdx].length; weightIdx++) {
      double deltaWeight=this.learningRate * errors[neuronIdx] * inputs[weightIdx] + momentum * (deltaWeights[neuronIdx][weightIdx]);
      deltaWeights[neuronIdx][weightIdx]=deltaWeight;
      weights[neuronIdx][weightIdx]+=deltaWeight;
    }
  }
}
"
1660,calculateErrorAndUpdateHiddenNeurons(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\matrixmlp\MatrixMomentumBackpropagation.java,neuroph,18,112,71,4,0.1319,0.077,0.375,13,4,"/** 
 * backpropogate errors through all hidden layers and update conneciion weights
 * for those layers.
 */
@Override protected void calculateErrorAndUpdateHiddenNeurons(){
  int layersCount=matrixMlp.getLayersCount();
  for (int layerIdx=layersCount - 2; layerIdx > 0; layerIdx--) {
    MatrixMlpLayer currentLayer=(MatrixMlpLayer)matrixLayers[layerIdx];
    TransferFunction transferFunction=currentLayer.getTransferFunction();
    int neuronsCount=currentLayer.getNeuronsCount();
    double[] neuronErrors=currentLayer.getErrors();
    double[] netInputs=currentLayer.getNetInput();
    MatrixMlpLayer nextLayer=(MatrixMlpLayer)currentLayer.getNextLayer();
    double[] nextLayerErrors=nextLayer.getErrors();
    double[][] nextLayerWeights=nextLayer.getWeights();
    for (int neuronIdx=0; neuronIdx < neuronsCount; neuronIdx++) {
      double weightedErrorsSum=0;
      for (int nextLayerNeuronIdx=0; nextLayerNeuronIdx < nextLayer.getNeuronsCount(); nextLayerNeuronIdx++) {
        weightedErrorsSum+=nextLayerErrors[nextLayerNeuronIdx] * nextLayerWeights[nextLayerNeuronIdx][neuronIdx];
      }
      neuronErrors[neuronIdx]=transferFunction.getDerivative(netInputs[neuronIdx]) * weightedErrorsSum;
    }
    this.updateLayerWeights(currentLayer,neuronErrors);
  }
}
"
1663,createMatrixLayers(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\matrixmlp\MatrixMultiLayerPerceptron.java,neuroph,10,29,13,3,0.2333,0.108,0.833333333,4,2,"private void createMatrixLayers(){
  matrixLayers=new MatrixLayer[sourceNetwork.getLayersCount()];
  matrixLayers[0]=new MatrixInputLayer(sourceNetwork.getLayerAt(0).getNeuronsCount());
  MatrixLayer prevLayer=matrixLayers[0];
  for (int i=1; i < sourceNetwork.getLayersCount(); i++) {
    Layer layer=sourceNetwork.getLayerAt(i);
    MatrixMlpLayer newBpLayer=new MatrixMlpLayer(layer,prevLayer,new Tanh());
    matrixLayers[i]=newBpLayer;
    prevLayer=newBpLayer;
  }
}
"
1668,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\matrixmlp\TestMatrixMLP.java,neuroph,9,19,2,2,0.2963,0.1944,0.833333333,4,1,"/** 
 * Create and run MLP with XOR training set
 */
public static void main(String[] args){
  DataSet trainingSet=new DataSet(2,1);
  trainingSet.addRow(new DataSetRow(new double[]{0,0},new double[]{0}));
  trainingSet.addRow(new DataSetRow(new double[]{0,1},new double[]{1}));
  trainingSet.addRow(new DataSetRow(new double[]{1,0},new double[]{1}));
  trainingSet.addRow(new DataSetRow(new double[]{1,1},new double[]{0}));
  MultiLayerPerceptron nnet=new MultiLayerPerceptron(TransferFunctionType.TANH,2,3,1);
  MatrixMultiLayerPerceptron mnet=new MatrixMultiLayerPerceptron(nnet);
  System.out.println(""Training network..."");
  mnet.learn(trainingSet);
  System.out.println(""Done training network."");
}
"
1669,"normalizeSunspots(double,double)",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\SunSpots.java,neuroph,13,45,12,3,0.2115,0.1116,0,6,3,"/** 
 * Normalize the sunspots.
 * @param lo Low range for normalization.
 * @param hi High range for normalization.
 */
public void normalizeSunspots(double lo,double hi){
  double min=Double.MAX_VALUE;
  double max=Double.MIN_VALUE;
  for (int year=0; year < SUNSPOTS.length; year++) {
    min=Math.min(min,SUNSPOTS[year]);
    max=Math.max(max,SUNSPOTS[year]);
  }
  normalizedSunspots=new double[SUNSPOTS.length];
  closedLoopSunspots=new double[SUNSPOTS.length];
  mean=0;
  for (int year=0; year < SUNSPOTS.length; year++) {
    normalizedSunspots[year]=closedLoopSunspots[year]=((SUNSPOTS[year] - min) / (max - min)) * (hi - lo) + lo;
    mean+=normalizedSunspots[year] / SUNSPOTS.length;
  }
}
"
1670,generateTrainingData(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\SunSpots.java,neuroph,12,50,34,3,0.1667,0.0546,0.666666667,8,3,"/** 
 * Generate the training data for the training sunspot years.
 * @return The training data.
 */
public DataSet generateTrainingData(){
  DataSet result=new DataSet(WINDOW_SIZE,1);
  for (int year=TRAIN_START; year < TRAIN_END; year++) {
    double[] input=new double[WINDOW_SIZE];
    double[] ideal=new double[1];
    int index=0;
    for (int i=year - WINDOW_SIZE; i < year; i++) {
      input[index++]=this.normalizedSunspots[i];
    }
    ideal[0]=this.normalizedSunspots[year];
    result.addRow(new DataSetRow(input,ideal));
  }
  return result;
}
"
1671,predict(NeuralNetwork),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\SunSpots.java,neuroph,22,178,125,4,0.1222,0.0854,0.333333333,13,4,"/** 
 * Predict sunspots.
 * @param network Neural network to use.
 */
public void predict(NeuralNetwork network){
  NumberFormat f=NumberFormat.getNumberInstance();
  f.setMaximumFractionDigits(4);
  f.setMinimumFractionDigits(4);
  System.out.println(""Year\tActual\tPredict\tClosed Loop Predict"");
  for (int year=EVALUATE_START; year < EVALUATE_END; year++) {
    double[] input=new double[WINDOW_SIZE];
    for (int i=0; i < input.length; i++) {
      input[i]=this.normalizedSunspots[(year - WINDOW_SIZE) + i];
    }
    network.setInput(input);
    network.calculate();
    double[] output=network.getOutput();
    double prediction=output[0];
    this.closedLoopSunspots[year]=prediction;
    for (int i=0; i < input.length; i++) {
      input[i]=this.closedLoopSunspots[(year - WINDOW_SIZE) + i];
    }
    network.setInput(input);
    network.calculate();
    output=network.getOutput();
    double closedLoopPrediction=output[0];
    System.out.println((STARTING_YEAR + year) + ""\t"" + f.format(this.normalizedSunspots[year])+ ""\t""+ f.format(prediction)+ ""\t""+ f.format(closedLoopPrediction));
  }
}
"
1676,"BufferedDataSet(File,int,int,String)",D:\temp\case study\neuroph-2.94\org\neuroph\core\data\BufferedDataSet.java,neuroph,9,34,32,7,0.1313,0.0136,0,8,1,"/** 
 * Creates new buffered data set with specified file, input and output size.
 * Data set file is assumed to be txt value with data set rows in a single line,
 * with input and output vector values delimited by delimiter.
 * @param file datas et file
 * @param inputSize size of input vector
 * @param outputSize size of outut vector
 * @param delimiter delimiter for vector values
 * @throws FileNotFoundException 
 */
public BufferedDataSet(File file,int inputSize,int outputSize,String delimiter) throws FileNotFoundException {
  super(inputSize,outputSize);
  this.delimiter=delimiter;
  this.file=file;
  this.fileReader=new FileReader(file);
  this.bufferedReader=new BufferedReader(fileReader);
  fileLinesNumber=countFileLines();
  loadNextBuffer();
}
"
1677,countFileLines(),D:\temp\case study\neuroph-2.94\org\neuroph\core\data\BufferedDataSet.java,neuroph,8,24,20,5,0.2,0.0933,0,2,3,"/** 
 * Counts and returns number of lines in a file
 * @return number of lines in a file
 * @throws FileNotFoundException 
 */
private long countFileLines() throws FileNotFoundException {
  LineNumberReader lnr=new LineNumberReader(new FileReader(file));
  try {
    while (lnr.skip(Long.MAX_VALUE) > 0) {
    }
    ;
  }
 catch (  IOException ex) {
    Logger.getLogger(BufferedDataSet.class.getName()).log(Level.SEVERE,null,ex);
  }
  return lnr.getLineNumber() + 1;
}
"
1682,loadNextBuffer(),D:\temp\case study\neuroph-2.94\org\neuroph\core\data\BufferedDataSet.java,neuroph,35,540,485,7,0.0756,0.066,0.333333333,11,14,"/** 
 * Loads next bufferSize rows from file into buffer
 */
private void loadNextBuffer(){
  try {
    String line="""";
    this.clear();
    rowsLoaded=0;
    while (rowsLoaded < bufferSize) {
      line=bufferedReader.readLine();
      if (line == null) {
        break;
      }
      rowsLoaded++;
      double[] inputs=new double[getInputSize()];
      double[] outputs=new double[getOutputSize()];
      String[] values=line.split(delimiter);
      if (values[0].equals("""")) {
        continue;
      }
      for (int i=0; i < getInputSize(); i++) {
        inputs[i]=Double.parseDouble(values[i]);
      }
      for (int i=0; i < getOutputSize(); i++) {
        outputs[i]=Double.parseDouble(values[getInputSize() + i]);
      }
      if (getOutputSize() > 0) {
        this.addRow(new DataSetRow(inputs,outputs));
      }
 else {
        this.addRow(new DataSetRow(inputs));
      }
    }
    bufferedRows=this.getRows();
    bufferIterator=bufferedRows.iterator();
  }
 catch (  FileNotFoundException ex) {
    ex.printStackTrace();
  }
catch (  IOException ex) {
    if (fileReader != null) {
      try {
        fileReader.close();
      }
 catch (      IOException ex1) {
      }
    }
    ex.printStackTrace();
  }
catch (  NumberFormatException ex) {
    if (fileReader != null) {
      try {
        fileReader.close();
      }
 catch (      IOException ex1) {
      }
    }
    ex.printStackTrace();
    throw ex;
  }
}
"
1683,DataSet(int),D:\temp\case study\neuroph-2.94\org\neuroph\core\data\DataSet.java,neuroph,8,28,28,8,0.125,0,0,6,1,"/** 
 * Creates an instance of new empty training set
 * @param inputSize  Length of the input vector
 * @param outputSize Length of the output vector
 */
public DataSet(int inputSize,int outputSize){
  this.rows=new ArrayList();
  this.inputSize=inputSize;
  this.outputSize=outputSize;
  this.isSupervised=true;
  setDefaultColumnNames();
  setDefaultColumnTypes();
}
"
1707,toString(),D:\temp\case study\neuroph-2.94\org\neuroph\core\data\DataSet.java,neuroph,13,47,16,3,0.2051,0.2554,0,3,4,"/** 
 * Returns string representation of this data set
 * @return string representation of this data set
 */
@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(""Dataset Label: "").append(label).append(System.lineSeparator());
  if (columnNames != null) {
    sb.append(""Columns: "");
    for (    String columnName : columnNames) {
      sb.append(columnName).append("", "");
    }
    sb.delete(sb.length() - 2,sb.length() - 1);
    sb.append(System.lineSeparator());
  }
  for (  DataSetRow row : rows) {
    sb.append(row).append(System.lineSeparator());
  }
  return sb.toString();
}
"
1708,toCSV(),D:\temp\case study\neuroph-2.94\org\neuroph\core\data\DataSet.java,neuroph,12,42,18,3,0.2333,0.2538,1,3,5,"/** 
 * Returns enire dataset in csv format
 * @return
 */
public String toCSV(){
  StringBuilder sb=new StringBuilder();
  if ((columnNames != null) && (columnNames.length > 0)) {
    for (    String columnName : columnNames) {
      sb.append(columnName).append("", "");
    }
    sb.delete(sb.length() - 2,sb.length() - 1);
    sb.append(System.lineSeparator());
  }
  for (  DataSetRow row : rows) {
    sb.append(row.toCSV());
    sb.append(System.lineSeparator());
  }
  return sb.toString();
}
"
1715,"createTrainingAndTestSubsets(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\core\data\DataSet.java,neuroph,6,11,7,3,0.2667,0.1333,0,2,1,"/** 
 * Returns training and test subsets in the specified percent ratio
 * @param trainSetPercent
 * @param testSetPercent
 * @return
 */
public DataSet[] createTrainingAndTestSubsets(int trainSetPercent,int testSetPercent){
  SubSampling sampling=new SubSampling(trainSetPercent,testSetPercent);
  DataSet[] trainAndTestSet=new DataSet[2];
  sampling.sample(this).toArray(trainAndTestSet);
  return trainAndTestSet;
}
"
1754,toString(),D:\temp\case study\neuroph-2.94\org\neuroph\core\data\DataSetRow.java,neuroph,13,48,18,4,0.2154,0.2933,0,3,4,"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(""Input: "");
  for (  double in : input) {
    sb.append(in).append("", "");
  }
  sb.delete(sb.length() - 2,sb.length() - 1);
  if (isSupervised()) {
    sb.append("" Desired output: "");
    for (    double out : desiredOutput) {
      sb.append(out).append("", "");
    }
    sb.delete(sb.length() - 2,sb.length() - 1);
  }
  return sb.toString();
}
"
1755,toArray(),D:\temp\case study\neuroph-2.94\org\neuroph\core\data\DataSetRow.java,neuroph,6,9,3,3,0.3889,0.2381,0,1,1,"public double[] toArray(){
  double[] row=new double[input.length + desiredOutput.length];
  System.arraycopy(input,0,row,0,input.length);
  System.arraycopy(desiredOutput,0,row,input.length,desiredOutput.length);
  return row;
}
"
1756,toCSV(),D:\temp\case study\neuroph-2.94\org\neuroph\core\data\DataSetRow.java,neuroph,10,33,21,4,0.22,0.1667,0,3,4,"public String toCSV(){
  StringBuilder sb=new StringBuilder();
  for (  double in : input) {
    sb.append(in).append("", "");
  }
  if (isSupervised()) {
    for (    double out : desiredOutput) {
      sb.append(out).append("", "");
    }
  }
  sb.delete(sb.length() - 2,sb.length() - 1);
  return sb.toString();
}
"
1758,equals(Object),D:\temp\case study\neuroph-2.94\org\neuroph\core\data\DataSetRow.java,neuroph,9,24,12,3,0.2222,0.1786,0,5,7,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final DataSetRow other=(DataSetRow)obj;
  if (!Objects.equals(this.label,other.label)) {
    return false;
  }
  if (!Arrays.equals(this.input,other.input)) {
    return false;
  }
  if (!Arrays.equals(this.desiredOutput,other.desiredOutput)) {
    return false;
  }
  return true;
}
"
1804,doOneLearningIteration(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\core\learning\IterativeLearning.java,neuroph,6,15,15,6,0.1667,0,1,1,1,"/** 
 * Runs one learning iteration with the specified training set and fires
 * event to notify observers. This method does the the doLearningEpoch() and in addtion
 * notifes observrs when iteration is done.
 * @param trainingSet training set to learn
 */
public void doOneLearningIteration(DataSet trainingSet){
  beforeEpoch();
  doLearningEpoch(trainingSet);
  afterEpoch();
  fireLearningEvent(new LearningEvent(this,LearningEvent.Type.LEARNING_STOPPED));
}
"
1822,"learn(DataSet,double,int)",D:\temp\case study\neuroph-2.94\org\neuroph\core\learning\SupervisedLearning.java,neuroph,6,14,13,5,0.2,0.0357,0.5,5,1,"/** 
 * Trains network for the specified training set, maxError and number of iterations
 * @param trainingSet   training set to learn
 * @param maxError      learning stop condition. if maxError is reached learning stops
 * @param maxIterations maximum number of learning iterations
 */
public void learn(DataSet trainingSet,double maxError,int maxIterations){
  this.trainingSet=trainingSet;
  this.maxError=maxError;
  setMaxIterations(maxIterations);
  learn(trainingSet);
}
"
1825,afterEpoch(),D:\temp\case study\neuroph-2.94\org\neuroph\core\learning\SupervisedLearning.java,neuroph,7,19,17,5,0.1837,0.06,1,2,3,"@Override protected void afterEpoch(){
  double absErrorChange=Math.abs(previousEpochError - errorFunction.getTotalError());
  if (absErrorChange <= this.minErrorChange) {
    minErrorChangeIterationsCount++;
  }
 else {
    minErrorChangeIterationsCount=0;
  }
  if (batchMode == true) {
    doBatchWeightsUpdate();
  }
}
"
1826,doLearningEpoch(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\core\learning\SupervisedLearning.java,neuroph,6,11,7,3,0.3333,0.131,1,3,3,"/** 
 * This method implements basic logic for one learning epoch for the
 * supervised learning algorithms. Epoch is the one pass through the
 * training set. This method  iterates through the training set
 * and trains network for each element. It also sets flag if conditions
 * to stop learning has been reached: network error below some allowed
 * value, or maximum iteration count
 * @param trainingSet training set for training network
 */
@Override public void doLearningEpoch(DataSet trainingSet){
  Iterator<DataSetRow> iterator=trainingSet.iterator();
  while (iterator.hasNext() && !isStopped()) {
    DataSetRow dataSetRow=iterator.next();
    learnPattern(dataSetRow);
  }
}
"
1827,learnPattern(DataSetRow),D:\temp\case study\neuroph-2.94\org\neuroph\core\learning\SupervisedLearning.java,neuroph,7,15,9,3,0.2619,0.0944,0.5,3,2,"/** 
 * Trains network with the input and desired output pattern from the specified training element
 * @param trainingElement supervised training element which contains input and desired output
 */
protected void learnPattern(DataSetRow trainingElement){
  neuralNetwork.setInput(trainingElement.getInput());
  neuralNetwork.calculate();
  double[] output=neuralNetwork.getOutput();
  double[] patternError=errorFunction.addPatternError(output,trainingElement.getDesiredOutput());
  calculateWeightChanges(patternError);
  if (!batchMode)   applyWeightChanges();
}
"
1828,doBatchWeightsUpdate(),D:\temp\case study\neuroph-2.94\org\neuroph\core\learning\SupervisedLearning.java,neuroph,8,20,12,2,0.2708,0.122,0.857142857,5,4,"/** 
 * This method updates network weights in batch mode - use accumulated weights change stored in Weight.deltaWeight
 * It is executed after each learning epoch, only if learning is done in batch mode.
 * @see SupervisedLearning#doLearningEpoch(org.neuroph.core.data.DataSet)
 */
protected void doBatchWeightsUpdate(){
  List<Layer> layers=neuralNetwork.getLayers();
  for (int i=neuralNetwork.getLayersCount() - 1; i > 0; i--) {
    for (    Neuron neuron : layers.get(i).getNeurons()) {
      for (      Connection connection : neuron.getInputConnections()) {
        Weight weight=connection.getWeight();
        weight.value+=weight.weightChange / getTrainingSet().size();
        weight.weightChange=0;
      }
    }
  }
}
"
1843,applyWeightChanges(),D:\temp\case study\neuroph-2.94\org\neuroph\core\learning\SupervisedLearning.java,neuroph,11,44,33,4,0.2121,0.1138,0.857142857,5,5,"private void applyWeightChanges(){
  List<Layer> layers=neuralNetwork.getLayers();
  for (int i=neuralNetwork.getLayersCount() - 1; i > 0; i--) {
    for (    Neuron neuron : layers.get(i).getNeurons()) {
      for (      Connection connection : neuron.getInputConnections()) {
        Weight weight=connection.getWeight();
        if (!isBatchMode()) {
          weight.value+=weight.weightChange;
        }
 else {
          weight.value+=(weight.weightChange / getTrainingSet().size());
        }
        weight.weightChange=0;
      }
    }
  }
}
"
1845,doLearningEpoch(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\core\learning\UnsupervisedLearning.java,neuroph,6,11,7,3,0.3333,0.131,1,3,3,"/** 
 * This method does one learning epoch for the unsupervised learning rules.
 * It iterates through the training set and trains network weights for each
 * element
 * @param trainingSettraining set for training network
 */
@Override public void doLearningEpoch(DataSet trainingSet){
  Iterator<DataSetRow> iterator=trainingSet.iterator();
  while (iterator.hasNext() && !isStopped()) {
    DataSetRow trainingSetRow=iterator.next();
    learnPattern(trainingSetRow);
  }
}
"
1846,learnPattern(DataSetRow),D:\temp\case study\neuroph-2.94\org\neuroph\core\learning\UnsupervisedLearning.java,neuroph,6,11,7,3,0.3333,0.125,0.666666667,4,1,"/** 
 * Trains network with the pattern from the specified training element
 * @param DataSetItemunsupervised training element which contains network input
 */
protected void learnPattern(DataSetRow trainingElement){
  double[] input=trainingElement.getInput();
  this.neuralNetwork.setInput(input);
  this.neuralNetwork.calculate();
  this.updateNetworkWeights();
}
"
1849,Gaussian(Properties),D:\temp\case study\neuroph-2.94\org\neuroph\core\transfer\Gaussian.java,neuroph,6,14,13,5,0.2222,0.0833,1,4,3,"/** 
 * Creates an instance of Gaussian neuron transfer function with the
 * specified properties.
 * @param properties properties of the Gaussian function
 */
public Gaussian(Properties properties){
  try {
    this.sigma=(Double)properties.getProperty(""transferFunction.sigma"");
  }
 catch (  NullPointerException e) {
  }
catch (  NumberFormatException e) {
    System.err.println(""Invalid transfer function properties! Using default values."");
  }
}
"
1856,Linear(Properties),D:\temp\case study\neuroph-2.94\org\neuroph\core\transfer\Linear.java,neuroph,6,14,13,5,0.2222,0.0833,1,4,3,"/** 
 * Creates an instance of Linear transfer function with specified properties
 */
public Linear(Properties properties){
  try {
    this.slope=(Double)properties.getProperty(""transferFunction.slope"");
  }
 catch (  NullPointerException e) {
  }
catch (  NumberFormatException e) {
    System.err.println(""Invalid transfer function properties! Using default values."");
  }
}
"
1864,"Ramp(double,double,double,double,double)",D:\temp\case study\neuroph-2.94\org\neuroph\core\transfer\Ramp.java,neuroph,7,20,19,6,0.1571,0.0238,1,8,3,"/** 
 * Creates an instance of Ramp transfer function with specified properties.
 */
public Ramp(Properties properties){
  try {
    this.slope=(Double)properties.getProperty(""transferFunction.slope"");
    this.yHigh=(Double)properties.getProperty(""transferFunction.yHigh"");
    this.yLow=(Double)properties.getProperty(""transferFunction.yLow"");
    this.xHigh=(Double)properties.getProperty(""transferFunction.xHigh"");
    this.xLow=(Double)properties.getProperty(""transferFunction.xLow"");
  }
 catch (  NullPointerException e) {
  }
catch (  NumberFormatException e) {
    System.err.println(""Invalid transfer function properties! Using default values."");
  }
}
"
1881,Sigmoid(Properties),D:\temp\case study\neuroph-2.94\org\neuroph\core\transfer\Sigmoid.java,neuroph,6,14,13,5,0.2222,0.0833,1,4,3,"/** 
 * Creates an instance of Sigmoid neuron transfer function with the
 * specified properties.
 * @param properties properties of the sigmoid function
 */
public Sigmoid(Properties properties){
  try {
    this.slope=(Double)properties.getProperty(""transferFunction.slope"");
  }
 catch (  NullPointerException e) {
  }
catch (  NumberFormatException e) {
    System.err.println(""Invalid transfer function properties! Using default values."");
  }
}
"
1889,Step(Properties),D:\temp\case study\neuroph-2.94\org\neuroph\core\transfer\Step.java,neuroph,7,19,17,5,0.2143,0.0741,1,5,3,"/** 
 * Creates an instance of Step transfer function with specified properties
 */
public Step(Properties properties){
  try {
    this.yHigh=(Double)properties.getProperty(""transferFunction.yHigh"");
    this.yLow=(Double)properties.getProperty(""transferFunction.yLow"");
  }
 catch (  NullPointerException e) {
  }
catch (  NumberFormatException e) {
    System.err.println(""Invalid transfer function properties! Using default values."");
  }
}
"
1898,Tanh(Properties),D:\temp\case study\neuroph-2.94\org\neuroph\core\transfer\Tanh.java,neuroph,7,20,19,6,0.1905,0.0667,1,4,3,"/** 
 * Creates an instance of Tanh neuron transfer function with the
 * specified properties.
 * @param properties properties of the Tanh function
 */
public Tanh(Properties properties){
  try {
    this.slope=(Double)properties.getProperty(""transferFunction.slope"");
  }
 catch (  NullPointerException e) {
  }
catch (  NumberFormatException e) {
    System.err.println(""Invalid transfer function properties! Using default values."");
  }
}
"
1907,Trapezoid(),D:\temp\case study\neuroph-2.94\org\neuroph\core\transfer\Trapezoid.java,neuroph,6,15,15,6,0.1667,0,1,7,3,"/** 
 * Creates an instance of Trapezoid transfer function with the specified
 * properties.
 */
public Trapezoid(Properties properties){
  try {
    this.leftLow=(Double)properties.getProperty(""transferFunction.leftLow"");
    this.leftHigh=(Double)properties.getProperty(""transferFunction.leftHigh"");
    this.rightLow=(Double)properties.getProperty(""transferFunction.rightLow"");
    this.rightHigh=(Double)properties.getProperty(""transferFunction.rightHigh"");
  }
 catch (  NullPointerException e) {
  }
catch (  NumberFormatException e) {
    System.err.println(""Invalid transfer function properties! Using default values."");
  }
}
"
1919,"ClassificationMetrics(int,int,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\eval\classification\ClassificationMetrics.java,neuroph,7,17,13,3,0.2,0.0286,0,9,1,"/** 
 * Constructs a new measure using arguments
 * TODO: add class to which measure corresponds?
 * @param truePositive
 * @param trueNegative
 * @param falsePositive
 * @param falseNegative
 */
public ClassificationMetrics(int truePositive,int trueNegative,int falsePositive,int falseNegative){
  this.truePositive=truePositive;
  this.trueNegative=trueNegative;
  this.falsePositive=falsePositive;
  this.falseNegative=falseNegative;
  this.total=falseNegative + falsePositive + trueNegative+ truePositive;
}
"
1939,createFromMatrix(ConfusionMatrix),D:\temp\case study\neuroph-2.94\org\neuroph\eval\classification\ClassificationMetrics.java,neuroph,21,131,52,1,0.1397,0.1244,0.142857143,15,3,"public static ClassificationMetrics[] createFromMatrix(ConfusionMatrix confusionMatrix){
  int classCount=confusionMatrix.getClassCount();
  if (classCount == 2) {
    ClassificationMetrics[] measures=new ClassificationMetrics[1];
    String[] classLabels=confusionMatrix.getClassLabels();
    int tp=confusionMatrix.get(0,0);
    int tn=confusionMatrix.get(1,1);
    int fp=confusionMatrix.get(1,0);
    int fn=confusionMatrix.get(0,1);
    measures[0]=new ClassificationMetrics(tp,tn,fp,fn);
    measures[0].setClassLabel(classLabels[0]);
    return measures;
  }
 else {
    ClassificationMetrics[] measures=new ClassificationMetrics[classCount];
    String[] classLabels=confusionMatrix.getClassLabels();
    for (int clsIdx=0; clsIdx < confusionMatrix.getClassCount(); clsIdx++) {
      int tp=confusionMatrix.getTruePositive(clsIdx);
      int tn=confusionMatrix.getTrueNegative(clsIdx);
      int fp=confusionMatrix.getFalsePositive(clsIdx);
      int fn=confusionMatrix.getFalseNegative(clsIdx);
      measures[clsIdx]=new ClassificationMetrics(tp,tn,fp,fn);
      measures[clsIdx].setClassLabel(classLabels[clsIdx]);
    }
    return measures;
  }
}
"
1947,classify(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\eval\classification\Classifier.java,neuroph,12,46,26,3,0.2361,0.1372,0.5,5,4,"public String classify(double[] pattern){
  NeuralNetwork<?> nnet=getParentNetwork();
  nnet.setInput(pattern);
  nnet.calculate();
  Neuron maxNeuron=null;
  double maxOutput=Double.MIN_VALUE;
  for (  Neuron neuron : nnet.getOutputNeurons()) {
    if (neuron.getOutput() > maxOutput) {
      maxOutput=neuron.getOutput();
      maxNeuron=neuron;
    }
  }
  if (maxOutput > threshold)   return maxNeuron.getLabel();
 else   return null;
}
"
1953,toString(),D:\temp\case study\neuroph-2.94\org\neuroph\eval\classification\ConfusionMatrix.java,neuroph,14,51,11,3,0.2013,0.1823,0,7,5,"@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  int maxColumnLenght=STRING_DEFAULT_WIDTH;
  for (  String label : classLabels)   maxColumnLenght=Math.max(maxColumnLenght,label.length());
  builder.append(String.format(""%1$"" + maxColumnLenght + ""s"",""""));
  for (  String label : classLabels)   builder.append(String.format(""%1$"" + maxColumnLenght + ""s"",label));
  builder.append(""\n"");
  for (int i=0; i < values.length; i++) {
    builder.append(String.format(""%1$"" + maxColumnLenght + ""s"",classLabels[i]));
    for (int j=0; j < values[0].length; j++) {
      builder.append(String.format(""%1$"" + maxColumnLenght + ""s"",values[i][j]));
    }
    builder.append(""\n"");
  }
  return builder.toString();
}
"
1961,"evaluateNetworks(NeuralNetwork,NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\eval\classification\McNemarTest.java,neuroph,25,260,220,7,0.1067,0.064,0.833333333,12,5,"/** 
 * @param network1 first trained neurl netowrk
 * @param network2 second trained neural network
 * @param dataSet  data set used for performance evaluation
 * @return if there exists significant difference between two classification models
 */
public boolean evaluateNetworks(NeuralNetwork network1,NeuralNetwork network2,DataSet dataSet){
  for (  DataSetRow dataRow : dataSet.getRows()) {
    forwardPass(network1,dataRow);
    forwardPass(network2,dataRow);
    double[] networkOutput1=network1.getOutput();
    double[] networkOutput2=network2.getOutput();
    int maxNeuronIdx1=Utils.maxIdx(networkOutput1);
    int maxNeuronIdx2=Utils.maxIdx(networkOutput2);
    ClassificationResult output1=new ClassificationResult(maxNeuronIdx1,networkOutput1[maxNeuronIdx1]);
    ClassificationResult output2=new ClassificationResult(maxNeuronIdx2,networkOutput2[maxNeuronIdx2]);
    if (output1.getClassIdx() != output2.getClassIdx()) {
      if (output1.getClassIdx() == getDesiredClass(dataRow.getDesiredOutput())) {
        contigencyMatrix[1][0]++;
      }
 else {
        contigencyMatrix[0][1]++;
      }
    }
 else {
      if (output1.getClassIdx() == getDesiredClass(dataRow.getDesiredOutput())) {
        contigencyMatrix[1][1]++;
      }
 else {
        contigencyMatrix[0][0]++;
      }
    }
  }
  printContingencyMatrix();
  double a=Math.abs(contigencyMatrix[0][1] - contigencyMatrix[1][0]) - 1;
  double hiSquare=(a * a) / (contigencyMatrix[0][1] + contigencyMatrix[1][0]);
  System.out.println(hiSquare);
  return hiSquare > 3.841;
}
"
1962,printContingencyMatrix(),D:\temp\case study\neuroph-2.94\org\neuroph\eval\classification\McNemarTest.java,neuroph,6,14,13,5,0.2222,0.0417,0,2,3,"private void printContingencyMatrix(){
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 2; j++) {
      System.out.print(contigencyMatrix[i][j] + "" "");
    }
    System.out.println();
  }
}
"
1966,average(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\eval\classification\Utils.java,neuroph,6,10,5,3,0.3889,0.1429,0,3,2,"public static double average(double[] array){
  double accumulator=0;
  for (  double element : array) {
    accumulator+=element;
  }
  return accumulator / array.length;
}
"
1967,maxIdx(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\eval\classification\Utils.java,neuroph,6,11,7,3,0.3889,0.1667,0,3,3,"public static int maxIdx(double[] array){
  int maxIdx=0;
  for (int i=1; i < array.length; i++) {
    if (array[i] > array[maxIdx])     maxIdx=i;
  }
  return maxIdx;
}
"
1977,processImageTest(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\ImageFilterChain.java,neuroph,11,42,29,3,0.2045,0.0932,1,7,2,"/** 
 * Returns images of all stages in processing
 * Used for testing 
 * @param image
 * @return 
 */
public List<FilteredImage> processImageTest(BufferedImage image){
  List<FilteredImage> list=new ArrayList<FilteredImage>();
  BufferedImage tempImage=image;
  for (  ImageFilter filter : filters) {
    BufferedImage processedImage=filter.processImage(tempImage);
    String filterName=filter.toString();
    FilteredImage filteredImage=new FilteredImage(processedImage,filterName);
    list.add(filteredImage);
    tempImage=processedImage;
  }
  return list;
}
"
2017,imageTypeToBitmapConfig(int),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\image\ImageAndroid.java,neuroph,12,56,46,3,0.4167,0.2222,0,2,4,"private Bitmap.Config imageTypeToBitmapConfig(int imageType) throws IllegalArgumentException {
  Bitmap.Config bitmapConfig=null;
switch (imageType) {
case ImageType.ANDROID_TYPE_ALPHA_8:
    bitmapConfig=Bitmap.Config.ALPHA_8;
  break;
case ImageType.ANDROID_TYPE_ARGB_8888:
bitmapConfig=Bitmap.Config.ARGB_8888;
break;
case ImageType.ANDROID_TYPE_RGB_565:
bitmapConfig=Bitmap.Config.RGB_565;
break;
default :
throw new IllegalArgumentException(""Illegal image type, image type: "" + imageType);
}
return bitmapConfig;
}
"
2019,"createImage(Integer,Integer,Integer)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\image\ImageFactory.java,neuroph,8,25,22,5,0.1719,0.0537,0,4,2,"public static Image createImage(Integer width,Integer height,Integer imageType){
  try {
    constructor=imageClass.getDeclaredConstructor(new Class[]{Integer.class,Integer.class,Integer.class});
    constructor.setAccessible(true);
    image=(Image)constructor.newInstance(width,height,imageType);
  }
 catch (  Exception e) {
    handleException(e);
  }
  return image;
}
"
2043,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\samples\ImageRecognitionSample.java,neuroph,7,20,19,6,0.1786,0.0278,0.666666667,6,3,"public static void main(String[] args){
  NeuralNetwork nnet=NeuralNetwork.createFromFile(""MyImageRecognition.nnet"");
  ImageRecognitionPlugin imageRecognition=(ImageRecognitionPlugin)nnet.getPlugin(ImageRecognitionPlugin.class);
  try {
    HashMap<String,Double> output=imageRecognition.recognizeImage(new File(""someImage.jpg""));
    System.out.println(output.toString());
  }
 catch (  IOException ioe) {
    System.out.println(""Error: could not read file!"");
  }
catch (  VectorSizeMismatchException vsme) {
    System.out.println(""Error: Image dimensions dont !"");
  }
}
"
2045,"fullConnectMapLayers(FeatureMapsLayer,FeatureMapsLayer)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\ConvolutionalUtils.java,neuroph,12,38,10,3,0.2315,0.1426,0.333333333,9,6,"/** 
 * Creates full connectivity between feature maps in two layers
 * @param fromLayer from feature maps layer
 * @param toLayer   to feature maps layer
 */
public static void fullConnectMapLayers(FeatureMapsLayer fromLayer,FeatureMapsLayer toLayer){
  if (toLayer instanceof ConvolutionalLayer) {
    for (int i=0; i < fromLayer.getNumberOfMaps(); i++) {
      for (int j=0; j < toLayer.getNumberOfMaps(); j++) {
        FeatureMapLayer fromMap=fromLayer.getFeatureMap(i);
        FeatureMapLayer toMap=toLayer.getFeatureMap(j);
        toLayer.connectMaps(fromMap,toMap);
      }
    }
  }
 else   if (toLayer instanceof PoolingLayer) {
    for (int i=0; i < toLayer.getNumberOfMaps(); i++) {
      FeatureMapLayer fromMap=fromLayer.getFeatureMap(i);
      FeatureMapLayer toMap=toLayer.getFeatureMap(i);
      toLayer.connectMaps(fromMap,toMap);
    }
  }
}
"
2066,"initWeights(double,double)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\Kernel.java,neuroph,8,20,12,3,0.2222,0.0627,0.5,5,3,"public void initWeights(double min,double max){
  weights=new Weight[height][width];
  for (int i=0; i < height; i++) {
    for (int j=0; j < width; j++) {
      Weight weight=new Weight();
      weight.randomize(min,max);
      weights[i][j]=weight;
    }
  }
}
"
2067,updateNeuronWeights(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\AntiHebbianLearning.java,neuroph,7,14,7,3,0.3143,0.1042,0.6,6,2,"/** 
 * This method implements weights update procedure for the single neuron
 * @param neuronneuron to update weights
 */
@Override protected void updateNeuronWeights(Neuron neuron){
  double output=neuron.getOutput();
  for (  Connection connection : neuron.getInputConnections()) {
    double input=connection.getInput();
    double deltaWeight=input * output * this.learningRate;
    connection.getWeight().dec(deltaWeight);
  }
}
"
2070,calculateErrorAndUpdateOutputNeurons(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\BackPropagation.java,neuroph,14,66,41,4,0.1786,0.1398,0.666666667,7,3,"/** 
 * This method implements weights update procedure for the output neurons
 * Calculates delta/error and calls updateNeuronWeights to update neuron's weights
 * for each output neuron
 * @param outputError error vector for output neurons
 */
protected void calculateErrorAndUpdateOutputNeurons(double[] outputError){
  int i=0;
  List<Neuron> outputNeurons=neuralNetwork.getOutputNeurons();
  for (  Neuron neuron : outputNeurons) {
    if (outputError[i] == 0) {
      neuron.setError(0);
      i++;
      continue;
    }
    TransferFunction transferFunction=neuron.getTransferFunction();
    double neuronInput=neuron.getNetInput();
    double delta=outputError[i] * transferFunction.getDerivative(neuronInput);
    neuron.setError(delta);
    updateNeuronWeights(neuron);
    i++;
  }
}
"
2071,calculateErrorAndUpdateHiddenNeurons(),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\BackPropagation.java,neuroph,8,19,10,3,0.3,0.1512,1,4,3,"/** 
 * This method implements weights adjustment for the hidden layers
 */
protected void calculateErrorAndUpdateHiddenNeurons(){
  List<Layer> layers=neuralNetwork.getLayers();
  for (int layerIdx=layers.size() - 2; layerIdx > 0; layerIdx--) {
    for (    Neuron neuron : layers.get(layerIdx).getNeurons()) {
      double delta=calculateHiddenNeuronError(neuron);
      neuron.setError(delta);
      updateNeuronWeights(neuron);
    }
  }
}
"
2072,calculateHiddenNeuronError(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\BackPropagation.java,neuroph,11,43,31,3,0.2045,0.0701,0.428571429,9,2,"/** 
 * Calculates and returns the neuron's error (neuron's delta) for the given neuron param
 * @param neuron neuron to calculate error for
 * @return neuron error (delta) for the specified neuron
 */
protected double calculateHiddenNeuronError(Neuron neuron){
  double deltaSum=0d;
  for (  Connection connection : neuron.getOutConnections()) {
    double delta=connection.getToNeuron().getError() * connection.getWeight().value;
    deltaSum+=delta;
  }
  TransferFunction transferFunction=neuron.getTransferFunction();
  double netInput=neuron.getNetInput();
  double f1=transferFunction.getDerivative(netInput);
  double delta=f1 * deltaSum;
  return delta;
}
"
2074,calculateWeightChanges(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\BinaryDeltaRule.java,neuroph,14,73,55,4,0.1429,0.0742,0.8,10,2,"/** 
 * This method implements weight update procedure for the whole network for
 * this learning rule
 * @param patternErrorsingle pattern error vector
 * if the output is 0 and required value is 1, increase rthe weights
 * if the output is 1 and required value is 0, decrease the weights
 * otherwice leave weights unchanged
 */
@Override protected void calculateWeightChanges(double[] patternError){
  int i=0;
  List<Neuron> outputNeurons=neuralNetwork.getOutputNeurons();
  for (  Neuron outputNeuron : outputNeurons) {
    ThresholdNeuron neuron=(ThresholdNeuron)outputNeuron;
    double outErr=patternError[i];
    double thresh=neuron.getThresh();
    double netInput=neuron.getNetInput();
    double threshError=thresh - netInput;
    double neuronError=outErr * (Math.abs(threshError) + errorCorrection);
    neuron.setError(neuronError);
    updateNeuronWeights(neuron);
    i++;
  }
}
"
2078,updateNeuronWeights(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\BinaryHebbianLearning.java,neuroph,8,19,10,3,0.3,0.1358,0.5,6,6,"/** 
 * This method implements weights update procedure for the single neuron
 * @param neuronneuron to update weights
 */
@Override protected void updateNeuronWeights(Neuron neuron){
  double output=neuron.getOutput();
  for (  Connection connection : neuron.getInputConnections()) {
    double input=connection.getInput();
    if (((input > 0) && (output > 0)) || ((input <= 0) && (output <= 0))) {
      connection.getWeight().inc(this.learningRate);
    }
 else {
      connection.getWeight().dec(this.learningRate);
    }
  }
}
"
2081,updateNetworkWeights(),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\CompetitiveLearning.java,neuroph,6,6,0,2,0.3667,0.1833,0.714285714,7,2,"/** 
 * Adjusts weights for the winning neuron
 */
protected void updateNetworkWeights(){
  CompetitiveNeuron winningNeuron=((CompetitiveLayer)neuralNetwork.getLayerAt(1)).getWinner();
  List<Connection> inputConnections=winningNeuron.getConnectionsFromOtherLayers();
  for (  Connection connection : inputConnections) {
    double weight=connection.getWeight().getValue();
    double input=connection.getInput();
    double deltaWeight=this.learningRate * (input - weight);
    connection.getWeight().inc(deltaWeight);
  }
}
"
2082,calculateErrorAndUpdateHiddenNeurons(),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\ConvolutionalBackpropagation.java,neuroph,9,24,12,3,0.2963,0.1605,1,4,4,"@Override protected void calculateErrorAndUpdateHiddenNeurons(){
  List<Layer> layers=neuralNetwork.getLayers();
  for (int layerIdx=layers.size() - 2; layerIdx > 0; layerIdx--) {
    for (    Neuron neuron : layers.get(layerIdx).getNeurons()) {
      double neuronError=this.calculateHiddenNeuronError(neuron);
      neuron.setError(neuronError);
      if (layers.get(layerIdx) instanceof ConvolutionalLayer) {
        this.updateNeuronWeights(neuron);
      }
    }
  }
}
"
2083,calculateHiddenNeuronError(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\ConvolutionalBackpropagation.java,neuroph,8,20,12,2,0.3125,0.1667,0.4,5,3,"@Override protected double calculateHiddenNeuronError(Neuron neuron){
  if (neuron.getParentLayer() instanceof ConvolutionalLayer) {
    return super.calculateHiddenNeuronError(neuron);
  }
  double deltaSum=0d;
  for (  Connection connection : neuron.getOutConnections()) {
    double delta=connection.getToNeuron().getError() * connection.getWeight().value;
    deltaSum+=delta;
  }
  return deltaSum;
}
"
2104,updateNeuronWeights(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\GeneralizedHebbianLearning.java,neuroph,8,18,8,3,0.2917,0.1037,0.5,7,2,"/** 
 * This method implements weights update procedure for the single neuron
 * @param neuronneuron to update weights
 */
@Override protected void updateNeuronWeights(Neuron neuron){
  double output=neuron.getOutput();
  for (  Connection connection : neuron.getInputConnections()) {
    double input=connection.getInput();
    double netInput=neuron.getNetInput();
    double deltaWeight=(input - netInput) * output * this.learningRate;
    connection.getWeight().inc(deltaWeight);
  }
}
"
2106,learn(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\HopfieldLearning.java,neuroph,19,140,109,3,0.1283,0.0536,0.777777778,15,5,"/** 
 * Calculates weights for the hopfield net to learn the specified training
 * set
 * @param trainingSettraining set to learn
 */
public void learn(DataSet trainingSet){
  int M=trainingSet.size();
  int N=neuralNetwork.getLayerAt(0).getNeuronsCount();
  Layer hopfieldLayer=neuralNetwork.getLayerAt(0);
  for (int i=0; i < N; i++) {
    for (int j=0; j < N; j++) {
      if (j == i)       continue;
      Neuron ni=hopfieldLayer.getNeuronAt(i);
      Neuron nj=hopfieldLayer.getNeuronAt(j);
      Connection cij=nj.getConnectionFrom(ni);
      Connection cji=ni.getConnectionFrom(nj);
      double w=0;
      for (int k=0; k < M; k++) {
        DataSetRow trainingSetRow=trainingSet.getRowAt(k);
        double pki=trainingSetRow.getInput()[i];
        double pkj=trainingSetRow.getInput()[j];
        w=w + pki * pkj;
      }
      cij.getWeight().setValue(w);
      cji.getWeight().setValue(w);
    }
  }
}
"
2108,updateNeuronWeights(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\InstarLearning.java,neuroph,8,19,10,3,0.2321,0.1049,0.5,7,2,"/** 
 * This method implements weights update procedure for the single neuron
 * @param neuronneuron to update weights for
 */
@Override protected void updateNeuronWeights(Neuron neuron){
  double output=neuron.getOutput();
  for (  Connection connection : neuron.getInputConnections()) {
    double input=connection.getInput();
    double weight=connection.getWeight().getValue();
    double deltaWeight=this.learningRate * output * (input - weight);
    connection.getWeight().inc(deltaWeight);
  }
}
"
2110,learn(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\KohonenLearning.java,neuroph,11,47,39,4,0.1405,0.05,0.75,5,6,"@Override public void learn(DataSet trainingSet){
  for (int phase=0; phase < 2; phase++) {
    for (int k=0; k < iterations[phase]; k++) {
      Iterator<DataSetRow> iterator=trainingSet.iterator();
      while (iterator.hasNext() && !isStopped()) {
        DataSetRow trainingSetRow=iterator.next();
        learnPattern(trainingSetRow,nR[phase]);
      }
      currentIteration=k;
      fireLearningEvent(new LearningEvent(this,LearningEvent.Type.EPOCH_ENDED));
      if (isStopped())       return;
    }
    learningRate=learningRate * 0.5;
  }
}
"
2111,"learnPattern(DataSetRow,int)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\KohonenLearning.java,neuroph,14,66,41,2,0.1905,0.1092,0.5,8,5,"private void learnPattern(DataSetRow dataSetRow,int neighborhood){
  neuralNetwork.setInput(dataSetRow.getInput());
  neuralNetwork.calculate();
  Neuron winner=getClosestNeuron();
  if (winner.getOutput() == 0)   return;
  Layer mapLayer=neuralNetwork.getLayerAt(1);
  int winnerIdx=mapLayer.indexOf(winner);
  adjustCellWeights(winner,0);
  int cellNum=mapLayer.getNeuronsCount();
  for (int p=0; p < cellNum; p++) {
    if (p == winnerIdx)     continue;
    if (isNeighbor(winnerIdx,p,neighborhood)) {
      Neuron cell=mapLayer.getNeuronAt(p);
      adjustCellWeights(cell,1);
    }
  }
}
"
2114,"isNeighbor(int,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\KohonenLearning.java,neuroph,24,199,122,4,0.1577,0.0939,0,12,8,"private boolean isNeighbor(int i,int j,int n){
  n=1;
  int d=mapSize;
  int rt=n;
  while ((i - rt * d) < 0) {
    rt--;
  }
  int rb=n;
  while ((i + rb * d) > (d * d - 1)) {
    rb--;
  }
  for (int g=-rt; g <= rb; g++) {
    int rl=n;
    int rlMod=(i - rl) % d;
    int i_mod=i % d;
    while (rlMod > i_mod) {
      rl--;
      rlMod=(i - rl) % d;
    }
    int rd=n;
    int rdMod=(i + rd) % d;
    while (rdMod < i_mod) {
      rd--;
      rdMod=(i + rd) % d;
    }
    if ((j >= (i + g * d - rl)) && (j <= (i + g * d + rd)))     return true;
  }
  return false;
}
"
2122,calculateWeightChanges(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\LMS.java,neuroph,8,21,14,3,0.25,0.1142,1,4,2,"/** 
 * This method implements the weights update procedure for the whole network
 * for the given output error vector.
 * @param outputErroroutput error vector for some network input- the difference between desired and actual output
 * @see SupervisedLearning#learnPattern(org.neuroph.core.data.DataSetRow)  learnPattern
 */
@Override protected void calculateWeightChanges(double[] outputError){
  int i=0;
  List<Neuron> outputNeurons=neuralNetwork.getOutputNeurons();
  for (  Neuron neuron : outputNeurons) {
    neuron.setError(outputError[i]);
    updateNeuronWeights(neuron);
    i++;
  }
}
"
2125,updateNeuronWeights(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\MomentumBackpropagation.java,neuroph,15,86,67,6,0.175,0.0811,0.666666667,7,4,"/** 
 * This method implements weights update procedure for the single neuron for
 * the back propagation with momentum factor
 * @param neuron neuron to update weights
 */
@Override public void updateNeuronWeights(Neuron neuron){
  for (  Connection connection : neuron.getInputConnections()) {
    double input=connection.getInput();
    if (input == 0) {
      continue;
    }
    double neuronDelta=neuron.getError();
    Weight<MomentumTrainingData> weight=connection.getWeight();
    MomentumTrainingData weightTrainingData=weight.getTrainingData();
    double weightChange=-learningRate * neuronDelta * input + momentum * weightTrainingData.previousWeightChange;
    weightTrainingData.previousWeightChange=weight.weightChange;
    if (isBatchMode() == false) {
      weight.weightChange=weightChange;
    }
 else {
      weight.weightChange+=weightChange;
    }
  }
}
"
2130,updateNeuronWeights(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\OjaLearning.java,neuroph,8,17,6,3,0.2917,0.116,0.5,7,2,"/** 
 * This method implements weights update procedure for the single neuron
 * @param neuronneuron to update weights
 */
@Override protected void updateNeuronWeights(Neuron neuron){
  double output=neuron.getOutput();
  for (  Connection connection : neuron.getInputConnections()) {
    double input=connection.getInput();
    double weight=connection.getWeight().getValue();
    double deltaWeight=(input - output * weight) * output * this.learningRate;
    connection.getWeight().inc(deltaWeight);
  }
}
"
2132,updateNeuronWeights(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\OutstarLearning.java,neuroph,8,19,10,3,0.2321,0.1049,0.5,7,2,"/** 
 * This method implements weights update procedure for the single neuron
 * @param neuronneuron to update weights for
 */
@Override protected void updateNeuronWeights(Neuron neuron){
  double output=neuron.getOutput();
  for (  Connection connection : neuron.getInputConnections()) {
    double input=connection.getInput();
    double weight=connection.getWeight().getValue();
    double deltaWeight=this.learningRate * input * (output - weight);
    connection.getWeight().inc(deltaWeight);
  }
}
"
2135,updateNeuronWeights(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\QuickPropagation.java,neuroph,30,333,231,9,0.1639,0.0898,0.6,10,10,"@Override public void updateNeuronWeights(Neuron neuron){
  double delta=neuron.getError();
  for (  Connection con : neuron.getInputConnections()) {
    Weight<QuickPropData> w=con.getWeight();
    QuickPropData qpData=w.getTrainingData();
    double input=con.getInput();
    if (input == 0)     continue;
    double gradient=delta * input;
    double previousWeightChange=qpData.previousWeightChange;
    double prevGradient=qpData.prevGradient;
    double currentWeightChange=0;
    if ((prevGradient * gradient > 0) && (gradient < prevGradient)) {
      currentWeightChange=(gradient / (prevGradient - gradient)) * previousWeightChange;
      if (Math.abs(currentWeightChange) >= Math.abs((maximumGrowthFactor * previousWeightChange))) {
        currentWeightChange=maximumGrowthFactor * previousWeightChange;
      }
    }
 else     if ((prevGradient * gradient > 0) && (gradient >= prevGradient)) {
      currentWeightChange=maximumGrowthFactor * previousWeightChange;
    }
 else     if (prevGradient * gradient < 0) {
      currentWeightChange=(gradient / (prevGradient - gradient)) * previousWeightChange;
      if (Math.abs(currentWeightChange) >= Math.abs((maximumGrowthFactor * previousWeightChange))) {
        currentWeightChange=maximumGrowthFactor * previousWeightChange;
      }
    }
 else {
      currentWeightChange=-learningRate * delta * input;
    }
    w.weightChange+=currentWeightChange;
    qpData.previousWeightChange=currentWeightChange;
    qpData.prevGradient=gradient;
  }
}
"
2138,"calculateSigma(KVector,KVector[])",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\RBFLearning.java,neuroph,7,13,5,3,0.3143,0.1508,1,4,2,"/** 
 * Calculates and returns  width of a gaussian function
 * @param centroid
 * @param nearestNeighbours
 * @return 
 */
private double calculateSigma(KVector centroid,KVector[] nearestNeighbours){
  double sigma=0;
  for (  KVector nn : nearestNeighbours) {
    sigma+=Math.pow(centroid.distanceFrom(nn),2);
  }
  sigma=Math.sqrt(1 / ((double)nearestNeighbours.length) * sigma);
  return sigma;
}
"
2142,updateNeuronWeights(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\ResilientPropagation.java,neuroph,9,26,16,3,0.2593,0.0929,0.6,6,3,"/** 
 * Calculate and sum gradients for each neuron's weight, the actual weight update is done in batch mode.
 * @see ResilientPropagation#resillientWeightUpdate(org.neuroph.core.Weight) 
 */
@Override public void updateNeuronWeights(Neuron neuron){
  for (  Connection connection : neuron.getInputConnections()) {
    double input=connection.getInput();
    if (input == 0) {
      continue;
    }
    double neuronError=neuron.getError();
    Weight weight=connection.getWeight();
    ResilientWeightTrainingtData weightData=(ResilientWeightTrainingtData)weight.getTrainingData();
    weightData.gradient+=-neuronError * input;
  }
}
"
2143,doBatchWeightsUpdate(),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\ResilientPropagation.java,neuroph,7,15,9,2,0.2857,0.0913,0.8,5,4,"@Override protected void doBatchWeightsUpdate(){
  List<Layer> layers=neuralNetwork.getLayers();
  for (int i=neuralNetwork.getLayersCount() - 1; i > 0; i--) {
    for (    Neuron neuron : layers.get(i).getNeurons()) {
      for (      Connection connection : neuron.getInputConnections()) {
        Weight weight=connection.getWeight();
        resillientWeightUpdate(weight);
      }
    }
  }
}
"
2144,resillientWeightUpdate(Weight),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\ResilientPropagation.java,neuroph,17,47,0,3,0.2157,0.3161,1,5,4,"/** 
 * Weight update by done by ResilientPropagation  learning rule
 * Executed at the end of epoch (in batch mode)
 * @param weight 
 */
protected void resillientWeightUpdate(Weight weight){
  ResilientWeightTrainingtData weightData=(ResilientWeightTrainingtData)weight.getTrainingData();
  int gradientSignChange=sign(weightData.previousGradient * weightData.gradient);
  double weightChange=0;
  double delta;
  if (gradientSignChange > 0) {
    delta=Math.min(weightData.previousDelta * increaseFactor,maxDelta);
    weightChange=sign(weightData.gradient) * delta;
    weightData.previousDelta=delta;
  }
 else   if (gradientSignChange < 0) {
    delta=Math.max(weightData.previousDelta * decreaseFactor,minDelta);
    weightChange=-weightData.previousWeightChange;
    weightData.gradient=0;
    weightData.previousGradient=0;
    weightData.previousDelta=delta;
  }
 else   if (gradientSignChange == 0) {
    delta=weightData.previousDelta;
    weightChange=sign(weightData.gradient) * delta;
  }
  weightData.previousWeightChange=weightChange;
  weightData.previousGradient=weightData.gradient;
  weightData.gradient=0;
}
"
2157,calculateWeightChanges(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\SigmoidDeltaRule.java,neuroph,13,54,30,4,0.1978,0.1591,0.666666667,6,3,"/** 
 * This method implements weight update procedure for the whole network for
 * this learning rule
 * @param outputErroroutput error vector
 */
@Override protected void calculateWeightChanges(double[] outputError){
  int i=0;
  for (  Neuron neuron : neuralNetwork.getOutputNeurons()) {
    if (outputError[i] == 0) {
      neuron.setError(0);
      i++;
      continue;
    }
    TransferFunction transferFunction=neuron.getTransferFunction();
    double neuronInput=neuron.getNetInput();
    double delta=outputError[i] * transferFunction.getDerivative(neuronInput);
    neuron.setError(delta);
    updateNeuronWeights(neuron);
    i++;
  }
}
"
2161,randomize(double),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\SimulatedAnnealingLearning.java,neuroph,7,11,1,2,0.2679,0.1333,1,10,3,"/** 
 * Randomize the weights and thresholds. This function does most of the work
 * of the class. Each call to this class will randomize the data according
 * to the current temperature. The higher the temperature the more
 * randomness.
 * @param randomChance 
 */
public void randomize(double randomChance){
  for (int i=0; i < this.weights.length; i++)   if (Math.random() < randomChance) {
    double add=0.5 - (Math.random());
    add/=this.startTemperature;
    add*=this.temperature;
    this.weights[i]=this.weights[i] + add;
  }
  NeuralNetworkCODEC.array2network(this.weights,getNetwork());
}
"
2162,determineError(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\SimulatedAnnealingLearning.java,neuroph,17,117,98,3,0.1412,0.0541,0.666666667,10,4,"/** 
 * Used internally to calculate the error for a training set.
 * @param trainingSet The training set to calculate for.
 * @return The error value.
 */
private double determineError(DataSet trainingSet){
  double result=0d;
  Iterator<DataSetRow> iterator=trainingSet.iterator();
  while (iterator.hasNext() && !isStopped()) {
    DataSetRow trainingSetRow=iterator.next();
    double[] input=trainingSetRow.getInput();
    getNetwork().setInput(input);
    getNetwork().calculate();
    double[] output=getNetwork().getOutput();
    double[] desiredOutput=trainingSetRow.getDesiredOutput();
    double[] patternError=getErrorFunction().addPatternError(desiredOutput,output);
    double sqrErrorSum=0;
    for (    double error : patternError) {
      sqrErrorSum+=(error * error);
    }
    result+=sqrErrorSum / (2 * patternError.length);
  }
  return result;
}
"
2164,"doLearningEpoch(DataSet,double)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\SimulatedAnnealingLearning.java,neuroph,13,68,58,7,0.1302,0.0547,1,27,4,"public void doLearningEpoch(DataSet trainingSet,double randomChance){
  System.arraycopy(this.weights,0,this.bestWeights,0,this.weights.length);
  double bestError=determineError(trainingSet);
  this.temperature=this.startTemperature;
  for (int i=0; i < this.cycles; i++) {
    randomize(randomChance);
    double currentError=determineError(trainingSet);
    if (currentError < bestError) {
      System.arraycopy(this.weights,0,this.bestWeights,0,this.weights.length);
      bestError=currentError;
    }
 else     System.arraycopy(this.bestWeights,0,this.weights,0,this.weights.length);
    NeuralNetworkCODEC.array2network(this.bestWeights,getNetwork());
    final double ratio=Math.exp(Math.log(this.stopTemperature / this.startTemperature) / (this.cycles - 1));
    this.temperature*=ratio;
  }
  this.previousEpochError=getErrorFunction().getTotalError();
  if (hasReachedStopCondition()) {
    stopLearning();
  }
}
"
2168,"updateNeuronWeights(Neuron,double)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\SupervisedHebbianLearning.java,neuroph,6,10,5,3,0.3,0.1071,0.75,6,2,"/** 
 * This method implements weights update procedure for the single neuron
 * @param neuronneuron to update weights
 * desiredOutput
 * desired output of the neuron
 */
protected void updateNeuronWeights(Neuron neuron,double desiredOutput){
  for (  Connection connection : neuron.getInputConnections()) {
    double input=connection.getInput();
    double deltaWeight=input * desiredOutput * this.learningRate;
    connection.getWeight().inc(deltaWeight);
  }
}
"
2172,updateNeuronWeights(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\UnsupervisedHebbianLearning.java,neuroph,7,14,7,3,0.3143,0.1042,0.6,6,2,"/** 
 * This method implements weights update procedure for the single neuron
 * @param neuronneuron to update weights
 */
protected void updateNeuronWeights(Neuron neuron){
  double output=neuron.getOutput();
  for (  Connection connection : neuron.getInputConnections()) {
    double input=connection.getInput();
    double deltaWeight=input * output * this.learningRate;
    connection.getWeight().inc(deltaWeight);
  }
}
"
2176,processImage(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\filter\OCRCropLetter.java,neuroph,7,17,13,3,0.2571,0.0476,0,2,1,"/** 
 * You <b>must</b> set newHeight and newWidth before calling this method
 * @param image image with single letter on it
 * @return image with centered letter
 */
public BufferedImage processImage(BufferedImage image){
  this.originalImage=image;
  prepareParameters();
  return processImage();
}
"
2177,createStartH(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\filter\OCRCropLetter.java,neuroph,11,44,33,3,0.1717,0.0778,0,5,4,"private int createStartH(){
  int color;
  int black=0;
  int startH=0;
  loop:   for (int i=0; i < height; i++) {
    for (int j=0; j < width; j++) {
      color=new Color(originalImage.getRGB(j,i)).getRed();
      if (color == black) {
        startH=i;
        break loop;
      }
    }
  }
  return startH;
}
"
2178,createStartW(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\filter\OCRCropLetter.java,neuroph,11,44,33,3,0.1717,0.0778,0,5,4,"private int createStartW(){
  int color;
  int black=0;
  int startW=0;
  loop:   for (int j=0; j < width; j++) {
    for (int i=0; i < height; i++) {
      color=new Color(originalImage.getRGB(j,i)).getRed();
      if (color == black) {
        startW=j;
        break loop;
      }
    }
  }
  return startW;
}
"
2179,createEndH(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\filter\OCRCropLetter.java,neuroph,11,44,33,3,0.1717,0.0778,0,5,4,"private int createEndH(){
  int color;
  int black=0;
  int endH=0;
  loop:   for (int i=height - 1; i >= 0; i--) {
    for (int j=width - 1; j >= 0; j--) {
      color=new Color(originalImage.getRGB(j,i)).getRed();
      if (color == black) {
        endH=i;
        break loop;
      }
    }
  }
  return endH;
}
"
2180,createEndW(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\filter\OCRCropLetter.java,neuroph,11,44,33,3,0.1717,0.0778,0,5,4,"private int createEndW(){
  int color;
  int black=0;
  int endW=0;
  loop:   for (int j=width - 1; j >= 0; j--) {
    for (int i=height - 1; i >= 0; i--) {
      color=new Color(originalImage.getRGB(j,i)).getRed();
      if (color == black) {
        endW=j;
        break loop;
      }
    }
  }
  return endW;
}
"
2181,"fillImage(int,int,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\filter\OCRCropLetter.java,neuroph,32,434,372,5,0.0689,0.0349,1,27,8,"private void fillImage(int startH,int startW,int endH,int endW){
  int alpha=new Color(originalImage.getRGB(width / 2,height / 2)).getRed();
  int whiteRGB=ImageUtilities.colorToRGB(alpha,255,255,255);
  for (int i=0; i < newHeight; i++) {
    for (int j=0; j < newWidth; j++) {
      filteredImage.setRGB(j,i,whiteRGB);
    }
  }
  int oldCenterH=(startH + endH) / 2;
  int oldCenterW=(startW + endW) / 2;
  int newCenterH=newHeight / 2;
  int newCenterW=newWidth / 2;
  boolean[][] visited=new boolean[newHeight][newWidth];
  LinkedList<String> queue=new LinkedList<String>();
  String pos=newCenterH + "" "" + newCenterW+ "" ""+ oldCenterH+ "" ""+ oldCenterW;
  queue.addLast(pos);
  visited[newCenterH][newCenterW]=true;
  try {
    while (!queue.isEmpty()) {
      String tmp=queue.removeFirst();
      int nh=Integer.parseInt(tmp.split("" "")[0]);
      int nw=Integer.parseInt(tmp.split("" "")[1]);
      int oh=Integer.parseInt(tmp.split("" "")[2]);
      int ow=Integer.parseInt(tmp.split("" "")[3]);
      filteredImage.setRGB(nw,nh,originalImage.getRGB(ow,oh));
      for (int i=-1; i <= 1; i++) {
        for (int j=-1; j <= 1; j++) {
          int n_tmpH=nh + i;
          int n_tmpW=nw + j;
          int o_tmpH=oh + i;
          int o_tmpW=ow + j;
          if (!visited[n_tmpH][n_tmpW]) {
            visited[n_tmpH][n_tmpW]=true;
            queue.addLast(n_tmpH + "" "" + n_tmpW+ "" ""+ o_tmpH+ "" ""+ o_tmpW);
          }
        }
      }
    }
  }
 catch (  IndexOutOfBoundsException e) {
  }
}
"
2190,"extraxtLetter(BufferedImage,boolean[][],int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\filter\OCRExtractLetter.java,neuroph,38,612,521,4,0.0763,0.0393,0,25,13,"/** 
 * @param image image with whole text
 * @param visited matrix of boolean, size of the matrix should correspond to size of the image with text. This matrix is used like in BFS traversal.
 * @param startX starting point on X coordinate where the black pixel is found
 * @param startY starting point on Y coordinate where the black pixel is found
 * @return new image with extracted letter only if number of pixel in that letter is greater than trashSize 
 */
public BufferedImage extraxtLetter(BufferedImage image,boolean[][] visited,int startX,int startY){
  int gapWidth=cropWidth / 5 * 2;
  int gapHeight=cropHeight / 5 * 2;
  LinkedList<String> queue=new LinkedList<String>();
  BufferedImage letter=new BufferedImage(cropWidth,cropHeight,image.getType());
  Color white=Color.WHITE;
  Color black=Color.BLACK;
  for (int i=0; i < cropHeight; i++) {
    for (int j=0; j < cropWidth; j++) {
      letter.setRGB(j,i,white.getRGB());
    }
  }
  int countPixels=0;
  String positions=startX + "" "" + startY;
  visited[startX][startY]=true;
  queue.addLast(positions);
  while (!queue.isEmpty()) {
    String pos=queue.removeFirst();
    String[] posArray=pos.split("" "");
    int H=Integer.parseInt(posArray[0]);
    int W=Integer.parseInt(posArray[1]);
    visited[H][W]=true;
    int posW=W - startY + gapWidth;
    int posH=H - startX + gapHeight;
    countPixels++;
    letter.setRGB(posW,posH,black.getRGB());
    int color;
    int blackInt=0;
    for (int i=H - 1; i <= H + 1; i++) {
      for (int j=W - 1; j <= W + 1; j++) {
        if (i >= 0 && j >= 0 && i < image.getHeight() && j < image.getWidth()) {
          if (!visited[i][j]) {
            color=new Color(image.getRGB(j,i)).getRed();
            if (color == blackInt) {
              visited[i][j]=true;
              String tmpPos=i + "" "" + j;
              queue.addLast(tmpPos);
            }
          }
        }
      }
    }
  }
  if (countPixels < trashSize) {
    return null;
  }
  return letter;
}
"
2191,"OCRProperties(Letter,Text)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\properties\OCRProperties.java,neuroph,7,17,13,4,0.2041,0.0667,1,7,1,"public OCRProperties(Letter letterInformation,Text textInformation){
  this.letterInformation=letterInformation;
  this.textInformation=textInformation;
  this.image=textInformation.getImage();
  this.scanQuality=letterInformation.getScanQuality();
  this.fontSize=letterInformation.getScanQuality();
}
"
2195,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\samples\RecognitionSample.java,neuroph,19,151,131,7,0.0936,0.0414,0.545454545,12,1,"public static void main(String[] args) throws IOException {
  String imagePath=""C:/Users/Mihailo/Desktop/OCR/tekst.png"";
  String textPath=""C:/Users/Mihailo/Desktop/OCR/tekst.txt"";
  String networkPath=""C:/Users/Mihailo/Desktop/OCR/network.nnet"";
  int fontSize=12;
  int scanQuality=300;
  BufferedImage image=ImageIO.read(new File(imagePath));
  ImageFilterChain chain=new ImageFilterChain();
  chain.addFilter(new GrayscaleFilter());
  chain.addFilter(new OtsuBinarizeFilter());
  BufferedImage binarizedImage=chain.processImage(image);
  Letter letterInfo=new Letter(scanQuality,binarizedImage);
  Text textInfo=new Text(binarizedImage,letterInfo);
  OCRTextRecognition recognition=new OCRTextRecognition(letterInfo,textInfo);
  recognition.setNetworkPath(networkPath);
  recognition.recognize();
  System.out.println(recognition.getRecognizedText());
}
"
2196,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\samples\RecognizeLetter.java,neuroph,6,11,7,2,0.25,0.0722,0.75,6,1,"public static void main(String[] args) throws IOException {
  String networkPath=""C:/Users/Mihailo/Desktop/OCR/nnet/nnet-12-0.01.nnet"";
  String letterPath=""C:/Users/Mihailo/Desktop/OCR/letters/259.png"";
  NeuralNetwork nnet=NeuralNetwork.createFromFile(networkPath);
  ImageRecognitionPlugin imageRecognition=(ImageRecognitionPlugin)nnet.getPlugin(ImageRecognitionPlugin.class);
  Map<String,Double> output=imageRecognition.recognizeImage(new File(letterPath));
  System.out.println(""Recognized letter: "" + OCRUtilities.getCharacter(output));
}
"
2197,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\samples\TrainingSample.java,neuroph,34,511,461,7,0.0662,0.0315,0.52173913,19,1,"public static void main(String[] args) throws IOException {
  String imagePath=""C:/Users/Mihailo/Desktop/OCR/slova.png"";
  String folderPath=""C:/Users/Mihailo/Desktop/OCR/ImagesDir/"";
  String textPath=""C:/Users/Mihailo/Desktop/OCR/slova.txt"";
  String networkPath=""C:/Users/Mihailo/Desktop/OCR/network.nnet"";
  int fontSize=12;
  int scanQuality=300;
  BufferedImage image=ImageIO.read(new File(imagePath));
  ImageFilterChain chain=new ImageFilterChain();
  chain.addFilter(new GrayscaleFilter());
  chain.addFilter(new OtsuBinarizeFilter());
  BufferedImage binarizedImage=chain.processImage(image);
  Letter letterInfo=new Letter(scanQuality,binarizedImage);
  Text texTInfo=new Text(binarizedImage,letterInfo);
  OCRTraining ocrTraining=new OCRTraining(letterInfo,texTInfo);
  ocrTraining.setFolderPath(folderPath);
  ocrTraining.setTrainingTextPath(textPath);
  ocrTraining.prepareTrainingSet();
  List<String> characterLabels=ocrTraining.getCharacterLabels();
  Map<String,FractionRgbData> map=ImageRecognitionHelper.getFractionRgbDataForDirectory(new File(folderPath),new Dimension(20,20));
  DataSet dataSet=ImageRecognitionHelper.createBlackAndWhiteTrainingSet(characterLabels,map);
  dataSet.setFilePath(""C:/Users/Mihailo/Desktop/OCR/DataSet1.tset"");
  dataSet.save();
  List<Integer> hiddenLayers=new ArrayList<Integer>();
  hiddenLayers.add(12);
  NeuralNetwork nnet=ImageRecognitionHelper.createNewNeuralNetwork(""someNetworkName"",new Dimension(20,20),ColorMode.BLACK_AND_WHITE,characterLabels,hiddenLayers,TransferFunctionType.SIGMOID);
  BackPropagation bp=(BackPropagation)nnet.getLearningRule();
  bp.setLearningRate(0.3);
  bp.setMaxError(0.1);
  System.out.println(""Start learning..."");
  nnet.learn(dataSet);
  System.out.println(""NNet learned"");
  nnet.save(networkPath);
}
"
2198,"Letter(int,BufferedImage)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\Letter.java,neuroph,11,45,35,4,0.157,0.104,0.666666667,6,1,"public Letter(int scanQuality,BufferedImage image){
  this.scanQuality=scanQuality;
  this.image=image;
  heightHistogram=Histogram.heightHistogram(image);
  gradient=Histogram.gradient(heightHistogram);
  calculateSmallestSizeLetter();
  List<Integer> rowHeights=OCRUtilities.rowHeights(gradient,smallestSizeLetter);
  int meanHeight=(int)caluclateMean(rowHeights);
  calculateDimensions(meanHeight);
  calculateLetterSize(meanHeight);
  calculateSpaceGap(meanHeight);
}
"
2200,calculateSmallestSizeLetter(),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\Letter.java,neuroph,8,22,16,4,0.375,0.2222,0,0,4,"private void calculateSmallestSizeLetter(){
  if (scanQuality == 300) {
    smallestSizeLetter=9;
  }
  if (scanQuality == 600) {
    smallestSizeLetter=18;
  }
  if (scanQuality == 1200) {
    smallestSizeLetter=36;
  }
}
"
2219,caluclateMean(List<Integer>),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\Letter.java,neuroph,6,10,5,3,0.3889,0.1429,0,3,2,"private double caluclateMean(List<Integer> list){
  double sum=0;
  for (  Integer element : list) {
    sum+=element;
  }
  return sum / list.size();
}
"
2222,"wordsPositions(BufferedImage,int,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\OCRUtilities.java,neuroph,16,92,64,3,0.1442,0.1044,0.666666667,12,4,"/** 
 * Word is class with two parameters, startPixel and endPixel. This method
 * calculates these pixels for given row and return them as List of Word
 * @param image input image, should be black-white
 * @param row given row
 * @param letterHeight predicted letter size
 * @param spaceGap predicted space size, spaces smaller that spaceGap are
 * not spaces between word, they are spaces between letter. Ignore spaces
 * between letters.
 * @return
 */
public static List<WordPosition> wordsPositions(BufferedImage image,int row,int letterHeight,int spaceGap){
  List<WordPosition> words=new ArrayList<WordPosition>();
  int[] histogram=OCRHistogram.widthRowHistogram(image,row,letterHeight);
  int[] histogramWLS=OCRHistogram.histogramWithoutLetterSpaces(histogram,spaceGap);
  int count=0;
  for (int i=0; i < histogramWLS.length; i++) {
    if (histogramWLS[i] != 0) {
      count++;
    }
 else {
      if (count > 0) {
        int start=i - count;
        int end=i - 1;
        WordPosition w=new WordPosition(start,end);
        words.add(w);
      }
      count=0;
    }
  }
  return words;
}
"
2223,"saveToFile(BufferedImage,String,String,String)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\OCRUtilities.java,neuroph,7,18,15,4,0.1964,0.0725,0,7,2,"/** 
 * Save the image to the file
 * @param image should be cropped before the saving. Use OCRCropImage class
 * @param path path to the folder, ie C:/Users/.../ it should ended with /
 * @param letterName letter of the name
 * @param extension some of .png .jpg ...
 */
public static void saveToFile(BufferedImage image,String path,String letterName,String extension){
  String imagePath=path + letterName + "".""+ extension;
  File outputfile=new File(imagePath);
  try {
    ImageIO.write(image,extension,outputfile);
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
"
2225,"linePositions(int[],int)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\OCRUtilities.java,neuroph,17,99,62,2,0.1765,0.1376,0,9,5,"/** 
 * @param gradient gradient array calculated with method gradient(int [])
 * @param ignoredSize - noise - what is the minimum size of letter to be
 * recognized <br/>
 * With lower value you will probably find trash as separate line <br/>
 * With higher value you will probably miss the letter <br/>
 * Ideal value is less that the letter size
 * @return List of integers where each element represent center of line.
 * First element corresponds to the first line etc.
 */
public static List<Integer> linePositions(int[] gradient,int ignoredSize){
  ArrayList<Integer> lines=new ArrayList<Integer>();
  int sum=0;
  int count=0;
  for (int row=0; row < gradient.length; row++) {
    sum+=gradient[row];
    if (sum != 0) {
      count++;
      continue;
    }
    if (sum == 0) {
      if (count < ignoredSize) {
        count=0;
      }
 else {
        int startLetter=row - count;
        int endLetter=row;
        int line=(startLetter + endLetter) / 2;
        lines.add(line);
        count=0;
      }
    }
  }
  return lines;
}
"
2226,"rowHeights(int[],int)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\OCRUtilities.java,neuroph,15,76,47,3,0.2111,0.1678,0,6,5,"public static List<Integer> rowHeights(int[] gradient,int ignoredSize){
  ArrayList<Integer> heights=new ArrayList<Integer>();
  int sum=0;
  int count=0;
  for (int row=0; row < gradient.length; row++) {
    sum+=gradient[row];
    if (sum != 0) {
      count++;
      continue;
    }
    if (sum == 0) {
      if (count < ignoredSize) {
        count=0;
      }
 else {
        heights.add(count);
        count=0;
      }
    }
  }
  return heights;
}
"
2227,"Text(BufferedImage,Letter)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\Text.java,neuroph,7,19,17,5,0.1905,0.0267,1,4,1,"public Text(BufferedImage image,Letter letterInformation){
  this.letterInfo=letterInformation;
  this.image=image;
  linePositions=OCRUtilities.rowPositions(image,letterInformation.getSmallestSizeLetter());
  createMap();
  populateMap();
}
"
2238,convertImageIntoData(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\adalineDigits\Data.java,neuroph,8,20,12,2,0.2344,0.0815,0.5,7,4,"public static DataSetRow convertImageIntoData(String[] image){
  DataSetRow dataSetRow=new DataSetRow(Data.CHAR_HEIGHT * Data.CHAR_WIDTH);
  double[] array=new double[Data.CHAR_WIDTH * Data.CHAR_HEIGHT];
  for (int row=0; row < Data.CHAR_HEIGHT; row++) {
    for (int column=0; column < Data.CHAR_WIDTH; column++) {
      int index=(row * Data.CHAR_WIDTH) + column;
      char ch=image[row].charAt(column);
      array[index]=(ch == 'O' ? 1 : -1);
    }
  }
  dataSetRow.setInput(array);
  return dataSetRow;
}
"
2239,convertDataIntoImage(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\adalineDigits\Data.java,neuroph,11,34,13,2,0.3182,0.2697,0,4,5,"public static String[] convertDataIntoImage(double[] data){
  String[] image=new String[data.length / Data.CHAR_WIDTH];
  String row="""";
  for (int i=0; i < data.length; i++) {
    if (data[i] == 1) {
      row+=""O"";
    }
 else {
      row+="" "";
    }
    if (row.length() % 5 == 0 && row.length() != 0) {
      image[i / 5]=row;
      row="""";
    }
  }
  return image;
}
"
2240,main(String),D:\temp\case study\neuroph-2.94\org\neuroph\samples\adalineDigits\DigitsRecognition.java,neuroph,9,22,8,1,0.2593,0.2435,0.6,9,1,"public static void main(String args[]){
  DataSet dataSet=generateTraining();
  int inputCount=Data.CHAR_HEIGHT * Data.CHAR_WIDTH;
  int outputCount=Data.DIGITS.length;
  int hiddenNeurons=19;
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputCount,hiddenNeurons,outputCount);
  BackPropagation learningRule=neuralNet.getLearningRule();
  learningRule.setLearningRate(0.5);
  learningRule.setMaxError(0.001);
  learningRule.setMaxIterations(5000);
  learningRule.addListener(new LearningEventListener(){
    @Override public void handleLearningEvent(    LearningEvent event){
      BackPropagation bp=(BackPropagation)event.getSource();
      if (event.getEventType().equals(LearningEvent.Type.LEARNING_STOPPED)) {
        System.out.println();
        System.out.println(""Training completed in "" + bp.getCurrentIteration() + "" iterations"");
        System.out.println(""With total error "" + bp.getTotalNetworkError() + '\n');
      }
 else {
        System.out.println(""Iteration: "" + bp.getCurrentIteration() + "" | Network error: ""+ bp.getTotalNetworkError());
      }
    }
  }
);
  neuralNet.learn(dataSet);
  testNeuralNetwork(neuralNet,dataSet);
}
"
2242,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\adalineDigits\DigitsRecognition.java,neuroph,11,38,21,3,0.2208,0.125,0.666666667,6,4,"/** 
 * Prints network output for the each element from the specified training
 * set.
 * @param neuralNet neural network
 * @param testSet test data set
 */
public static void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  System.out.println(""--------------------------------------------------------------------"");
  System.out.println(""***********************TESTING NEURAL NETWORK***********************"");
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    int izlaz=maxOutput(neuralNet.getOutput());
    String[] niz=Data.convertDataIntoImage(testSetRow.getInput());
    for (int i=0; i < niz.length; i++) {
      if (i != niz.length - 1) {
        System.out.println(niz[i]);
      }
 else {
        System.out.println(niz[i] + ""----> "" + izlaz);
      }
    }
    System.out.println("""");
  }
}
"
2243,generateTraining(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\adalineDigits\DigitsRecognition.java,neuroph,11,40,25,2,0.1919,0.11,0.6,7,4,"public static DataSet generateTraining(){
  DataSet dataSet=new DataSet(Data.CHAR_WIDTH * Data.CHAR_HEIGHT,Data.DIGITS.length);
  for (int i=0; i < Data.DIGITS.length; i++) {
    DataSetRow inputRow=Data.convertImageIntoData(Data.DIGITS[i]);
    double[] input=inputRow.getInput();
    double[] output=new double[Data.DIGITS.length];
    for (int j=0; j < Data.DIGITS.length; j++) {
      if (j == i) {
        output[j]=1;
      }
 else {
        output[j]=0;
      }
    }
    DataSetRow row=new DataSetRow(input,output);
    dataSet.addRow(row);
  }
  return dataSet;
}
"
2244,maxOutput(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\adalineDigits\DigitsRecognition.java,neuroph,8,17,6,2,0.4063,0.2083,0,4,3,"public static int maxOutput(double[] array){
  double max=array[0];
  int index=0;
  for (int i=0; i < array.length; i++) {
    if (array[i] > max) {
      index=i;
      max=array[i];
    }
  }
  return index;
}
"
2246,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\brestCancer\BrestCancerSample.java,neuroph,22,200,169,5,0.1039,0.0556,0.666666667,10,1,"public void run(){
  System.out.println(""Creating training and test set from file..."");
  String trainingSetFileName=""data_sets/breast cancer.txt"";
  int inputsCount=30;
  int outputsCount=2;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,"","");
  dataSet.shuffle();
  Normalizer normalizer=new MaxNormalizer();
  normalizer.normalize(dataSet);
  DataSet[] trainingAndTestSet=dataSet.createTrainingAndTestSubsets(70,30);
  DataSet trainingSet=trainingAndTestSet[0];
  DataSet testSet=trainingAndTestSet[1];
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,16,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.3);
  learningRule.setMaxError(0.001);
  learningRule.setMaxIterations(5000);
  System.out.println(""Training network..."");
  neuralNet.learn(trainingSet);
  System.out.println(""Testing network...\n\n"");
  testNeuralNetwork(neuralNet,testSet);
  System.out.println(""Done."");
  System.out.println(""**************************************************"");
}
"
2247,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\brestCancer\BrestCancerSample.java,neuroph,19,132,93,3,0.1498,0.0984,0.5,22,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  System.out.println(""**************************************************"");
  System.out.println(""**********************RESULT**********************"");
  System.out.println(""**************************************************"");
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    int predicted=maxOutput(networkOutput);
    double[] networkDesiredOutput=testSetRow.getDesiredOutput();
    int ideal=maxOutput(networkDesiredOutput);
    keepScore(predicted,ideal);
  }
  System.out.println(""Total cases: "" + this.count[2] + "". "");
  System.out.println(""Correctly predicted cases: "" + this.correct[2] + "". "");
  System.out.println(""Incorrectly predicted cases: "" + (this.count[2] - this.correct[2] - unpredicted) + "". "");
  System.out.println(""Unrecognized cases: "" + unpredicted + "". "");
  double percentTotal=(double)this.correct[2] * 100 / (double)this.count[2];
  System.out.println(""Predicted correctly: "" + formatDecimalNumber(percentTotal) + ""%. "");
  double percentM=(double)this.correct[0] * 100.0 / (double)this.count[0];
  System.out.println(""Prediction for 'M (malignant)' => (Correct/total): "" + this.correct[0] + ""/""+ count[0]+ ""(""+ formatDecimalNumber(percentM)+ ""%). "");
  double percentB=(double)this.correct[1] * 100.0 / (double)this.count[1];
  System.out.println(""Prediction for 'B (benign)' => (Correct/total): "" + this.correct[1] + ""/""+ count[1]+ ""(""+ formatDecimalNumber(percentB)+ ""%). "");
}
"
2248,handleLearningEvent(LearningEvent),D:\temp\case study\neuroph-2.94\org\neuroph\samples\brestCancer\BrestCancerSample.java,neuroph,8,20,12,3,0.3333,0.1605,1,3,2,"@Override public void handleLearningEvent(LearningEvent event){
  BackPropagation bp=(BackPropagation)event.getSource();
  if (event.getEventType().equals(LearningEvent.Type.LEARNING_STOPPED)) {
    double error=bp.getTotalNetworkError();
    System.out.println(""Training completed in "" + bp.getCurrentIteration() + "" iterations, "");
    System.out.println(""With total error: "" + formatDecimalNumber(error));
  }
 else {
    System.out.println(""Iteration: "" + bp.getCurrentIteration() + "" | Network error: ""+ bp.getTotalNetworkError());
  }
}
"
2249,maxOutput(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\brestCancer\BrestCancerSample.java,neuroph,10,31,17,3,0.35,0.1705,0,4,4,"public static int maxOutput(double[] array){
  double max=array[0];
  int index=0;
  for (int i=0; i < array.length; i++) {
    if (array[i] > max) {
      index=i;
      max=array[i];
    }
  }
  if (max < 0.5) {
    return -1;
  }
  return index;
}
"
2250,"keepScore(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\brestCancer\BrestCancerSample.java,neuroph,9,30,24,4,0.2222,0.0714,0,2,3,"public void keepScore(int prediction,int ideal){
  count[ideal]++;
  count[2]++;
  if (prediction == ideal) {
    correct[ideal]++;
    correct[2]++;
  }
  if (prediction == -1) {
    unpredicted++;
  }
}
"
2252,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\cifar10\Cifar10Example.java,neuroph,36,586,542,17,0.0569,0.0255,0.578947368,12,1,"public static void main(String[] args) throws IOException {
  int maxIter=20;
  double maxError=0.03;
  double learningRate=0.3;
  int layer1=10;
  int layer2=15;
  int layer3=20;
  LOG.info(""{}-{}-{}"",layer1,layer2,layer3);
  List<String> labels=Arrays.asList(new String[]{""airplane"",""automobile"",""bird"",""cat"",""deer"",""dog"",""frog"",""horse"",""ship"",""truck""});
  DataSet trainSet=ImageRecognitionHelper.createImageDataSetFromFile(""D:\\Doktorske\\Beograd\\Neuronske mreze - Zoran Sevarac\\Cifar 10\\train\\train_1000\\"",labels,"""",ColorMode.COLOR_RGB,new Dimension(32,32),""cifar"",1);
  DataSet testSet=trainSet;
  ConvolutionalNetwork convolutionNetwork=new ConvolutionalNetwork.Builder().withInputLayer(32,32,3).withConvolutionLayer(5,5,layer1).withPoolingLayer(2,2).withConvolutionLayer(5,5,layer2).withPoolingLayer(2,2).withConvolutionLayer(5,5,layer3).withFullConnectedLayer(10).build();
  ConvolutionalBackpropagation backPropagation=new ConvolutionalBackpropagation();
  backPropagation.setLearningRate(learningRate);
  backPropagation.setMaxError(maxError);
  backPropagation.setMaxIterations(maxIter);
  backPropagation.addListener(new LearningListener(convolutionNetwork,testSet));
  backPropagation.setErrorFunction(new MeanSquaredError());
  convolutionNetwork.setLearningRule(backPropagation);
  convolutionNetwork.learn(trainSet);
  Evaluation.runFullEvaluation(convolutionNetwork,testSet);
}
"
2255,testLearningOneLayer(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\convolution\SimpleLearningExample.java,neuroph,20,161,132,8,0.1182,0.0743,0.461538462,7,1,"public static void testLearningOneLayer(){
  Dimension2D inputDimension=new Dimension2D(5,5);
  Dimension2D convolutionKernel=new Dimension2D(3,3);
  ConvolutionalNetwork convolutionNet=new ConvolutionalNetwork.Builder().withInputLayer(5,5,1).withConvolutionLayer(3,3,2).withFullConnectedLayer(2).build();
  DataSet dataSet=new DataSet(25,2);
  dataSet.addRow(new double[]{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},new double[]{1,0});
  dataSet.addRow(new double[]{0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0},new double[]{0,1});
  convolutionNet.getLearningRule().setMaxError(0.00001);
  convolutionNet.learn(dataSet);
  System.out.println(""Done training!"");
  FeatureMapLayer featureMap1=((FeatureMapsLayer)convolutionNet.getLayerAt(1)).getFeatureMap(0);
  FeatureMapLayer featureMap2=((FeatureMapsLayer)convolutionNet.getLayerAt(1)).getFeatureMap(1);
  DataSet testSet=new DataSet(25,2);
  testSet.addRow(new double[]{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},new double[]{1,0});
  testSet.addRow(new double[]{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},new double[]{1,0});
  testSet.addRow(new double[]{0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0},new double[]{0,1});
}
"
2257,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\crossval\IrisCrossValidationSample.java,neuroph,10,35,25,3,0.1875,0.0769,0.625,6,1,"public static void main(String[] args) throws InterruptedException, ExecutionException {
  MultiLayerPerceptron neuralNet=(MultiLayerPerceptron)NeuralNetwork.createFromFile(""irisNet.nnet"");
  DataSet dataSet=DataSet.createFromFile(""data_sets/iris_data_normalised.txt"",4,3,"","");
  String[] classNames={""Virginica"",""Setosa"",""Versicolor""};
  CrossValidation crossval=new CrossValidation(neuralNet,dataSet,10);
  crossval.addEvaluator(new ClassifierEvaluator.MultiClass(classNames));
  crossval.run();
  CrossValidationResult results=crossval.getResult();
  results.printResult();
}
"
2259,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\diabetes\DiabetesSample.java,neuroph,24,245,214,7,0.0952,0.048,0.666666667,10,1,"public void run(){
  System.out.println(""Creating training and test set from file..."");
  String trainingSetFileName=""data_sets/diabetes.txt"";
  int inputsCount=8;
  int outputsCount=2;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,"","");
  dataSet.shuffle();
  Normalizer normalizer=new MaxNormalizer();
  normalizer.normalize(dataSet);
  DataSet[] trainingAndTestSet=dataSet.createTrainingAndTestSubsets(70,30);
  DataSet trainingSet=trainingAndTestSet[0];
  DataSet testSet=trainingAndTestSet[1];
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,20,10,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.05);
  learningRule.setMaxError(0.01);
  learningRule.setMaxIterations(100000);
  System.out.println(""Training network..."");
  neuralNet.learn(trainingSet);
  System.out.println(""Testing network...\n\n"");
  testNeuralNetwork(neuralNet,testSet);
  System.out.println(""Done."");
  System.out.println(""**************************************************"");
}
"
2260,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\diabetes\DiabetesSample.java,neuroph,22,175,119,3,0.1364,0.0974,0.5,24,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  System.out.println(""**************************************************"");
  System.out.println(""**********************RESULT**********************"");
  System.out.println(""**************************************************"");
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    int predicted=maxOutput(networkOutput);
    double[] networkDesiredOutput=testSetRow.getDesiredOutput();
    int ideal=maxOutput(networkDesiredOutput);
    keepScore(predicted,ideal);
  }
  System.out.println(""Total cases: "" + this.count[2] + "". "");
  System.out.println(""Correctly predicted cases: "" + this.correct[2] + "". "");
  System.out.println(""Incorrectly predicted cases: "" + (this.count[2] - this.correct[2] - unpredicted) + "". "");
  System.out.println(""Unrecognized cases: "" + unpredicted + "". "");
  double percentTotal=(double)this.correct[2] * 100 / (double)this.count[2];
  System.out.println(""Predicted correctly: "" + formatDecimalNumber(percentTotal) + ""%. "");
  double percentM=(double)this.correct[0] * 100.0 / (double)this.count[0];
  System.out.println(""Prediction for 'tested positive' => (Correct/total): "" + this.correct[0] + ""/""+ count[0]+ ""(""+ formatDecimalNumber(percentM)+ ""%). "");
  double percentB=(double)this.correct[1] * 100.0 / (double)this.count[1];
  System.out.println(""Prediction for 'tested negative' => (Correct/total): "" + this.correct[1] + ""/""+ count[1]+ ""(""+ formatDecimalNumber(percentB)+ ""%). "");
  this.count=new int[3];
  this.correct=new int[3];
  unpredicted=0;
}
"
2261,handleLearningEvent(LearningEvent),D:\temp\case study\neuroph-2.94\org\neuroph\samples\diabetes\DiabetesSample.java,neuroph,8,20,12,3,0.3333,0.1605,1,3,2,"@Override public void handleLearningEvent(LearningEvent event){
  BackPropagation bp=(BackPropagation)event.getSource();
  if (event.getEventType().equals(LearningEvent.Type.LEARNING_STOPPED)) {
    double error=bp.getTotalNetworkError();
    System.out.println(""Training completed in "" + bp.getCurrentIteration() + "" iterations, "");
    System.out.println(""With total error: "" + formatDecimalNumber(error));
  }
 else {
    System.out.println(""Iteration: "" + bp.getCurrentIteration() + "" | Network error: ""+ bp.getTotalNetworkError());
  }
}
"
2262,maxOutput(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\diabetes\DiabetesSample.java,neuroph,10,31,17,3,0.35,0.1705,0,4,4,"public static int maxOutput(double[] array){
  double max=array[0];
  int index=0;
  for (int i=0; i < array.length; i++) {
    if (array[i] > max) {
      index=i;
      max=array[i];
    }
  }
  if (max < 0.5) {
    return -1;
  }
  return index;
}
"
2263,"keepScore(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\diabetes\DiabetesSample.java,neuroph,9,30,24,4,0.2222,0.0714,0,2,3,"public void keepScore(int prediction,int ideal){
  count[ideal]++;
  count[2]++;
  if (prediction == ideal) {
    correct[ideal]++;
    correct[2]++;
  }
  if (prediction == -1) {
    unpredicted++;
  }
}
"
2265,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\eval\ClassifierEvaluationSample.java,neuroph,18,131,109,4,0.1111,0.0462,0.666666667,10,2,"public static void main(String[] args){
  Evaluation evaluation=new Evaluation();
  evaluation.addEvaluator(new ErrorEvaluator(new MeanSquaredError()));
  String[] classNames={""Virginica"",""Setosa"",""Versicolor""};
  MultiLayerPerceptron neuralNet=(MultiLayerPerceptron)NeuralNetwork.createFromFile(""irisNet.nnet"");
  DataSet dataSet=DataSet.createFromFile(""data_sets/iris_data_normalised.txt"",4,3,"","");
  evaluation.addEvaluator(new ClassifierEvaluator.MultiClass(classNames));
  evaluation.evaluateDataSet(neuralNet,dataSet);
  ClassifierEvaluator evaluator=evaluation.getEvaluator(ClassifierEvaluator.MultiClass.class);
  ConfusionMatrix confusionMatrix=evaluator.getResult();
  System.out.println(""Confusion matrrix:\r\n"");
  System.out.println(confusionMatrix.toString() + ""\r\n\r\n"");
  System.out.println(""Classification metrics\r\n"");
  ClassificationMetrics[] metrics=ClassificationMetrics.createFromMatrix(confusionMatrix);
  ClassificationMetrics.Stats average=ClassificationMetrics.average(metrics);
  for (  ClassificationMetrics cm : metrics) {
    System.out.println(cm.toString() + ""\r\n"");
  }
  System.out.println(average.toString());
}
"
2267,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\evaluation\TestBinaryClass.java,neuroph,9,13,0,2,0.3086,0.2361,0.833333333,3,1,"public static void main(String[] args){
  DataSet trainingSet=new DataSet(2,1);
  trainingSet.addRow(new DataSetRow(new double[]{0,0},new double[]{0}));
  trainingSet.addRow(new DataSetRow(new double[]{0,1},new double[]{1}));
  trainingSet.addRow(new DataSetRow(new double[]{1,0},new double[]{1}));
  trainingSet.addRow(new DataSetRow(new double[]{1,1},new double[]{0}));
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(TransferFunctionType.TANH,2,3,1);
  neuralNet.learn(trainingSet);
  Evaluation.runFullEvaluation(neuralNet,trainingSet);
}
"
2271,Config(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\Config.java,neuroph,10,45,45,10,0.1,0,0,0,1,"public Config(){
  dataFilePath=""data_sets/cover type.txt"";
  trainingFileName=""data_sets/cover_type_data/training.txt"";
  testFileName=""data_sets/cover_type_data/test.txt"";
  balancedFileName=""data_sets/cover_type_data/balanceTraining.txt"";
  normalizedBalancedFileName=""data_sets/cover_type_data/normalizedBalanceTraining.txt"";
  trainedNetworkFileName=""data_sets/cover_type_data/trainedNetwork.txt"";
  inputCount=54;
  firstHiddenLayerCount=40;
  secondHiddenLayerCount=20;
  outputCount=7;
}
"
2294,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\Evaluate.java,neuroph,17,107,78,3,0.1569,0.0806,0.5,19,3,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    int predicted=maxOutput(networkOutput);
    double[] networkDesiredOutput=testSetRow.getDesiredOutput();
    int ideal=maxOutput(networkDesiredOutput);
    keepScore(predicted,ideal);
  }
  System.out.println(""Total cases: "" + this.count[7] + "". "");
  System.out.println(""Correct cases: "" + this.correct[7] + "". "");
  System.out.println(""Incorrectly predicted cases: "" + (this.count[7] - this.correct[7] - unpredicted) + "". "");
  System.out.println(""Unrecognized cases: "" + unpredicted + "". "");
  double percentTotal=(double)this.correct[7] * 100 / (double)this.count[7];
  System.out.println(""Predicted correctly: "" + formatDecimalNumber(percentTotal) + ""%. "");
  for (int i=0; i < correct.length - 1; i++) {
    double p=(double)this.correct[i] * 100.0 / (double)this.count[i];
    System.out.println(""Tree type: "" + (i + 1) + "" - Correct/total: ""+ this.correct[i]+ ""/""+ count[i]+ ""(""+ formatDecimalNumber(p)+ ""%). "");
  }
}
"
2295,maxOutput(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\Evaluate.java,neuroph,10,31,17,3,0.35,0.1705,0,4,4,"public static int maxOutput(double[] array){
  double max=array[0];
  int index=0;
  for (int i=0; i < array.length; i++) {
    if (array[i] > max) {
      index=i;
      max=array[i];
    }
  }
  if (max < 0.5) {
    return -1;
  }
  return index;
}
"
2296,"keepScore(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\Evaluate.java,neuroph,9,30,24,4,0.2222,0.0714,0,2,3,"public void keepScore(int actual,int ideal){
  count[ideal]++;
  count[7]++;
  if (actual == ideal) {
    correct[ideal]++;
    correct[7]++;
  }
  if (actual == -1) {
    unpredicted++;
  }
}
"
2298,generateDataSets(Config),D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\ForestCoverType.java,neuroph,12,60,54,9,0.2083,0.1184,0.25,2,1,"public static void generateDataSets(Config config){
  GenerateData generate=new GenerateData(config);
  System.out.println(""***************************************************"");
  System.out.println(""STEP 1: Generate training (75%) and test (25%) files: "");
  generate.createTrainingAndTestSet();
  System.out.println(""***************************************************"");
  System.out.println(""STEP 2: Balancing training data set to have the same number (3000) of each tree: "");
  generate.createBalancedTrainingSet(3000);
  System.out.println(""***************************************************"");
  System.out.println(""STEP 3: Normalizing balanced training data set: "");
  generate.normalizeBalancedTrainingSet();
}
"
2299,trainNetwork(Config),D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\ForestCoverType.java,neuroph,8,24,20,5,0.3125,0.1136,0.333333333,2,1,"public static void trainNetwork(Config config){
  TrainNetwork program=new TrainNetwork(config);
  System.out.println(""***************************************************"");
  System.out.println(""STEP 4: Creating and Training neural network: "");
  program.createNeuralNetwork();
  program.train();
  evaluateNetwork(config);
}
"
2300,evaluateNetwork(Config),D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\ForestCoverType.java,neuroph,6,14,13,5,0.25,0.0556,0.5,2,1,"public static void evaluateNetwork(Config config){
  Evaluate evaluate=new Evaluate(config);
  System.out.println(""***************************************************"");
  System.out.println(""STEP 5: Evaluating neural network: "");
  evaluate.evaluate();
}
"
2303,createTrainingAndTestSet(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\GenerateData.java,neuroph,22,196,161,7,0.1263,0.0746,0.5,7,1,"public void createTrainingAndTestSet(){
  DataSet dataSet=createDataSet();
  dataSet.shuffle();
  DataSet[] trainingAndTestSet=dataSet.createTrainingAndTestSubsets(75,25);
  DataSet trainingSet=trainingAndTestSet[0];
  System.out.println(""Saving training set to file..."");
  trainingSet.save(config.getTrainingFileName());
  System.out.println(""Training set successfully saved!"");
  DataSet testSet=trainingAndTestSet[1];
  System.out.println(""Normalizing test set..."");
  Normalizer nor=new MaxNormalizer();
  nor.normalize(testSet);
  System.out.println(""Saving normalized test set to file..."");
  testSet.shuffle();
  testSet.save(config.getTestFileName());
  System.out.println(""Normalized test set successfully saved!"");
  System.out.println(""Training set size: "" + trainingSet.getRows().size() + "" rows. "");
  System.out.println(""Test set size: "" + testSet.getRows().size() + "" rows. "");
  System.out.println(""-----------------------------------------------"");
  double percentTraining=(double)trainingSet.getRows().size() * 100.0 / (double)dataSet.getRows().size();
  double percentTest=(double)testSet.getRows().size() * 100.0 / (double)dataSet.getRows().size();
  System.out.println(""Training set takes "" + formatDecimalNumber(percentTraining) + ""% of main data set. "");
  System.out.println(""Test set takes "" + formatDecimalNumber(percentTest) + ""% of main data set. "");
}
"
2306,createBalancedTrainingSet(int),D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\GenerateData.java,neuroph,50,1101,977,5,0.0837,0.062,0.375,15,18,"public void createBalancedTrainingSet(int count){
  DataSet balanced=new DataSet(54,7);
  int firstType=0;
  int secondType=0;
  int thirdType=0;
  int fourthType=0;
  int fifthType=0;
  int sixthType=0;
  int seventhType=0;
  DataSet trainingSet=DataSet.load(config.getTrainingFileName());
  List<DataSetRow> rows=trainingSet.getRows();
  System.out.println(""Test set size: "" + rows.size() + "" rows. "");
  for (  DataSetRow row : rows) {
    double[] DesiredOutput=row.getDesiredOutput();
    int index=-1;
    for (int i=0; i < DesiredOutput.length; i++) {
      if (DesiredOutput[i] == 1.0) {
        index=i;
        break;
      }
    }
switch (index + 1) {
case 1:
      if (firstType < count) {
        balanced.addRow(row);
        firstType++;
      }
    break;
case 2:
  if (secondType < count) {
    balanced.addRow(row);
    secondType++;
  }
break;
case 3:
if (thirdType < count) {
balanced.addRow(row);
thirdType++;
}
break;
case 4:
if (fourthType < count) {
balanced.addRow(row);
fourthType++;
}
break;
case 5:
if (fifthType < count) {
balanced.addRow(row);
fifthType++;
}
break;
case 6:
if (sixthType < count) {
balanced.addRow(row);
sixthType++;
}
break;
case 7:
if (seventhType < count) {
balanced.addRow(row);
seventhType++;
}
break;
default :
System.out.println(""Error with output vector size! "");
}
}
System.out.println(""Balanced test set size: "" + balanced.getRows().size() + "" rows. "");
System.out.println(""Samples per tree: "");
System.out.println(""First type: "" + firstType + "" samples. "");
System.out.println(""Second type: "" + secondType + "" samples. "");
System.out.println(""Third type: "" + thirdType + "" samples. "");
System.out.println(""Fourth type: "" + fourthType + "" samples. "");
System.out.println(""Fifth type: "" + fifthType + "" samples. "");
System.out.println(""Sixth type: "" + sixthType + "" samples. "");
System.out.println(""Seventh type: "" + seventhType + "" samples. "");
balanced.save(config.getBalancedFileName());
}
"
2307,normalizeBalancedTrainingSet(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\GenerateData.java,neuroph,8,17,6,3,0.3125,0.2006,0.571428571,2,1,"public void normalizeBalancedTrainingSet(){
  DataSet dataSet=DataSet.load(config.getBalancedFileName());
  Normalizer normalizer=new MaxNormalizer();
  normalizer.normalize(dataSet);
  System.out.println(""Saving normalized training data set to file... "");
  dataSet.shuffle();
  dataSet.shuffle();
  dataSet.save(config.getNormalizedBalancedFileName());
  System.out.println(""Normalized training data set successfully saved!"");
}
"
2309,createNeuralNetwork(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\TrainNetwork.java,neuroph,8,19,10,3,0.3333,0.216,0.454545455,2,1,"public void createNeuralNetwork(){
  System.out.println(""Creating neural network... "");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(config.getInputCount(),config.getFirstHiddenLayerCount(),config.getSecondHiddenLayerCount(),config.getOutputCount());
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.setLearningRate(0.01);
  learningRule.setMaxError(0.1);
  learningRule.setMaxIterations(1000);
  System.out.println(""Saving neural network to file... "");
  neuralNet.save(config.getTrainedNetworkFileName());
  System.out.println(""Neural network successfully saved!"");
}
"
2310,train(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\TrainNetwork.java,neuroph,7,12,3,3,0.2857,0.1433,0.5,2,1,"public void train(){
  System.out.println(""Training neural network... "");
  MultiLayerPerceptron neuralNet=(MultiLayerPerceptron)NeuralNetwork.createFromFile(config.getTrainedNetworkFileName());
  DataSet dataSet=DataSet.load(config.getNormalizedBalancedFileName());
  neuralNet.getLearningRule().addListener(this);
  neuralNet.learn(dataSet);
  System.out.println(""Saving trained neural network to file... "");
  neuralNet.save(config.getTrainedNetworkFileName());
  System.out.println(""Neural network successfully saved!"");
}
"
2312,handleLearningEvent(LearningEvent),D:\temp\case study\neuroph-2.94\org\neuroph\samples\forestCover\TrainNetwork.java,neuroph,8,20,12,3,0.3333,0.1605,1,3,2,"@Override public void handleLearningEvent(LearningEvent event){
  BackPropagation bp=(BackPropagation)event.getSource();
  if (event.getEventType().equals(LearningEvent.Type.LEARNING_STOPPED)) {
    double error=bp.getTotalNetworkError();
    System.out.println(""Training completed in "" + bp.getCurrentIteration() + "" iterations, "");
    System.out.println(""With total error: "" + formatDecimalNumber(error));
  }
 else {
    System.out.println(""Iteration: "" + bp.getCurrentIteration() + "" | Network error: ""+ bp.getTotalNetworkError());
  }
}
"
2314,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\germanCreditData\GermanCreditDataSample.java,neuroph,22,200,169,5,0.1039,0.0556,0.666666667,10,1,"public void run(){
  System.out.println(""Creating training and test set from file..."");
  String trainingSetFileName=""data_sets/german credit data.txt"";
  int inputsCount=24;
  int outputsCount=2;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,"" "");
  dataSet.shuffle();
  Normalizer normalizer=new MaxNormalizer();
  normalizer.normalize(dataSet);
  DataSet[] trainingAndTestSet=dataSet.createTrainingAndTestSubsets(70,30);
  DataSet trainingSet=trainingAndTestSet[0];
  DataSet testSet=trainingAndTestSet[1];
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,12,6,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.01);
  learningRule.setMaxError(0.001);
  learningRule.setMaxIterations(10000);
  System.out.println(""Training network..."");
  neuralNet.learn(trainingSet);
  System.out.println(""Testing network...\n\n"");
  testNeuralNetwork(neuralNet,testSet);
  System.out.println(""Done."");
  System.out.println(""**************************************************"");
}
"
2315,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\germanCreditData\GermanCreditDataSample.java,neuroph,19,132,93,3,0.1498,0.0984,0.5,22,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  System.out.println(""**************************************************"");
  System.out.println(""**********************RESULT**********************"");
  System.out.println(""**************************************************"");
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    int predicted=maxOutput(networkOutput);
    double[] networkDesiredOutput=testSetRow.getDesiredOutput();
    int ideal=maxOutput(networkDesiredOutput);
    keepScore(predicted,ideal);
  }
  System.out.println(""Total cases: "" + this.count[2] + "". "");
  System.out.println(""Correctly predicted cases: "" + this.correct[2] + "". "");
  System.out.println(""Incorrectly predicted cases: "" + (this.count[2] - this.correct[2] - unpredicted) + "". "");
  System.out.println(""Unrecognized cases: "" + unpredicted + "". "");
  double percentTotal=(double)this.correct[2] * 100 / (double)this.count[2];
  System.out.println(""Predicted correctly: "" + formatDecimalNumber(percentTotal) + ""%. "");
  double percentM=(double)this.correct[0] * 100.0 / (double)this.count[0];
  System.out.println(""Prediction for 'Good credit risk' => (Correct/total): "" + this.correct[0] + ""/""+ count[0]+ ""(""+ formatDecimalNumber(percentM)+ ""%). "");
  double percentB=(double)this.correct[1] * 100.0 / (double)this.count[1];
  System.out.println(""Prediction for 'Bad credit risk' => (Correct/total): "" + this.correct[1] + ""/""+ count[1]+ ""(""+ formatDecimalNumber(percentB)+ ""%). "");
}
"
2316,handleLearningEvent(LearningEvent),D:\temp\case study\neuroph-2.94\org\neuroph\samples\germanCreditData\GermanCreditDataSample.java,neuroph,8,20,12,3,0.3333,0.1605,1,3,2,"@Override public void handleLearningEvent(LearningEvent event){
  BackPropagation bp=(BackPropagation)event.getSource();
  if (event.getEventType().equals(LearningEvent.Type.LEARNING_STOPPED)) {
    double error=bp.getTotalNetworkError();
    System.out.println(""Training completed in "" + bp.getCurrentIteration() + "" iterations, "");
    System.out.println(""With total error: "" + formatDecimalNumber(error));
  }
 else {
    System.out.println(""Iteration: "" + bp.getCurrentIteration() + "" | Network error: ""+ bp.getTotalNetworkError());
  }
}
"
2317,maxOutput(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\germanCreditData\GermanCreditDataSample.java,neuroph,10,31,17,3,0.35,0.1705,0,4,4,"public static int maxOutput(double[] array){
  double max=array[0];
  int index=0;
  for (int i=0; i < array.length; i++) {
    if (array[i] > max) {
      index=i;
      max=array[i];
    }
  }
  if (max < 0.5) {
    return -1;
  }
  return index;
}
"
2318,"keepScore(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\germanCreditData\GermanCreditDataSample.java,neuroph,9,30,24,4,0.2222,0.0714,0,2,3,"public void keepScore(int prediction,int ideal){
  count[ideal]++;
  count[2]++;
  if (prediction == ideal) {
    correct[ideal]++;
    correct[2]++;
  }
  if (prediction == -1) {
    unpredicted++;
  }
}
"
2321,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\ionosphere\IonosphereSample.java,neuroph,24,245,214,7,0.0952,0.048,0.666666667,10,1,"public void run(){
  System.out.println(""Creating training and test set from file..."");
  String trainingSetFileName=""data_sets/ionosphere.txt"";
  int inputsCount=34;
  int outputsCount=2;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,"","");
  dataSet.shuffle();
  Normalizer normalizer=new MaxNormalizer();
  normalizer.normalize(dataSet);
  DataSet[] trainingAndTestSet=dataSet.createTrainingAndTestSubsets(70,30);
  DataSet trainingSet=trainingAndTestSet[0];
  DataSet testSet=trainingAndTestSet[1];
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,16,8,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.001);
  learningRule.setMaxIterations(10000);
  System.out.println(""Training network..."");
  neuralNet.learn(trainingSet);
  System.out.println(""Testing network...\n\n"");
  testNeuralNetwork(neuralNet,testSet);
  System.out.println(""Done."");
  System.out.println(""**************************************************"");
}
"
2322,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\ionosphere\IonosphereSample.java,neuroph,22,175,119,3,0.1364,0.0974,0.5,24,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  System.out.println(""**************************************************"");
  System.out.println(""**********************RESULT**********************"");
  System.out.println(""**************************************************"");
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    int predicted=maxOutput(networkOutput);
    double[] networkDesiredOutput=testSetRow.getDesiredOutput();
    int ideal=maxOutput(networkDesiredOutput);
    keepScore(predicted,ideal);
  }
  System.out.println(""Total cases: "" + this.count[2] + "". "");
  System.out.println(""Correctly predicted cases: "" + this.correct[2] + "". "");
  System.out.println(""Incorrectly predicted cases: "" + (this.count[2] - this.correct[2] - unpredicted) + "". "");
  System.out.println(""Unrecognized cases: "" + unpredicted + "". "");
  double percentTotal=(double)this.correct[2] * 100 / (double)this.count[2];
  System.out.println(""Predicted correctly: "" + formatDecimalNumber(percentTotal) + ""%. "");
  double percentM=(double)this.correct[0] * 100.0 / (double)this.count[0];
  System.out.println(""Prediction for 'Good' => (Correct/total): "" + this.correct[0] + ""/""+ count[0]+ ""(""+ formatDecimalNumber(percentM)+ ""%). "");
  double percentB=(double)this.correct[1] * 100.0 / (double)this.count[1];
  System.out.println(""Prediction for 'Bad' => (Correct/total): "" + this.correct[1] + ""/""+ count[1]+ ""(""+ formatDecimalNumber(percentB)+ ""%). "");
  this.count=new int[3];
  this.correct=new int[3];
  unpredicted=0;
}
"
2323,handleLearningEvent(LearningEvent),D:\temp\case study\neuroph-2.94\org\neuroph\samples\ionosphere\IonosphereSample.java,neuroph,8,20,12,3,0.3333,0.1605,1,3,2,"@Override public void handleLearningEvent(LearningEvent event){
  BackPropagation bp=(BackPropagation)event.getSource();
  if (event.getEventType().equals(LearningEvent.Type.LEARNING_STOPPED)) {
    double error=bp.getTotalNetworkError();
    System.out.println(""Training completed in "" + bp.getCurrentIteration() + "" iterations, "");
    System.out.println(""With total error: "" + formatDecimalNumber(error));
  }
 else {
    System.out.println(""Iteration: "" + bp.getCurrentIteration() + "" | Network error: ""+ bp.getTotalNetworkError());
  }
}
"
2324,maxOutput(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\ionosphere\IonosphereSample.java,neuroph,10,31,17,3,0.35,0.1705,0,4,4,"public static int maxOutput(double[] array){
  double max=array[0];
  int index=0;
  for (int i=0; i < array.length; i++) {
    if (array[i] > max) {
      index=i;
      max=array[i];
    }
  }
  if (max < 0.5) {
    return -1;
  }
  return index;
}
"
2325,"keepScore(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\ionosphere\IonosphereSample.java,neuroph,9,30,24,4,0.2222,0.0714,0,2,3,"public void keepScore(int prediction,int ideal){
  count[ideal]++;
  count[2]++;
  if (prediction == ideal) {
    correct[ideal]++;
    correct[2]++;
  }
  if (prediction == -1) {
    unpredicted++;
  }
}
"
2327,calculateMean(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\samples\norm\DataSetStatistics.java,neuroph,10,30,15,3,0.2667,0.1258,0.666666667,6,4,"public static double[] calculateMean(DataSet dataSet){
  double[] mean=new double[dataSet.getInputSize()];
  for (  DataSetRow row : dataSet) {
    double[] currentInput=row.getInput();
    for (int i=0; i < dataSet.getInputSize(); i++) {
      mean[i]+=currentInput[i];
    }
  }
  for (int i=0; i < dataSet.getInputSize(); i++) {
    mean[i]/=dataSet.getRows().size();
  }
  return mean;
}
"
2328,calculateMaxByColumns(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\samples\norm\DataSetStatistics.java,neuroph,10,31,17,2,0.225,0.1133,0.666666667,7,4,"public static double[] calculateMaxByColumns(DataSet dataSet){
  int inputSize=dataSet.getInputSize();
  double[] maxColumnElements=new double[inputSize];
  for (int i=0; i < inputSize; i++) {
    maxColumnElements[i]=Double.MIN_VALUE;
  }
  for (  DataSetRow dataSetRow : dataSet.getRows()) {
    double[] input=dataSetRow.getInput();
    for (int i=0; i < inputSize; i++) {
      maxColumnElements[i]=Math.max(maxColumnElements[i],input[i]);
    }
  }
  return maxColumnElements;
}
"
2329,calculateMinByColumns(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\samples\norm\DataSetStatistics.java,neuroph,10,31,17,2,0.225,0.1133,0.666666667,7,4,"public static double[] calculateMinByColumns(DataSet dataSet){
  int inputSize=dataSet.getInputSize();
  double[] minColumnElements=new double[inputSize];
  for (int i=0; i < inputSize; i++) {
    minColumnElements[i]=Double.MAX_VALUE;
  }
  for (  DataSetRow dataSetRow : dataSet.getRows()) {
    double[] input=dataSetRow.getInput();
    for (int i=0; i < inputSize; i++) {
      minColumnElements[i]=Math.min(minColumnElements[i],input[i]);
    }
  }
  return minColumnElements;
}
"
2330,normalize(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\samples\norm\ZeroMeanNormalizer.java,neuroph,9,16,0,1,0.2963,0.1759,0.428571429,8,4,"public void normalize(DataSet dataSet){
  double[] maxInput=DataSetStatistics.calculateMaxByColumns(dataSet);
  double[] minInput=DataSetStatistics.calculateMinByColumns(dataSet);
  double[] meanInput=DataSetStatistics.calculateMean(dataSet);
  for (  DataSetRow row : dataSet.getRows()) {
    double[] normalizedInput=row.getInput();
    for (int i=0; i < dataSet.getInputSize(); i++) {
      double divider=maxInput[i] - minInput[i] == 0 ? 1 : maxInput[i] - minInput[i];
      normalizedInput[i]=(normalizedInput[i] - meanInput[i]) / divider;
    }
    row.setInput(normalizedInput);
  }
}
"
2332,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\segmentChallenge\SegmentChallengeSample.java,neuroph,28,318,258,6,0.1126,0.0711,0.666666667,9,1,"public void run(){
  System.out.println(""Creating training and test set from file..."");
  String trainingSetFileName=""data_sets/segment challenge.txt"";
  String testSetFileName=""data_sets/segment test.txt"";
  int inputsCount=19;
  int outputsCount=7;
  DataSet trainingSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,"","");
  System.out.println(""Training set size: "" + trainingSet.getRows().size());
  trainingSet.shuffle();
  trainingSet.shuffle();
  Normalizer normalizer=new MaxNormalizer();
  normalizer.normalize(trainingSet);
  DataSet testSet=DataSet.createFromFile(testSetFileName,inputsCount,outputsCount,"","");
  System.out.println(""Test set size: "" + testSet.getRows().size());
  System.out.println(""--------------------------------------------------"");
  testSet.shuffle();
  testSet.shuffle();
  normalizer.normalize(testSet);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,17,10,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.01);
  learningRule.setMaxError(0.001);
  learningRule.setMaxIterations(12000);
  System.out.println(""Training network..."");
  neuralNet.learn(trainingSet);
  System.out.println(""Testing network...\n\n"");
  testNeuralNetwork(neuralNet,testSet);
  System.out.println(""Done."");
  System.out.println(""**************************************************"");
}
"
2333,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\segmentChallenge\SegmentChallengeSample.java,neuroph,21,165,120,3,0.127,0.0761,0.5,21,3,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  System.out.println(""**************************************************"");
  System.out.println(""**********************RESULT**********************"");
  System.out.println(""**************************************************"");
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    int predicted=maxOutput(networkOutput);
    double[] networkDesiredOutput=testSetRow.getDesiredOutput();
    int ideal=maxOutput(networkDesiredOutput);
    keepScore(predicted,ideal);
  }
  System.out.println(""Total cases: "" + this.count[7] + "". "");
  System.out.println(""Correctly predicted cases: "" + this.correct[7] + "". "");
  System.out.println(""Incorrectly predicted cases: "" + (this.count[7] - this.correct[7] - unpredicted) + "". "");
  System.out.println(""Unrecognized cases: "" + unpredicted + "". "");
  double percentTotal=(double)this.correct[7] * 100 / (double)this.count[7];
  System.out.println(""Predicted correctly: "" + formatDecimalNumber(percentTotal) + ""%. "");
  for (int i=0; i < correct.length - 1; i++) {
    double p=(double)this.correct[i] * 100.0 / (double)this.count[i];
    System.out.println(""Segment class: "" + getClasificationClass(i + 1) + "" - Correct/total: ""+ this.correct[i]+ ""/""+ count[i]+ ""(""+ formatDecimalNumber(p)+ ""%). "");
  }
  this.count=new int[8];
  this.correct=new int[8];
  unpredicted=0;
}
"
2334,handleLearningEvent(LearningEvent),D:\temp\case study\neuroph-2.94\org\neuroph\samples\segmentChallenge\SegmentChallengeSample.java,neuroph,8,20,12,3,0.3333,0.1605,1,3,2,"@Override public void handleLearningEvent(LearningEvent event){
  BackPropagation bp=(BackPropagation)event.getSource();
  if (event.getEventType().equals(LearningEvent.Type.LEARNING_STOPPED)) {
    double error=bp.getTotalNetworkError();
    System.out.println(""Training completed in "" + bp.getCurrentIteration() + "" iterations, "");
    System.out.println(""With total error: "" + formatDecimalNumber(error));
  }
 else {
    System.out.println(""Iteration: "" + bp.getCurrentIteration() + "" | Network error: ""+ bp.getTotalNetworkError());
  }
}
"
2335,maxOutput(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\segmentChallenge\SegmentChallengeSample.java,neuroph,10,31,17,3,0.35,0.1705,0,4,4,"public static int maxOutput(double[] array){
  double max=array[0];
  int index=0;
  for (int i=0; i < array.length; i++) {
    if (array[i] > max) {
      index=i;
      max=array[i];
    }
  }
  if (max < 0.5) {
    return -1;
  }
  return index;
}
"
2336,"keepScore(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\segmentChallenge\SegmentChallengeSample.java,neuroph,9,30,24,4,0.2222,0.0714,0,2,3,"public void keepScore(int prediction,int ideal){
  count[ideal]++;
  count[7]++;
  if (prediction == ideal) {
    correct[ideal]++;
    correct[7]++;
  }
  if (prediction == -1) {
    unpredicted++;
  }
}
"
2340,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\AnimalsClassificationSample.java,neuroph,18,129,105,7,0.142,0.0657,0.75,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/animals_data.txt"";
  int inputsCount=20;
  int outputsCount=7;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,""\t"",true);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,22,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralNetAnimals.nnet"");
  System.out.println(""Done."");
}
"
2341,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\AnimalsClassificationSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2344,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\BalanceScaleSample.java,neuroph,18,129,105,7,0.142,0.0657,0.75,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/balance_scale_data.txt"";
  int inputsCount=20;
  int outputsCount=3;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,""\t"",false);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,22,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralNetBalanceScale.nnet"");
  System.out.println(""Done."");
}
"
2345,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\BalanceScaleSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2348,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\CarEvaluationSample.java,neuroph,18,129,105,7,0.142,0.0657,0.75,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/car_evaluation_data.txt"";
  int inputsCount=21;
  int outputsCount=4;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,""\t"",false);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,22,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralNetCarEvaluation.nnet"");
  System.out.println(""Done."");
}
"
2349,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\CarEvaluationSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2352,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\ConceptLearningAndClassificationSample.java,neuroph,20,162,134,8,0.1333,0.0714,0.777777778,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/concept_learning_and_classification_data_1.txt"";
  int inputsCount=15;
  int outputsCount=3;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,"","",false);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,10,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMomentum(0.7);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralNetConceptLearning.nnet"");
  System.out.println(""Done."");
}
"
2353,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\ConceptLearningAndClassificationSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2356,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\ConcreteStrenghtTestSample.java,neuroph,18,129,105,7,0.142,0.0657,0.75,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/concrete_strenght_test_data.txt"";
  int inputsCount=8;
  int outputsCount=1;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,"","",false);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,22,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralConcreteStrenght.nnet"");
  System.out.println(""Done."");
}
"
2357,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\ConcreteStrenghtTestSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2360,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\ForestFiresSample.java,neuroph,17,112,88,6,0.1503,0.072,0.75,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/forest_fires_data.txt"";
  int inputsCount=29;
  int outputsCount=1;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,"","",false);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,25,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralNetForestFires.nnet"");
  System.out.println(""Done."");
}
"
2361,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\ForestFiresSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2364,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\GlassIdentificationSample.java,neuroph,18,129,105,7,0.142,0.0657,0.75,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/glass_identification_data.txt"";
  int inputsCount=9;
  int outputsCount=7;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,""\t"",false);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,22,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.1);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralGlassIdentification.nnet"");
  System.out.println(""Done."");
}
"
2365,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\GlassIdentificationSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2368,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\LensesClassificationSample.java,neuroph,18,129,105,7,0.142,0.0657,0.75,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/lenses_data.txt"";
  int inputsCount=9;
  int outputsCount=3;
  System.out.println(""Creating training set..."");
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,"" "",false);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,16,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralNetLenses.nnet"");
  System.out.println(""Done."");
}
"
2369,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\LensesClassificationSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2372,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\PredictingPerformanceOfCPUSample.java,neuroph,20,162,134,7,0.13,0.0594,0.8,7,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/cpu_data.txt"";
  int inputsCount=7;
  int outputsCount=1;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,"","",false);
  Normalizer normalizer=new MaxNormalizer();
  normalizer.normalize(dataSet);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,16,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralNetCPU.nnet"");
  System.out.println(""Done."");
}
"
2373,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\PredictingPerformanceOfCPUSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2376,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\PredictingPokerHandsSample.java,neuroph,17,112,88,6,0.1503,0.072,0.75,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/predicting_poker_hands_data.txt"";
  int inputsCount=85;
  int outputsCount=9;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,""\t"",false);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,65,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralNetPokerHands.nnet"");
  System.out.println(""Done."");
}
"
2377,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\PredictingPokerHandsSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2380,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\PredictingTheReligionSample.java,neuroph,17,112,88,6,0.1503,0.072,0.75,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/religion_data.txt"";
  int inputsCount=54;
  int outputsCount=5;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,""\t"",false);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,22,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralNetReligion.nnet"");
  System.out.println(""Done."");
}
"
2381,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\PredictingTheReligionSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2384,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\ShuttleLandingControlSample.java,neuroph,17,112,88,6,0.1503,0.072,0.75,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/shuttle_landing_control_data.txt"";
  int inputsCount=15;
  int outputsCount=2;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,"","",false);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,16,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralNetShuttle.nnet"");
  System.out.println(""Done."");
}
"
2385,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\ShuttleLandingControlSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2388,run(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\WineClassificationSample.java,neuroph,17,112,88,6,0.1503,0.072,0.75,6,1,"public void run(){
  System.out.println(""Creating training set..."");
  String trainingSetFileName=""data_sets/wine_classification_data.txt"";
  int inputsCount=13;
  int outputsCount=3;
  DataSet dataSet=DataSet.createFromFile(trainingSetFileName,inputsCount,outputsCount,""\t"",false);
  System.out.println(""Creating neural network..."");
  MultiLayerPerceptron neuralNet=new MultiLayerPerceptron(inputsCount,22,outputsCount);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.addListener(this);
  learningRule.setLearningRate(0.2);
  learningRule.setMaxError(0.01);
  System.out.println(""Training network..."");
  neuralNet.learn(dataSet);
  System.out.println(""Training completed."");
  System.out.println(""Testing network..."");
  testNeuralNetwork(neuralNet,dataSet);
  System.out.println(""Saving network"");
  neuralNet.save(""MyNeuralNetWineClassification.nnet"");
  System.out.println(""Done."");
}
"
2389,"testNeuralNetwork(NeuralNetwork,DataSet)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\uci\WineClassificationSample.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,4,2,"public void testNeuralNetwork(NeuralNetwork neuralNet,DataSet testSet){
  for (  DataSetRow testSetRow : testSet.getRows()) {
    neuralNet.setInput(testSetRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testSetRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2393,runTask(BenchmarkTask),D:\temp\case study\neuroph-2.94\org\neuroph\util\benchmark\Benchmark.java,neuroph,19,119,67,3,0.1842,0.2304,0,1,2,"/** 
 * Runs specified benchmark tasks, the basic benchmarking workflow.
 * Prepares benchmark, run warming up iterations, measures the execution
 * time for specified number of benchmarking iterations, and gets the benchmarking results
 * @param task 
 */
public static void runTask(BenchmarkTask task){
  System.out.println(""Preparing task "" + task.getName());
  task.prepareTest();
  System.out.println(""Warming up "" + task.getName());
  for (int i=0; i < task.getWarmupIterations(); i++) {
    task.runTest();
  }
  System.out.println(""Runing "" + task.getName());
  Stopwatch timer=new Stopwatch();
  BenchmarkTaskResults results=new BenchmarkTaskResults(task.getTestIterations());
  for (int i=0; i < task.getTestIterations(); i++) {
    timer.reset();
    timer.start();
    task.runTest();
    timer.stop();
    results.addElapsedTime(timer.getElapsedTime());
  }
  results.calculateStatistics();
  System.out.println(task.getName() + "" results"");
  System.out.println(results);
}
"
2413,calculateStatistics(),D:\temp\case study\neuroph-2.94\org\neuroph\util\benchmark\BenchmarkTaskResults.java,neuroph,15,58,11,2,0.2182,0.1549,0,8,5,"public void calculateStatistics(){
  this.minTestTime=elapsedTimes[0];
  this.maxTestTime=elapsedTimes[0];
  long sum=0;
  for (int i=0; i < timesCounter; i++) {
    sum+=elapsedTimes[i];
    if (elapsedTimes[i] < minTestTime) {
      minTestTime=elapsedTimes[i];
    }
    if (elapsedTimes[i] > maxTestTime) {
      maxTestTime=elapsedTimes[i];
    }
  }
  this.averageTestTime=sum / (double)timesCounter;
  long sqrSum=0;
  for (int i=0; i < timesCounter; i++) {
    sqrSum+=(elapsedTimes[i] - averageTestTime) * (elapsedTimes[i] - averageTestTime);
  }
  this.standardDeviation=Math.sqrt(sqrSum / (double)timesCounter);
}
"
2416,prepareTest(),D:\temp\case study\neuroph-2.94\org\neuroph\util\benchmark\MyBenchmarkTask.java,neuroph,14,69,47,3,0.1345,0.0499,0.833333333,10,4,"/** 
 * Benchmrk preparation consists of training set and neural networ creatiion.
 * This method generates training set with 100 rows, where every row has 10 input and 5 output elements
 * Neural network has two hiddden layers with 8 and 7 neurons, and runs learning rule for 2000 iterations
 */
@Override public void prepareTest(){
  int trainingSetSize=100;
  int inputSize=10;
  int outputSize=5;
  this.trainingSet=new DataSet(inputSize,outputSize);
  for (int i=0; i < trainingSetSize; i++) {
    double[] input=new double[inputSize];
    for (int j=0; j < inputSize; j++)     input[j]=Math.random();
    double[] output=new double[outputSize];
    for (int j=0; j < outputSize; j++)     output[j]=Math.random();
    DataSetRow trainingSetRow=new DataSetRow(input,output);
    trainingSet.addRow(trainingSetRow);
  }
  network=new MultiLayerPerceptron(inputSize,8,7,outputSize);
  ((MomentumBackpropagation)network.getLearningRule()).setMaxIterations(2000);
}
"
2431,readInput(),D:\temp\case study\neuroph-2.94\org\neuroph\util\io\InputStreamAdapter.java,neuroph,8,23,18,4,0.225,0.0895,1,3,3,"@Override public double[] readInput(){
  try {
    String inputLine=bufferedReader.readLine();
    if (inputLine != null) {
      double[] inputBuffer=VectorParser.parseDoubleArray(inputLine);
      return inputBuffer;
    }
    return null;
  }
 catch (  IOException ex) {
    throw new NeurophInputException(""Error reading input from stream!"",ex);
  }
}
"
2433,"process(NeuralNetwork,InputAdapter,OutputAdapter)",D:\temp\case study\neuroph-2.94\org\neuroph\util\io\IOHelper.java,neuroph,9,27,18,2,0.2667,0.1111,0.428571429,5,2,"/** 
 * Feeds specified neural network with data from InputAdapter and writes
 * output using OutputAdapter
 * @param neuralNet neural network
 * @param in input data source
 * @param out output data target  
 */
public static void process(NeuralNetwork neuralNet,InputAdapter in,OutputAdapter out){
  double[] input;
  while ((input=in.readInput()) != null) {
    neuralNet.setInput(input);
    neuralNet.calculate();
    double[] output=neuralNet.getOutput();
    out.writeOutput(output);
  }
  in.close();
  out.close();
}
"
2434,"JDBCInputAdapter(Connection,String)",D:\temp\case study\neuroph-2.94\org\neuroph\util\io\JDBCInputAdapter.java,neuroph,9,30,24,4,0.1728,0.0714,1,5,2,"public JDBCInputAdapter(Connection connection,String sql){
  try {
    Statement stmt=connection.createStatement();
    resultSet=stmt.executeQuery(sql);
    ResultSetMetaData rsmd=resultSet.getMetaData();
    inputSize=rsmd.getColumnCount();
  }
 catch (  SQLException ex) {
    Logger.getLogger(JDBCInputAdapter.class.getName()).log(Level.SEVERE,null,ex);
    throw new NeurophInputException(""Error executing query at JdbcInputAdapter"",ex);
  }
}
"
2435,readInput(),D:\temp\case study\neuroph-2.94\org\neuroph\util\io\JDBCInputAdapter.java,neuroph,9,30,24,4,0.2222,0.0929,1,3,4,"/** 
 * Reads next row from result set and returns input for neural network as array of doubles.
 * @return neural network input as array of doubles
 */
@Override public double[] readInput(){
  try {
    while (resultSet.next()) {
      double[] inputBuffer=new double[inputSize];
      for (int i=1; i <= inputSize; i++) {
        inputBuffer[i - 1]=resultSet.getDouble(i);
      }
      return inputBuffer;
    }
  }
 catch (  SQLException ex) {
    throw new NeurophInputException(""Error reading input value from the result set!"",ex);
  }
  return null;
}
"
2438,writeOutput(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\util\io\JDBCOutputAdapter.java,neuroph,22,202,173,10,0.1136,0.0708,1,6,5,"/** 
 * Writes specified output to table in database
 * @param output 
 */
@Override public void writeOutput(double[] output){
  try {
    String sql=""INSERT "" + tableName + "" VALUES("";
    for (int i=0; i < output.length; i++) {
      sql+=""?"";
      if (i < (output.length - 1)) {
        sql="", "";
      }
    }
    sql+="")"";
    PreparedStatement stmt=connection.prepareStatement(sql);
    for (int i=0; i < output.length; i++) {
      stmt.setDouble(i,output[i]);
    }
    stmt.executeUpdate(sql);
    stmt.close();
  }
 catch (  SQLException ex) {
    Logger.getLogger(JDBCOutputAdapter.class.getName()).log(Level.SEVERE,null,ex);
    throw new NeurophInputException(""Error executing query at JDBCOutputAdapter"",ex);
  }
}
"
2452,writeOutput(double[]),D:\temp\case study\neuroph-2.94\org\neuroph\util\io\OutputStreamAdapter.java,neuroph,9,28,20,4,0.2222,0.1333,1,4,3,"/** 
 * Writes specified output to output stream
 * @param output output vector to write
 */
@Override public void writeOutput(double[] output){
  try {
    StringBuilder outputLine=new StringBuilder();
    for (int i=0; i < output.length; i++) {
      outputLine.append(output[i]).append(' ').append(outputLine);
    }
    outputLine.append(System.lineSeparator());
    bufferedWriter.write(outputLine.toString());
  }
 catch (  IOException ex) {
    throw new NeurophOutputException(""Error writing output to stream!"",ex);
  }
}
"
2467,"boxMuller(double,double)",D:\temp\case study\neuroph-2.94\org\neuroph\util\random\GaussianRandomizer.java,neuroph,15,74,43,4,0.1867,0.1139,0,11,3,"/** 
 * Compute a Gaussian random number.
 * @param meanThe mean.
 * @param stdThe standard deviation.
 * @return The random number.
 */
private double boxMuller(double mean,double std){
  double x1, x2, w, y1;
  if (this.useLast) {
    y1=this.y2;
    this.useLast=false;
  }
 else {
    do {
      x1=2.0 * randomGen.nextDouble() - 1.0;
      x2=2.0 * randomGen.nextDouble() - 1.0;
      w=x1 * x1 + x2 * x2;
    }
 while (w >= 1.0);
    w=Math.sqrt((-2.0 * Math.log(w)) / w);
    y1=x1 * w;
    this.y2=x2 * w;
    this.useLast=true;
  }
  return (mean + y1 * std);
}
"
2470,randomize(NeuralNetwork),D:\temp\case study\neuroph-2.94\org\neuroph\util\random\NguyenWidrowRandomizer.java,neuroph,20,155,120,2,0.13,0.0648,0.5,14,7,"@Override public void randomize(NeuralNetwork neuralNetwork){
  super.randomize(neuralNetwork);
  int inputNeuronsCount=neuralNetwork.getInputNeurons().size();
  int hiddenNeuronsCount=0;
  for (int i=1; i < neuralNetwork.getLayersCount() - 1; i++) {
    hiddenNeuronsCount+=neuralNetwork.getLayerAt(i).getNeuronsCount();
  }
  double beta=0.7 * Math.pow(hiddenNeuronsCount,1.0 / inputNeuronsCount);
  List<Layer> layers=neuralNetwork.getLayers();
  for (  Layer layer : layers) {
    double norm=0.0;
    for (    Neuron neuron : layer.getNeurons()) {
      for (      Connection connection : neuron.getInputConnections()) {
        double weight=connection.getWeight().getValue();
        norm+=weight * weight;
      }
    }
    norm=Math.sqrt(norm);
    for (    Neuron neuron : layer.getNeurons()) {
      for (      Connection connection : neuron.getInputConnections()) {
        double weight=connection.getWeight().getValue();
        weight=beta * weight / norm;
        connection.getWeight().setValue(weight);
      }
    }
  }
}
"
2479,randomize(Neuron),D:\temp\case study\neuroph-2.94\org\neuroph\util\random\WeightsRandomizer.java,neuroph,6,12,9,3,0.2667,0.0774,1,4,3,"/** 
 * Iterates and randomizes all connection weights in specified neuron
 * @param neuron neuron to randomize
 */
protected void randomize(Neuron neuron){
  int numberOfInputConnections=neuron.getInputConnections().size();
  double coefficient=1d / Math.sqrt(numberOfInputConnections);
  coefficient=coefficient == 0 ? 1 : coefficient;
  for (  Connection connection : neuron.getInputConnections()) {
    connection.getWeight().setValue(nextRandomWeight());
  }
}
"
2509,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\stockmarket\Main.java,neuroph,38,458,213,4,0.1483,0.2654,0.428571429,8,2,"public static void main(String[] args){
  System.out.println(""Time stamp N1:"" + new SimpleDateFormat(""dd-MMM-yyyy HH:mm:ss:MM"").format(new Date()));
  int maxIterations=10000;
  NeuralNetwork neuralNet=new MultiLayerPerceptron(4,9,1);
  ((LMS)neuralNet.getLearningRule()).setMaxError(0.001);
  ((LMS)neuralNet.getLearningRule()).setLearningRate(0.7);
  ((LMS)neuralNet.getLearningRule()).setMaxIterations(maxIterations);
  DataSet trainingSet=new DataSet(4,1);
  double daxmax=10000.0D;
  trainingSet.addRow(new DataSetRow(new double[]{3710.0D / daxmax,3690.0D / daxmax,3890.0D / daxmax,3695.0D / daxmax},new double[]{3666.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{3690.0D / daxmax,3890.0D / daxmax,3695.0D / daxmax,3666.0D / daxmax},new double[]{3692.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{3890.0D / daxmax,3695.0D / daxmax,3666.0D / daxmax,3692.0D / daxmax},new double[]{3886.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{3695.0D / daxmax,3666.0D / daxmax,3692.0D / daxmax,3886.0D / daxmax},new double[]{3914.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{3666.0D / daxmax,3692.0D / daxmax,3886.0D / daxmax,3914.0D / daxmax},new double[]{3956.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{3692.0D / daxmax,3886.0D / daxmax,3914.0D / daxmax,3956.0D / daxmax},new double[]{3953.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{3886.0D / daxmax,3914.0D / daxmax,3956.0D / daxmax,3953.0D / daxmax},new double[]{4044.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{3914.0D / daxmax,3956.0D / daxmax,3953.0D / daxmax,4044.0D / daxmax},new double[]{3987.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{3956.0D / daxmax,3953.0D / daxmax,4044.0D / daxmax,3987.0D / daxmax},new double[]{3996.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{3953.0D / daxmax,4044.0D / daxmax,3987.0D / daxmax,3996.0D / daxmax},new double[]{4043.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{4044.0D / daxmax,3987.0D / daxmax,3996.0D / daxmax,4043.0D / daxmax},new double[]{4068.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{3987.0D / daxmax,3996.0D / daxmax,4043.0D / daxmax,4068.0D / daxmax},new double[]{4176.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{3996.0D / daxmax,4043.0D / daxmax,4068.0D / daxmax,4176.0D / daxmax},new double[]{4187.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{4043.0D / daxmax,4068.0D / daxmax,4176.0D / daxmax,4187.0D / daxmax},new double[]{4223.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{4068.0D / daxmax,4176.0D / daxmax,4187.0D / daxmax,4223.0D / daxmax},new double[]{4259.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{4176.0D / daxmax,4187.0D / daxmax,4223.0D / daxmax,4259.0D / daxmax},new double[]{4203.0D / daxmax}));
  trainingSet.addRow(new DataSetRow(new double[]{4187.0D / daxmax,4223.0D / daxmax,4259.0D / daxmax,4203.0D / daxmax},new double[]{3989.0D / daxmax}));
  neuralNet.learn(trainingSet);
  System.out.println(""Time stamp N2:"" + new SimpleDateFormat(""dd-MMM-yyyy HH:mm:ss:MM"").format(new Date()));
  DataSet testSet=new DataSet(4,1);
  testSet.addRow(new DataSetRow(new double[]{4223.0D / daxmax,4259.0D / daxmax,4203.0D / daxmax,3989.0D / daxmax}));
  for (  DataSetRow testDataRow : testSet.getRows()) {
    neuralNet.setInput(testDataRow.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(testDataRow.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
  System.out.println(""Time stamp N3:"" + new SimpleDateFormat(""dd-MMM-yyyy HH:mm:ss:MM"").format(new Date()));
  System.exit(0);
}
"
2516,read(String),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\stockmarket\StockFileReader.java,neuroph,36,580,530,10,0.0661,0.0315,0,16,5,"@SuppressWarnings(""static-access"") public void read(String fileName){
  HashMap hm=new HashMap();
  File file=new File(fileName);
  System.out.println(""file = "" + fileName + "". It will be filtered the values for the moment of the market opened"");
  int counter=0;
  try {
    FileInputStream fis=new FileInputStream(file);
    BufferedReader dis=new BufferedReader(new InputStreamReader(fis));
    String s;
    while ((s=dis.readLine()) != null) {
      String[] s1=s.split("","");
      String s00=s1[0].replace('\""',' ').trim();
      String s01=s1[1].replace('\""',' ').trim();
      hm.put(s00,s.replace('\""',' ').trim());
      counter=counter + 1;
    }
    fis.close();
  }
 catch (  IOException ioe) {
    System.out.println(""Oops- an IOException happened."");
    ioe.printStackTrace();
    System.exit(1);
  }
  System.out.println(""full number of values = "" + counter);
  Set s=hm.keySet();
  Iterator i=s.iterator();
  valuesRow=new String[this.getMaxCounter()];
  int n=0;
  while (i.hasNext()) {
    String key=(String)i.next();
    String value=(String)hm.get(key);
    n=n + 1;
    if (counter - n < this.getMaxCounter()) {
      valuesRow[counter - n]=value;
      System.out.println(counter + "" "" + n+ "" ""+ valuesRow[counter - n]+ "" ""+ (counter - n));
    }
  }
  System.out.println(""valuesRow.length="" + valuesRow.length);
}
"
2525,run(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\stockmarket\StockSocketReader.java,neuroph,23,235,217,10,0.087,0.0337,0,9,5,"@SuppressWarnings(""static-access"") public void run(){
  valuesRow=new String[this.getMaxCounter()];
  for (int i=0; i < this.getMaxCounter(); i++) {
    InputStream is=null;
    try {
      String surl=""http://download.finance.yahoo.com/d/quotes.csv?s=^GDAXI&f=sl1d1t1c1ohgv&e=.csv"";
      URL url=new URL(surl);
      is=url.openStream();
      BufferedReader dis=new BufferedReader(new InputStreamReader(is));
      String s=dis.readLine();
      System.out.println(s);
      valuesRow[i]=s;
      is.close();
    }
 catch (    MalformedURLException mue) {
      System.out.println(""Ouch - a MalformedURLException happened."");
      mue.printStackTrace();
      System.exit(1);
    }
catch (    IOException ioe) {
      System.out.println(""Oops- an IOException happened."");
      ioe.printStackTrace();
      System.exit(1);
    }
    try {
      Thread.currentThread().sleep(this.getTsleep());
    }
 catch (    InterruptedException e) {
    }
  }
  System.out.println(""valuesRow.length="" + valuesRow.length);
}
"
2526,"importFromArray(double[],int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\stockmarket\StockTrainingSetImport.java,neuroph,15,69,33,3,0.24,0.1213,0.666666667,9,7,"/** 
 * Creates and returns training set for stock market prediction using the provided data from array
 * @param values an array containing stock data
 * @param inputsCount training element (neural net) inputs count
 * @param outputsCount training element (neural net) ouputs count
 * @return training set with stock data
 */
public static DataSet importFromArray(double[] values,int inputsCount,int outputsCount){
  DataSet trainingSet=new DataSet(inputsCount,outputsCount);
  for (int i=0; i < values.length - inputsCount; i++) {
    ArrayList<Double> inputs=new ArrayList<Double>();
    for (int j=i; j < i + inputsCount; j++) {
      inputs.add(values[j]);
    }
    ArrayList<Double> outputs=new ArrayList<Double>();
    if (outputsCount > 0 && i + inputsCount + outputsCount <= values.length) {
      for (int j=i + inputsCount; j < i + inputsCount + outputsCount; j++) {
        outputs.add(values[j]);
      }
      if (outputsCount > 0) {
        trainingSet.addRow(new DataSetRow(inputs,outputs));
      }
 else {
        trainingSet.addRow(new DataSetRow(inputs));
      }
    }
  }
  return trainingSet;
}
"
2536,doIt(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\timeseries\GenerateSet.java,neuroph,6,15,15,6,0.1667,0,0,0,2,"/** 
 * Does the data set generation
 * @throws IOException
 */
public void doIt() throws IOException {
  if (simple) {
    doItSimple();
  }
 else {
    doItSupposition();
  }
}
"
2537,doItSimple(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\timeseries\GenerateSet.java,neuroph,19,142,113,5,0.1134,0.0848,0.5,9,6,"/** 
 * Generates simple sine wave data set
 * @throws IOException
 */
private void doItSimple() throws IOException {
  double buffer[]=new double[memorySize + 1];
  int bufferSize=buffer.length;
  int bufferFull=buffer.length;
  GenerateSineWave gsw=new GenerateSineWave(1,1);
  BufferedWriter out=new BufferedWriter(new FileWriter(filename));
  for (int samples=0; samples < 1000; samples++) {
    for (int j=0; j < sampleEvery; j++) {
      gsw.getNextSample();
    }
    for (int i=1; i < bufferSize; i++) {
      buffer[i - 1]=buffer[i];
    }
    buffer[bufferSize - 1]=gsw.getNextSample();
    bufferFull--;
    if (bufferFull <= 0) {
      for (int i=0; i < bufferSize; i++) {
        out.write(buffer[i] + ""\t"");
      }
      out.write(""\n"");
    }
  }
  out.flush();
  out.close();
}
"
2538,doItSupposition(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\timeseries\GenerateSet.java,neuroph,20,162,134,5,0.1167,0.075,0.5,10,6,"/** 
 * Generates supposition sine wave data set
 * @throws IOException
 */
private void doItSupposition() throws IOException {
  BufferedWriter out=new BufferedWriter(new FileWriter(filename));
  double buffer[]=new double[memorySize + 1];
  int bufferSize=buffer.length;
  int bufferFull=buffer.length;
  GenerateSineWave gsw1=new GenerateSineWave(1,0.5);
  GenerateSineWave gsw2=new GenerateSineWave(4,0.5);
  for (int samples=0; samples < 1000; samples++) {
    for (int j=0; j < sampleEvery; j++) {
      gsw1.getNextSample();
      gsw2.getNextSample();
    }
    for (int i=1; i < bufferSize; i++) {
      buffer[i - 1]=buffer[i];
    }
    buffer[bufferSize - 1]=gsw1.getNextSample() + gsw2.getNextSample();
    bufferFull--;
    if (bufferFull <= 0) {
      for (int i=0; i < bufferSize; i++) {
        out.write(buffer[i] + ""\t"");
      }
      out.write(""\n"");
    }
  }
  out.flush();
  out.close();
}
"
2541,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\timeseries\GenerateTrainingSets.java,neuroph,24,85,0,4,0.4167,0.4545,0.5,4,2,"/** 
 * Generates datasets used in time series prediction tutorial
 */
public static void main(String[] args){
  final String directory=""C:\\java\\Neuroph_2.3\\Neuroph\\tutorial\\"";
  try {
    GenerateSet gs=new GenerateSet(directory + ""BSW15"",true,1,5);
    gs.doIt();
    gs=new GenerateSet(directory + ""BSW120"",true,1,20);
    gs.doIt();
    gs=new GenerateSet(directory + ""BSW210"",true,2,10);
    gs.doIt();
    gs=new GenerateSet(directory + ""BSW220"",true,2,20);
    gs.doIt();
    gs=new GenerateSet(directory + ""BSW55"",true,5,5);
    gs.doIt();
    gs=new GenerateSet(directory + ""SSW15"",false,1,5);
    gs.doIt();
    gs=new GenerateSet(directory + ""SSW120"",false,1,20);
    gs.doIt();
    gs=new GenerateSet(directory + ""SSW210"",false,2,10);
    gs.doIt();
    gs=new GenerateSet(directory + ""SSW540"",false,5,40);
    gs.doIt();
    gs=new GenerateSet(directory + ""SSW1010"",false,10,10);
    gs.doIt();
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.out.println(""Failed to generate all data sets."");
    System.exit(1);
  }
  System.out.println(""Generated data sets."");
}
"
2543,train(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\timeseries\TestTimeSeries.java,neuroph,8,18,8,2,0.2188,0.1577,0.857142857,2,1,"public void train(){
  String inputFileName=""C:\\timeseries\\BSW15"";
  neuralNet=new MultiLayerPerceptron(TransferFunctionType.TANH,5,10,1);
  MomentumBackpropagation learningRule=(MomentumBackpropagation)neuralNet.getLearningRule();
  learningRule.setLearningRate(0.2);
  learningRule.setMomentum(0.5);
  learningRule.addListener(this);
  trainingSet=DataSet.createFromFile(inputFileName,5,1,""\t"",false);
  neuralNet.learn(trainingSet);
  System.out.println(""Done training."");
}
"
2544,testNeuralNetwork(),D:\temp\case study\neuroph-2.94\org\neuroph\contrib\samples\timeseries\TestTimeSeries.java,neuroph,7,14,7,2,0.3214,0.1508,0.6,2,2,"/** 
 * Prints network output for the each element from the specified training set.
 * @param neuralNet neural network
 * @param trainingSet training set
 */
public void testNeuralNetwork(){
  System.out.println(""Testing network..."");
  for (  DataSetRow trainingElement : trainingSet.getRows()) {
    neuralNet.setInput(trainingElement.getInput());
    neuralNet.calculate();
    double[] networkOutput=neuralNet.getOutput();
    System.out.print(""Input: "" + Arrays.toString(trainingElement.getInput()));
    System.out.println("" Output: "" + Arrays.toString(networkOutput));
  }
}
"
2550,"addPatternError(double[],double[])",D:\temp\case study\neuroph-2.94\org\neuroph\core\learning\error\MeanSquaredError.java,neuroph,7,13,5,3,0.2857,0.1579,0,4,2,"@Override public double[] addPatternError(double[] predictedOutput,double[] targetOutput){
  double[] patternError=new double[targetOutput.length];
  for (int i=0; i < predictedOutput.length; i++) {
    patternError[i]=predictedOutput[i] - targetOutput[i];
    totalError+=patternError[i] * patternError[i];
  }
  patternCount++;
  return patternError;
}
"
2560,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\AdaptiveThresholdBinarizeFilter.java,neuroph,55,1207,929,2,0.078,0.0507,1,22,12,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  int alpha;
  double gray;
  double[][] G=new double[width][height];
  gray=new Color(originalImage.getRGB(0,0)).getRed();
  G[0][0]=gray / 255;
  for (int i=1; i < width; i++) {
    gray=new Color(originalImage.getRGB(i,0)).getRed();
    G[i][0]=G[i - 1][0] + gray / 255;
  }
  for (int j=1; j < height; j++) {
    gray=new Color(originalImage.getRGB(0,j)).getRed();
    G[0][j]=G[0][j - 1] + gray / 255;
  }
  for (int i=1; i < width; i++) {
    for (int j=1; j < height; j++) {
      gray=new Color(originalImage.getRGB(i,j)).getRed();
      G[i][j]=gray / 255 + G[i][j - 1] + G[i - 1][j] - G[i - 1][j - 1];
    }
  }
  int d=windowSize / 2;
  int A=0;
  int B=0;
  int C=0;
  int D=0;
  double s;
  double m;
  double delta;
  double treshold;
  int newColor;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      if (i + d - 1 >= width) {
        A=width - 1;
      }
 else {
        A=i + d - 1;
      }
      if (j + d - 1 >= height) {
        B=height - 1;
      }
 else {
        B=j + d - 1;
      }
      if (i - d < 0) {
        C=0;
      }
 else {
        C=i - d;
      }
      if (j - d < 0) {
        D=0;
      }
 else {
        D=j - d;
      }
      s=(G[A][B] + G[C][D]) - (G[C][B] + G[A][D]);
      m=s / (windowSize * windowSize);
      gray=new Color(originalImage.getRGB(i,j)).getRed();
      delta=gray / 255 - m;
      treshold=m * (1 + k * (delta / (1.0 - delta) - 1));
      if (gray / 255 > treshold) {
        newColor=255;
      }
 else {
        newColor=0;
      }
      alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      newColor=ImageUtilities.colorToRGB(alpha,newColor,newColor,newColor);
      filteredImage.setRGB(i,j,newColor);
    }
  }
  return filteredImage;
}
"
2565,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DCTgrayscale.java,neuroph,30,341,247,2,0.1016,0.0802,0,15,9,"@Override public BufferedImage processImage(BufferedImage image){
  int width=image.getWidth();
  int height=image.getHeight();
  while (width % N != 0) {
    width--;
  }
  while (height % N != 0) {
    height--;
  }
  originalImage=resize(image,width,height);
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  int numXpatches=width / N;
  int numYpatches=height / N;
  double[][] T=createT();
  double[][] Tinv=null;
  if (N == 8)   Tinv=createTinv();
  if (N == 16)   Tinv=createTinv16X16();
  for (int i=0; i < numXpatches; i++) {
    for (int j=0; j < numYpatches; j++) {
      double[][] M=createM(i,j);
      double[][] D=multiply(multiply(T,M),Tinv);
      int[][] Q=null;
      if (N == 8) {
        Q=createQ50();
        updateQ(Q);
      }
      if (N == 16) {
        Q=createQ16X16();
      }
      int[][] C=createC(D,Q);
      double[][] R=createR(Q,C);
      int[][] Nmatrix=createN(Tinv,R,T);
      fillFilteredImage(i,j,Nmatrix);
    }
  }
  return filteredImage;
}
"
2566,"resize(BufferedImage,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DCTgrayscale.java,neuroph,10,33,21,3,0.2286,0.1245,0,7,1,"public BufferedImage resize(BufferedImage img,int newW,int newH){
  int w=img.getWidth();
  int h=img.getHeight();
  BufferedImage dimg=dimg=new BufferedImage(newW,newH,img.getType());
  Graphics2D g=dimg.createGraphics();
  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  g.drawImage(img,0,0,newW,newH,0,0,w,h,null);
  g.dispose();
  return dimg;
}
"
2567,createT(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DCTgrayscale.java,neuroph,9,21,6,3,0.3148,0.1505,0,4,4,"public double[][] createT(){
  double[][] T=new double[N][N];
  for (int i=0; i < N; i++) {
    T[0][i]=roundFourDecimals(1.0 / Math.sqrt(N));
  }
  for (int i=1; i < N; i++) {
    for (int j=0; j < N; j++) {
      T[i][j]=roundFourDecimals(Math.sqrt(2.0 / N) * Math.cos(((2.0 * j + 1) * i * Math.PI) / (2.0 * N)));
    }
  }
  return T;
}
"
2568,"createM(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DCTgrayscale.java,neuroph,12,51,36,3,0.1667,0.0988,0,7,3,"public double[][] createM(int i,int j){
  double[][] M=new double[N][N];
  int xx=0;
  int yy=0;
  for (int x=i * N; x < i * N + N; x++) {
    for (int y=j * N; y < j * N + N; y++) {
      M[xx][yy]=new Color(originalImage.getRGB(x,y)).getRed() - 128;
      yy++;
    }
    xx++;
    yy=0;
  }
  return M;
}
"
2572,"multiply(double[][],double[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DCTgrayscale.java,neuroph,10,36,27,3,0.19,0.0616,0,12,5,"public double[][] multiply(double[][] m1,double[][] m2){
  int m1rows=m1.length;
  int m1cols=m1[0].length;
  int m2rows=m2.length;
  int m2cols=m2[0].length;
  if (m1cols != m2rows)   throw new IllegalArgumentException(""matrices don't match: "" + m1cols + "" != ""+ m2rows);
  double[][] result=new double[m1rows][m2cols];
  for (int i=0; i < m1rows; i++)   for (int j=0; j < m2cols; j++)   for (int k=0; k < m1cols; k++)   result[i][j]+=m1[i][k] * m2[k][j];
  return result;
}
"
2574,"createC(double[][],int[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DCTgrayscale.java,neuroph,7,15,9,3,0.2449,0.0976,0,5,3,"public int[][] createC(double[][] D,int[][] Q){
  int[][] C=new int[N][N];
  for (int i=0; i < N; i++) {
    for (int j=0; j < N; j++) {
      C[i][j]=(int)Math.round(D[i][j] / Q[i][j]);
    }
  }
  return C;
}
"
2575,"createR(int[][],int[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DCTgrayscale.java,neuroph,7,15,9,3,0.2619,0.1033,0,5,3,"public double[][] createR(int[][] Q,int[][] C){
  double[][] R=new double[N][N];
  for (int i=0; i < N; i++) {
    for (int j=0; j < N; j++) {
      R[i][j]=Q[i][j] * C[i][j];
    }
  }
  return R;
}
"
2576,"createN(double[][],double[][],double[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DCTgrayscale.java,neuroph,8,21,14,3,0.2,0.0807,0,7,3,"public int[][] createN(double[][] Tinv,double[][] R,double[][] T){
  int[][] Nmatrix=new int[N][N];
  double[][] tmp=multiply(multiply(Tinv,R),T);
  for (int i=0; i < N; i++) {
    for (int j=0; j < N; j++) {
      Nmatrix[i][j]=(int)(Math.round(tmp[i][j]) + 128);
    }
  }
  return Nmatrix;
}
"
2577,"fillFilteredImage(int,int,int[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DCTgrayscale.java,neuroph,13,68,58,5,0.1346,0.0672,1,10,3,"public void fillFilteredImage(int i,int j,int[][] Nmatrix){
  int xx=0;
  int yy=0;
  for (int x=i * N; x < i * N + N; x++) {
    for (int y=j * N; y < j * N + N; y++) {
      int alpha=new Color(originalImage.getRGB(x,y)).getAlpha();
      int color=Nmatrix[xx][yy];
      int rgb=ImageUtilities.colorToRGB(alpha,color,color,color);
      yy++;
      filteredImage.setRGB(x,y,rgb);
    }
    xx++;
    yy=0;
  }
}
"
2578,updateQ(int[][]),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DCTgrayscale.java,neuroph,10,25,5,2,0.2625,0.1621,0,5,8,"public void updateQ(int[][] Q){
  if (qualityLevel == 50)   return;
  if (qualityLevel > 50) {
    for (int i=0; i < N; i++) {
      for (int j=0; j < N; j++) {
        Q[i][j]=(int)Math.round(Q[i][j] * (100 - qualityLevel) * 1.0 / 50);
      }
    }
  }
  if (qualityLevel < 50) {
    for (int i=0; i < N; i++) {
      for (int j=0; j < N; j++) {
        Q[i][j]=(int)Math.round(Q[i][j] * 50.0 / qualityLevel);
      }
    }
  }
}
"
2584,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DenoiseDCTFilter.java,neuroph,34,463,365,2,0.087,0.0727,0,16,9,"@Override public BufferedImage processImage(BufferedImage image){
  int width=image.getWidth();
  int height=image.getHeight();
  while (width % N != 0) {
    width--;
  }
  while (height % N != 0) {
    height--;
  }
  originalImage=resize(image,width,height);
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  int numXpatches=width / N;
  int numYpatches=height / N;
  double treshold=3 * sigma;
  double[][] T=createT();
  double[][] Tinv=null;
  if (N == 16) {
    Tinv=createTinv16X16();
  }
  if (N == 8) {
    Tinv=createTinv();
  }
  for (int i=0; i < numXpatches; i++) {
    for (int j=0; j < numYpatches; j++) {
      double[][] M=createM(i,j);
      double[][] D=multiply(multiply(T,M),Tinv);
      tresholdDmatrix(D,treshold);
      int[][] Q=null;
      if (N == 16) {
        Q=createQ16X16();
      }
      if (N == 8) {
        Q=createQ50();
        updateQ(Q);
      }
      int[][] C=createC(D,Q);
      double[][] R=createR(Q,C);
      int[][] Nmatrix=createN(Tinv,R,T);
      fillFilteredImage(i,j,Nmatrix);
    }
  }
  return filteredImage;
}
"
2585,"resize(BufferedImage,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DenoiseDCTFilter.java,neuroph,10,33,21,3,0.2286,0.1245,0,7,1,"public BufferedImage resize(BufferedImage img,int newW,int newH){
  int w=img.getWidth();
  int h=img.getHeight();
  BufferedImage dimg=dimg=new BufferedImage(newW,newH,img.getType());
  Graphics2D g=dimg.createGraphics();
  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  g.drawImage(img,0,0,newW,newH,0,0,w,h,null);
  g.dispose();
  return dimg;
}
"
2586,createT(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DenoiseDCTFilter.java,neuroph,9,21,6,3,0.3148,0.1505,0,4,4,"public double[][] createT(){
  double[][] T=new double[N][N];
  for (int i=0; i < N; i++) {
    T[0][i]=roundFourDecimals(1.0 / Math.sqrt(N));
  }
  for (int i=1; i < N; i++) {
    for (int j=0; j < N; j++) {
      T[i][j]=roundFourDecimals(Math.sqrt(2.0 / N) * Math.cos(((2.0 * j + 1) * i * Math.PI) / (2.0 * N)));
    }
  }
  return T;
}
"
2587,"createM(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DenoiseDCTFilter.java,neuroph,12,51,36,3,0.1667,0.0988,0,7,3,"public double[][] createM(int i,int j){
  double[][] M=new double[N][N];
  int xx=0;
  int yy=0;
  for (int x=i * N; x < i * N + N; x++) {
    for (int y=j * N; y < j * N + N; y++) {
      M[xx][yy]=new Color(originalImage.getRGB(x,y)).getRed() - 128;
      yy++;
    }
    xx++;
    yy=0;
  }
  return M;
}
"
2591,"multiply(double[][],double[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DenoiseDCTFilter.java,neuroph,10,36,27,3,0.19,0.0616,0,12,5,"public double[][] multiply(double[][] m1,double[][] m2){
  int m1rows=m1.length;
  int m1cols=m1[0].length;
  int m2rows=m2.length;
  int m2cols=m2[0].length;
  if (m1cols != m2rows)   throw new IllegalArgumentException(""matrices don't match: "" + m1cols + "" != ""+ m2rows);
  double[][] result=new double[m1rows][m2cols];
  for (int i=0; i < m1rows; i++)   for (int j=0; j < m2cols; j++)   for (int k=0; k < m1cols; k++)   result[i][j]+=m1[i][k] * m2[k][j];
  return result;
}
"
2593,"createC(double[][],int[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DenoiseDCTFilter.java,neuroph,7,15,9,3,0.2449,0.0976,0,5,3,"public int[][] createC(double[][] D,int[][] Q){
  int[][] C=new int[N][N];
  for (int i=0; i < N; i++) {
    for (int j=0; j < N; j++) {
      C[i][j]=(int)Math.round(D[i][j] / Q[i][j]);
    }
  }
  return C;
}
"
2594,"createR(int[][],int[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DenoiseDCTFilter.java,neuroph,7,15,9,3,0.2619,0.1033,0,5,3,"public double[][] createR(int[][] Q,int[][] C){
  double[][] R=new double[N][N];
  for (int i=0; i < N; i++) {
    for (int j=0; j < N; j++) {
      R[i][j]=Q[i][j] * C[i][j];
    }
  }
  return R;
}
"
2595,"createN(double[][],double[][],double[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DenoiseDCTFilter.java,neuroph,8,21,14,3,0.2,0.0807,0,7,3,"public int[][] createN(double[][] Tinv,double[][] R,double[][] T){
  int[][] Nmatrix=new int[N][N];
  double[][] tmp=multiply(multiply(Tinv,R),T);
  for (int i=0; i < N; i++) {
    for (int j=0; j < N; j++) {
      Nmatrix[i][j]=(int)(Math.round(tmp[i][j]) + 128);
    }
  }
  return Nmatrix;
}
"
2596,"fillFilteredImage(int,int,int[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DenoiseDCTFilter.java,neuroph,13,68,58,5,0.1346,0.0672,1,10,3,"public void fillFilteredImage(int i,int j,int[][] Nmatrix){
  int xx=0;
  int yy=0;
  for (int x=i * N; x < i * N + N; x++) {
    for (int y=j * N; y < j * N + N; y++) {
      int alpha=new Color(originalImage.getRGB(x,y)).getAlpha();
      int color=Nmatrix[xx][yy];
      int rgb=ImageUtilities.colorToRGB(alpha,color,color,color);
      yy++;
      filteredImage.setRGB(x,y,rgb);
    }
    xx++;
    yy=0;
  }
}
"
2597,"tresholdDmatrix(double[][],double)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DenoiseDCTFilter.java,neuroph,6,11,7,3,0.2619,0.0561,0,5,4,"public void tresholdDmatrix(double[][] D,double treshold){
  for (int i=0; i < N; i++) {
    for (int j=0; j < N; j++) {
      double coef=D[i][j];
      if (Math.abs(coef) < treshold)       D[i][j]=0;
    }
  }
}
"
2598,updateQ(int[][]),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\DenoiseDCTFilter.java,neuroph,10,25,5,2,0.2625,0.1621,0,5,8,"public void updateQ(int[][] Q){
  if (qualityLevel == 50)   return;
  if (qualityLevel > 50) {
    for (int i=0; i < N; i++) {
      for (int j=0; j < N; j++) {
        Q[i][j]=(int)Math.round(Q[i][j] * (100 - qualityLevel) * 1.0 / 50);
      }
    }
  }
  if (qualityLevel < 50) {
    for (int i=0; i < N; i++) {
      for (int j=0; j < N; j++) {
        Q[i][j]=(int)Math.round(Q[i][j] * 50.0 / qualityLevel);
      }
    }
  }
}
"
2604,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\Dilation.java,neuroph,17,116,96,4,0.1255,0.0421,1,8,4,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  width=originalImage.getWidth();
  height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  kernel=createKernel();
  int white=255;
  int black=0;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      int color=new Color(originalImage.getRGB(i,j)).getRed();
      if (color == black) {
        convolve(i,j);
      }
 else {
        int alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
        int rgb=ImageUtilities.colorToRGB(alpha,white,white,white);
        filteredImage.setRGB(i,j,rgb);
      }
    }
  }
  return filteredImage;
}
"
2606,"convolve(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\Dilation.java,neuroph,9,28,20,3,0.1818,0.0507,1,7,7,"private void convolve(int i,int j){
  for (int x=i - 2; x <= i + 2; x++) {
    for (int y=j - 2; y <= j + 2; y++) {
      if (x >= 0 && y >= 0 && x < width && y < height) {
        int black=0;
        int alpha=new Color(originalImage.getRGB(x,y)).getAlpha();
        int rgb=ImageUtilities.colorToRGB(alpha,black,black,black);
        filteredImage.setRGB(x,y,rgb);
      }
    }
  }
}
"
2608,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\EdgeDetection.java,neuroph,27,310,269,6,0.0899,0.0259,0,16,7,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  setAttributes(image);
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  int[][] filter1={{-1,0,1},{-2,0,2},{-1,0,1}};
  int[][] filter2={{1,2,1},{0,0,0},{-1,-2,-1}};
  for (int y=1; y < height - 1; y++) {
    for (int x=1; x < width - 1; x++) {
      int[][] gray=new int[3][3];
      for (int i=0; i < 3; i++) {
        for (int j=0; j < 3; j++) {
          gray[i][j]=(int)lum(new Color(originalImage.getRGB(x - 1 + i,y - 1 + j)));
        }
      }
      int gray1=0, gray2=0;
      for (int i=0; i < 3; i++) {
        for (int j=0; j < 3; j++) {
          gray1+=gray[i][j] * filter1[i][j];
          gray2+=gray[i][j] * filter2[i][j];
        }
      }
      int magnitude=255 - truncate((int)Math.sqrt(gray1 * gray1 + gray2 * gray2));
      Color grayscale=new Color(magnitude,magnitude,magnitude);
      filteredImage.setRGB(x,y,grayscale.getRGB());
    }
  }
  return filteredImage;
}
"
2611,lum(Color),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\EdgeDetection.java,neuroph,6,9,3,3,0.375,0.125,0,4,1,"/** 
 * Return the  luminance of a given color
 * @param color - color of one pixel in image. 
 * @return - luminance of a color
 */
public double lum(Color color){
  int r=color.getRed();
  int g=color.getGreen();
  int b=color.getBlue();
  return .299 * r + .587 * g + .114 * b;
}
"
2613,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\EraseBlackBorderFilter.java,neuroph,32,387,278,2,0.0961,0.0551,1,20,8,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  int centerI=width / 2;
  int centerJ=height / 2;
  int lengthI=width / 4;
  int lengthJ=height / 6;
  int startI=centerI - lengthI / 2;
  int goalI=centerI + lengthI / 2;
  int startJ=centerJ - lengthJ / 2;
  int goalJ=centerJ + lengthJ / 2;
  boolean[][] visited;
  visited=new boolean[width][height];
  int color;
  for (int i=startI; i < goalI; i++) {
    for (int j=startJ; j < goalJ; j++) {
      color=new Color(originalImage.getRGB(i,j)).getRed();
      if (color == 0) {
        if (!visited[i][j]) {
          BFS(i,j,visited);
        }
      }
    }
  }
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      int alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      if (!visited[i][j]) {
        int white=255;
        color=ImageUtilities.colorToRGB(alpha,white,white,white);
        filteredImage.setRGB(i,j,color);
      }
 else {
        int black=0;
        color=ImageUtilities.colorToRGB(alpha,black,black,black);
        filteredImage.setRGB(i,j,color);
      }
    }
  }
  return filteredImage;
}
"
2614,"BFS(int,int,boolean[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\EraseBlackBorderFilter.java,neuroph,20,133,76,2,0.1733,0.0993,0,13,12,"public void BFS(int startI,int startJ,boolean[][] visited){
  LinkedList<String> queue=new LinkedList<String>();
  String positions=startI + "" "" + startJ;
  visited[startI][startJ]=true;
  queue.addLast(positions);
  while (!queue.isEmpty()) {
    String pos=queue.removeFirst();
    String[] posArray=pos.split("" "");
    int x=Integer.parseInt(posArray[0]);
    int y=Integer.parseInt(posArray[1]);
    visited[x][y]=true;
    for (int i=x - 1; i <= x + 1; i++) {
      for (int j=y - 1; j <= y + 1; j++) {
        if (i >= 0 && j >= 0 && i < originalImage.getWidth() && j < originalImage.getHeight() && i != x && j != y) {
          if (!visited[i][j]) {
            int color=new Color(originalImage.getRGB(i,j)).getRed();
            if (color == 0) {
              visited[i][j]=true;
              String tmpPos=i + "" "" + j;
              queue.addLast(tmpPos);
            }
          }
        }
      }
    }
  }
}
"
2617,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\GaussianBluring.java,neuroph,16,84,48,3,0.1424,0.0689,1,12,3,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int oldWidth=image.getWidth();
  int oldHeight=image.getHeight();
  int width=image.getWidth() - 2 * radius;
  int height=image.getHeight() - 2 * radius;
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  createKernel();
  for (int i=radius; i < oldWidth - radius; i++) {
    for (int j=radius; j < oldHeight - radius; j++) {
      int alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      int newColor=getNewColor(i,j);
      int rgb=ImageUtilities.colorToRGB(alpha,newColor,newColor,newColor);
      int x=i - radius;
      int y=j - radius;
      filteredImage.setRGB(x,y,rgb);
    }
  }
  return filteredImage;
}
"
2618,createKernel(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\GaussianBluring.java,neuroph,12,29,0,1,0.2179,0.1592,0,11,5,"protected void createKernel(){
  int size=radius * 2 + 1;
  int center=radius;
  kernel=new double[size][size];
  for (int i=0; i < kernel.length; i++) {
    for (int j=0; j < kernel[0].length; j++) {
      int distanceX=Math.abs(center - i);
      int distanceY=Math.abs(center - j);
      kernel[i][j]=gaussianFormula(distanceX,distanceY);
    }
  }
  double noralizationValue=getNormalizationValue(kernel);
  for (int i=0; i < kernel.length; i++) {
    for (int j=0; j < kernel[0].length; j++) {
      kernel[i][j]=kernel[i][j] * noralizationValue;
    }
  }
}
"
2619,"gaussianFormula(double,double)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\GaussianBluring.java,neuroph,8,21,14,3,0.25,0.1049,0,5,1,"public double gaussianFormula(double x,double y){
  double one=1.0;
  double value=one / (2 * Math.PI * sigma* sigma);
  double exp=-(x * x + y * y) / (2 * sigma * sigma);
  exp=Math.pow(Math.E,exp);
  value=value * exp;
  return value;
}
"
2627,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\GaussianNoise.java,neuroph,19,140,109,2,0.11,0.0475,1,15,6,"@Override public BufferedImage processImage(BufferedImage image){
  double variance=sigma * sigma;
  originalImage=image;
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  double a=0.0;
  double b=0.0;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      while (a == 0.0)       a=Math.random();
      b=Math.random();
      double x=Math.sqrt(-2 * Math.log(a)) * Math.cos(2 * Math.PI * b);
      double noise=mean + Math.sqrt(variance) * x;
      int gray=new Color(originalImage.getRGB(i,j)).getRed();
      int alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      double color=gray + noise;
      if (color > 255)       color=255;
      if (color < 0)       color=0;
      int newColor=(int)Math.round(color);
      int rgb=ImageUtilities.colorToRGB(alpha,newColor,newColor,newColor);
      filteredImage.setRGB(i,j,rgb);
    }
  }
  return filteredImage;
}
"
2632,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\GenericConvolution.java,neuroph,16,97,74,4,0.1287,0.0454,1,10,4,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  int radius=kernel.length / 2;
  if (normalize) {
    normalizeKernel();
  }
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++) {
      double result=convolve(x,y,radius);
      int gray=(int)Math.round(result);
      int alpha=new Color(originalImage.getRGB(x,y)).getAlpha();
      int rgb=ImageUtilities.colorToRGB(alpha,gray,gray,gray);
      filteredImage.setRGB(x,y,rgb);
    }
  }
  return filteredImage;
}
"
2633,"convolve(int,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\GenericConvolution.java,neuroph,13,65,52,4,0.1469,0.0649,0,9,7,"protected double convolve(int x,int y,int radius){
  double sum=0;
  int kernelI=0;
  for (int i=x - radius; i <= x + radius; i++) {
    int kernelJ=0;
    for (int j=y - radius; j <= y + radius; j++) {
      if (i >= 0 && i < originalImage.getWidth() && j > 0 && j < originalImage.getHeight()) {
        int color=new Color(originalImage.getRGB(i,j)).getRed();
        sum=sum + color * kernel[kernelI][kernelJ];
      }
      kernelJ++;
    }
    kernelI++;
  }
  return sum;
}
"
2634,normalizeKernel(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\GenericConvolution.java,neuroph,9,19,2,3,0.3148,0.161,0,5,5,"private void normalizeKernel(){
  int n=0;
  for (int i=0; i < kernel.length; i++) {
    for (int j=0; j < kernel.length; j++) {
      n+=kernel[i][j];
    }
  }
  for (int i=0; i < kernel.length; i++) {
    for (int j=0; j < kernel.length; j++) {
      kernel[i][j]=kernel[i][j] / n;
    }
  }
}
"
2638,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\GrayscaleFilter.java,neuroph,21,143,76,3,0.1577,0.0769,1,10,3,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int alpha;
  int red;
  int green;
  int blue;
  int gray;
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      red=new Color(originalImage.getRGB(i,j)).getRed();
      green=new Color(originalImage.getRGB(i,j)).getGreen();
      blue=new Color(originalImage.getRGB(i,j)).getBlue();
      gray=(int)(0.21 * red + 0.71 * green + 0.07 * blue);
      gray=ImageUtilities.colorToRGB(alpha,gray,gray,gray);
      filteredImage.setRGB(i,j,gray);
    }
  }
  return filteredImage;
}
"
2640,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\GuoHallThiningFilter.java,neuroph,33,427,326,4,0.0886,0.052,1,15,14,"/** 
 * @param image The input image should be binary
 * @return
 */
@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  width=originalImage.getWidth();
  height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  imageM=new int[width][height];
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      int col=new Color(originalImage.getRGB(i,j)).getRed();
      if (blackLetters) {
        imageM[i][j]=1 - (col / 255);
      }
 else {
        imageM[i][j]=col / 255;
      }
    }
  }
  while (true) {
    int[][] start=new int[width][height];
    for (int i=0; i < width; i++) {
      for (int j=0; j < height; j++) {
        start[i][j]=imageM[i][j];
      }
    }
    thiningGuoHallIteration(0);
    thiningGuoHallIteration(1);
    boolean same=true;
    MainforLoop:     for (int i=0; i < width; i++) {
      for (int j=0; j < height; j++) {
        if (start[i][j] != imageM[i][j]) {
          same=false;
          break MainforLoop;
        }
      }
    }
    if (same) {
      break;
    }
  }
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      int alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      int col;
      if (blackLetters) {
        col=255 - imageM[i][j] * 255;
      }
 else {
        col=imageM[i][j] * 255;
      }
      int rgb=ImageUtilities.colorToRGB(alpha,col,col,col);
      filteredImage.setRGB(i,j,rgb);
    }
  }
  return filteredImage;
}
"
2642,thiningGuoHallIteration(int),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\GuoHallThiningFilter.java,neuroph,25,261,222,3,0.0991,0.0355,0,20,12,"public void thiningGuoHallIteration(int iter){
  int[][] marker=new int[width][height];
  for (int i=1; i < width - 1; i++) {
    for (int j=1; j < height - 1; j++) {
      int p2=imageM[i - 1][j];
      int p3=imageM[i - 1][j + 1];
      int p4=imageM[i][j + 1];
      int p5=imageM[i + 1][j + 1];
      int p6=imageM[i + 1][j];
      int p7=imageM[i + 1][j - 1];
      int p8=imageM[i][j - 1];
      int p9=imageM[i - 1][j - 1];
      int C=(~p2 & (p3 | p4)) + (~p4 & (p5 | p6)) + (~p6 & (p7 | p8))+ (~p8 & (p9 | p2));
      int N1=(p9 | p2) + (p3 | p4) + (p5 | p6)+ (p7 | p8);
      int N2=(p2 | p3) + (p4 | p5) + (p6 | p7)+ (p8 | p9);
      int N=N1 < N2 ? N1 : N2;
      int m=iter == 0 ? ((p6 | p7 | ~p9) & p8) : ((p2 | p3 | ~p5) & p4);
      if (C == 1 && (N >= 2 && N <= 3) & m == 0) {
        marker[i][j]=1;
      }
    }
  }
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      int tmp=1 - marker[i][j];
      if (imageM[i][j] == tmp && imageM[i][j] == 1) {
        imageM[i][j]=1;
      }
 else {
        imageM[i][j]=0;
      }
    }
  }
}
"
2644,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\HistogramEqualizationFilter.java,neuroph,21,150,90,2,0.1402,0.0661,1,12,4,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  int[] histogram=imageHistogram(originalImage);
  int[] histogramCumulative=new int[histogram.length];
  histogramCumulative[0]=histogram[0];
  for (int i=1; i < histogramCumulative.length; i++) {
    histogramCumulative[i]=histogramCumulative[i - 1] + histogram[i];
  }
  int G=256;
  int gray;
  int alpha;
  int newColor;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      gray=new Color(originalImage.getRGB(i,j)).getRed();
      alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      newColor=(G - 1) * histogramCumulative[gray] / (width * height);
      newColor=ImageUtilities.colorToRGB(alpha,newColor,newColor,newColor);
      filteredImage.setRGB(i,j,newColor);
    }
  }
  return filteredImage;
}
"
2645,imageHistogram(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\HistogramEqualizationFilter.java,neuroph,6,12,9,3,0.2667,0.0889,0,6,4,"public int[] imageHistogram(BufferedImage image){
  int[] histogram=new int[256];
  for (int i=0; i < histogram.length; i++)   histogram[i]=0;
  for (int i=0; i < image.getWidth(); i++) {
    for (int j=0; j < image.getHeight(); j++) {
      int gray=new Color(image.getRGB(i,j)).getRed();
      histogram[gray]++;
    }
  }
  return histogram;
}
"
2647,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\LetterSegmentationFilter.java,neuroph,16,89,58,2,0.1648,0.1032,0,5,5,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  width=originalImage.getWidth();
  height=originalImage.getHeight();
  visited=new boolean[width][height];
  int name=1;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      int color=new Color(originalImage.getRGB(i,j)).getRed();
      if (color == 255) {
        visited[i][j]=true;
      }
 else {
        if (name > 3000) {
          return originalImage;
        }
        BFS(i,j,name + """");
        name++;
      }
    }
  }
  return originalImage;
}
"
2648,"BFS(int,int,String)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\LetterSegmentationFilter.java,neuroph,49,1071,966,6,0.0606,0.0334,1,28,15,"public void BFS(int startI,int startJ,String imageName){
  LinkedList<String> queue=new LinkedList<String>();
  int letterWidth=80;
  int letterHeight=80;
  int gapX=30;
  int gapY=30;
  BufferedImage letter=new BufferedImage(letterWidth,letterHeight,BufferedImage.TYPE_BYTE_BINARY);
  int alpha=new Color(originalImage.getRGB(startI,startJ)).getAlpha();
  int white=ImageUtilities.colorToRGB(alpha,255,255,255);
  int black=ImageUtilities.colorToRGB(alpha,0,0,0);
  for (int i=0; i < letterWidth; i++) {
    for (int j=0; j < letterHeight; j++) {
      letter.setRGB(i,j,white);
    }
  }
  int count=0;
  String positions=startI + "" "" + startJ;
  visited[startI][startJ]=true;
  queue.addLast(positions);
  while (!queue.isEmpty()) {
    String pos=queue.removeFirst();
    String[] posArray=pos.split("" "");
    int x=Integer.parseInt(posArray[0]);
    int y=Integer.parseInt(posArray[1]);
    visited[x][y]=true;
    int posX=startI - x + gapX;
    int posY=startJ - y + gapY;
    count++;
    try {
      letter.setRGB(posX,posY,black);
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.out.println(""posX "" + posX);
      System.out.println(""posY "" + posY);
      System.out.println(""letterWidth "" + letter.getWidth());
      System.out.println(""letterHeight "" + letter.getHeight());
      throw e;
    }
    for (int i=x - 1; i <= x + 1; i++) {
      for (int j=y - 1; j <= y + 1; j++) {
        if (i >= 0 && j >= 0 && i < originalImage.getWidth() && j < originalImage.getHeight()) {
          if (!visited[i][j]) {
            int color=new Color(originalImage.getRGB(i,j)).getRed();
            if (color < 10) {
              visited[i][j]=true;
              String tmpPos=i + "" "" + j;
              queue.addLast(tmpPos);
            }
          }
        }
      }
    }
  }
  System.out.println(""count = "" + count);
  if (count < 3) {
    return;
  }
  try {
    saveToFile(letter,imageName);
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
"
2651,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\LetterSeparationFilter.java,neuroph,30,337,239,2,0.1091,0.0579,1,17,7,"/** 
 * radi otsu da dobije spojena crna slova i ra
 * @param image
 * @return 
 */
@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  boolean[][] matrix=new boolean[width][height];
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  int[] histogram=imageHistogram(originalImage);
  int totalNumberOfpixels=height * width;
  int threshold=threshold(histogram,totalNumberOfpixels);
  int black=0;
  int white=255;
  int gray;
  int alpha;
  int newColor;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      gray=new Color(originalImage.getRGB(i,j)).getRed();
      if (gray > threshold) {
        matrix[i][j]=false;
      }
 else {
        matrix[i][j]=true;
      }
    }
  }
  int blackTreshold=letterThreshold(originalImage,matrix);
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      gray=new Color(originalImage.getRGB(i,j)).getRed();
      alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      if (gray > blackTreshold) {
        newColor=white;
      }
 else {
        newColor=black;
      }
      newColor=ImageUtilities.colorToRGB(alpha,newColor,newColor,newColor);
      filteredImage.setRGB(i,j,newColor);
    }
  }
  return filteredImage;
}
"
2652,imageHistogram(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\LetterSeparationFilter.java,neuroph,8,20,12,3,0.25,0.1429,0,6,4,"public int[] imageHistogram(BufferedImage image){
  int[] histogram=new int[256];
  for (int i=0; i < histogram.length; i++) {
    histogram[i]=0;
  }
  for (int i=0; i < image.getWidth(); i++) {
    for (int j=0; j < image.getHeight(); j++) {
      int gray=new Color(image.getRGB(i,j)).getRed();
      histogram[gray]++;
    }
  }
  return histogram;
}
"
2653,"letterThreshold(BufferedImage,boolean[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\LetterSeparationFilter.java,neuroph,12,53,40,4,0.1771,0.0987,0,7,5,"public int letterThreshold(BufferedImage original,boolean[][] matrix){
  double sum=0;
  int count=0;
  for (int i=0; i < original.getWidth(); i++) {
    for (int j=0; j < original.getHeight(); j++) {
      if (matrix[i][j] == true) {
        int gray=new Color(original.getRGB(i,j)).getRed();
        sum+=gray;
        count++;
      }
    }
  }
  if (count == 0) {
    return 0;
  }
  return (int)Math.round((sum * 3) / (count * 2));
}
"
2654,"threshold(int[],int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\LetterSeparationFilter.java,neuroph,23,203,153,3,0.1304,0.0712,0,13,6,"private int threshold(int[] histogram,int total){
  float sum=0;
  for (int i=0; i < 256; i++) {
    sum+=i * histogram[i];
  }
  float sumB=0;
  int wB=0;
  int wF=0;
  float varMax=0;
  int threshold=0;
  for (int i=0; i < 256; i++) {
    wB+=histogram[i];
    if (wB == 0) {
      continue;
    }
    wF=total - wB;
    if (wF == 0) {
      break;
    }
    sumB+=(float)(i * histogram[i]);
    float mB=sumB / wB;
    float mF=(sum - sumB) / wF;
    float varBetween=(float)wB * (float)wF * (mB - mF)* (mB - mF);
    if (varBetween > varMax) {
      varMax=varBetween;
      threshold=i;
    }
  }
  return threshold;
}
"
2655,numberOfBlackPixels(boolean[][]),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\LetterSeparationFilter.java,neuroph,8,22,16,4,0.25,0.142,0,4,4,"public int numberOfBlackPixels(boolean[][] matrix){
  int count=0;
  for (int i=0; i < originalImage.getWidth(); i++) {
    for (int j=0; j < originalImage.getHeight(); j++) {
      if (matrix[i][j] == false) {
        count++;
      }
    }
  }
  return count;
}
"
2657,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\MaskSegmentationFilter.java,neuroph,23,194,135,3,0.1259,0.0584,0.666666667,12,4,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  OtsuBinarizeFilter obf=new OtsuBinarizeFilter();
  BufferedImage tempImage=obf.processImage(originalImage);
  int gray;
  int alpha;
  int discreteColor;
  int newColor;
  int white=255;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      gray=new Color(originalImage.getRGB(i,j)).getRed();
      alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      discreteColor=new Color(tempImage.getRGB(i,j)).getRed();
      if (discreteColor == white) {
        newColor=gray;
      }
 else {
        newColor=white;
      }
      newColor=ImageUtilities.colorToRGB(alpha,newColor,newColor,newColor);
      filteredImage.setRGB(i,j,newColor);
    }
  }
  return filteredImage;
}
"
2660,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\MeanFilter.java,neuroph,10,27,9,1,0.225,0.0964,1,8,3,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      int color=findMean(i,j);
      int alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      int rgb=ImageUtilities.colorToRGB(alpha,color,color,color);
      filteredImage.setRGB(i,j,rgb);
    }
  }
  return filteredImage;
}
"
2661,"findMean(int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\MeanFilter.java,neuroph,11,45,35,4,0.157,0.0642,0,7,7,"public int findMean(int x,int y){
  double sum=0;
  int n=0;
  for (int i=x - radius; i <= x + radius; i++) {
    for (int j=y - radius; j <= y + radius; j++) {
      if (i > 0 && i < originalImage.getWidth() && j > 0 && j < originalImage.getHeight()) {
        int color=new Color(originalImage.getRGB(i,j)).getRed();
        sum=sum + color;
        n++;
      }
    }
  }
  return (int)Math.round(sum / n);
}
"
2666,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\MedianFilter.java,neuroph,16,86,52,2,0.1652,0.0701,1,9,3,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  int[] arrayOfPixels;
  int median;
  int alpha;
  int newColor;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      arrayOfPixels=getArrayOfPixels(i,j);
      median=findMedian(arrayOfPixels);
      alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      newColor=ImageUtilities.colorToRGB(alpha,median,median,median);
      filteredImage.setRGB(i,j,newColor);
    }
  }
  return filteredImage;
}
"
2672,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\NormalizationFilter.java,neuroph,25,228,156,3,0.1136,0.0566,1,10,6,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  width=originalImage.getWidth();
  height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  imageMatrix=new int[width][height];
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      imageMatrix[i][j]=new Color(originalImage.getRGB(i,j)).getRed();
    }
  }
  mean=calculateMean();
  var=calculateVariance();
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      double normalizedPixel=0;
      double squareError=0;
      if (imageMatrix[i][j] > mean) {
        squareError=(imageMatrix[i][j] - mean) * (imageMatrix[i][j] - mean);
        normalizedPixel=(GOAL_MEAN + Math.sqrt(((GOAL_VARIANCE * squareError / var))));
      }
 else {
        squareError=(imageMatrix[i][j] - mean) * (imageMatrix[i][j] - mean);
        normalizedPixel=(GOAL_MEAN - Math.sqrt(((GOAL_VARIANCE * squareError / var))));
      }
      int alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      int rgb=(int)-normalizedPixel;
      int color=ImageUtilities.colorToRGB(alpha,rgb,rgb,rgb);
      filteredImage.setRGB(i,j,color);
    }
  }
  return filteredImage;
}
"
2673,calculateVariance(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\NormalizationFilter.java,neuroph,6,8,1,2,0.3095,0.1006,0,3,3,"/** 
 * @param x x coordinate of block
 * @param y y coordinate of block
 * @return
 */
public int calculateVariance(){
  int var=0;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      var+=(imageMatrix[i][j] - mean) * (imageMatrix[i][j] - mean);
    }
  }
  return (int)var / (height * width * 255);
}
"
2674,calculateMean(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\NormalizationFilter.java,neuroph,7,14,7,3,0.2857,0.0825,0,3,3,"public int calculateMean(){
  double mean=0;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      mean+=imageMatrix[i][j];
    }
  }
  return (int)mean / (width * height);
}
"
2679,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OCRCropImage.java,neuroph,11,44,33,3,0.1515,0.0491,0,5,1,"@Override public BufferedImage processImage(BufferedImage image){
  width=image.getWidth();
  height=image.getHeight();
  originalImage=image;
  filteredImage=new BufferedImage(newWidth,newHeight,image.getType());
  int startH=createStartH();
  int startW=createStartW();
  int endH=createEndH();
  int endW=createEndW();
  fillImage(startH,startW,endH,endW);
  return filteredImage;
}
"
2680,createStartH(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OCRCropImage.java,neuroph,11,44,33,3,0.1717,0.0778,0,5,4,"private int createStartH(){
  int color;
  int black=0;
  int startH=0;
  loop:   for (int i=0; i < height; i++) {
    for (int j=0; j < width; j++) {
      color=new Color(originalImage.getRGB(j,i)).getRed();
      if (color == black) {
        startH=i;
        break loop;
      }
    }
  }
  return startH;
}
"
2681,createStartW(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OCRCropImage.java,neuroph,11,44,33,3,0.1717,0.0778,0,5,4,"private int createStartW(){
  int color;
  int black=0;
  int startW=0;
  loop:   for (int j=0; j < width; j++) {
    for (int i=0; i < height; i++) {
      color=new Color(originalImage.getRGB(j,i)).getRed();
      if (color == black) {
        startW=j;
        break loop;
      }
    }
  }
  return startW;
}
"
2682,createEndH(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OCRCropImage.java,neuroph,11,44,33,3,0.1717,0.0778,0,5,4,"private int createEndH(){
  int color;
  int black=0;
  int endH=0;
  loop:   for (int i=height - 1; i >= 0; i--) {
    for (int j=width - 1; j >= 0; j--) {
      color=new Color(originalImage.getRGB(j,i)).getRed();
      if (color == black) {
        endH=i;
        break loop;
      }
    }
  }
  return endH;
}
"
2683,createEndW(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OCRCropImage.java,neuroph,11,44,33,3,0.1717,0.0778,0,5,4,"private int createEndW(){
  int color;
  int black=0;
  int endW=0;
  loop:   for (int j=width - 1; j >= 0; j--) {
    for (int i=height - 1; i >= 0; i--) {
      color=new Color(originalImage.getRGB(j,i)).getRed();
      if (color == black) {
        endW=j;
        break loop;
      }
    }
  }
  return endW;
}
"
2685,OCRSeparationFilter(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OCRSeparationFilter.java,neuroph,7,21,21,7,0.1429,0,0,0,1,"public OCRSeparationFilter(){
  letterWidth=0;
  letterHeight=0;
  cropHeight=0;
  cropWidth=0;
}
"
2686,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OCRSeparationFilter.java,neuroph,19,135,99,4,0.1263,0.0606,0,7,7,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  width=originalImage.getWidth();
  height=originalImage.getHeight();
  prepare();
  visited=new boolean[height][width];
  int color;
  int white=255;
  for (int line=0; line < linePositions.length; line++) {
    for (int k=-1; k <= 1; k++) {
      int i=linePositions[line] + k;
      if (i == -1 || i == height)       continue;
      ;
      for (int j=0; j < width; j++) {
        color=new Color(originalImage.getRGB(j,i)).getRed();
        if (color == white) {
          visited[i][j]=true;
        }
 else {
          BFStraverseAndSave(i,j);
        }
      }
    }
  }
  return originalImage;
}
"
2688,"saveToFile(BufferedImage,String)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OCRSeparationFilter.java,neuroph,11,46,37,4,0.1932,0.0738,0.333333333,6,4,"private void saveToFile(BufferedImage img,String letterName){
  File outputfile=new File(location + letterName + "".png"");
  BufferedImage crop=img;
  if (cropHeight != 0 || cropWidth != 0) {
    OCRCropImage ci=new OCRCropImage();
    ci.setDimension(cropWidth,cropHeight);
    crop=ci.processImage(img);
  }
  try {
    ImageIO.write(crop,""png"",outputfile);
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
"
2689,prepare(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OCRSeparationFilter.java,neuroph,13,60,42,3,0.1923,0.1111,0,4,6,"/** 
 * pretopstavka da s ekoriste samo slova, mala i velika
 * 26 mali i 26 velikih, zato je counts[52]
 */
private void prepare(){
  counts=new int[52];
  for (int i=0; i < counts.length; i++) {
    counts[i]=1;
  }
  String pom="""";
  for (int i=0; i < text.length(); i++) {
    if (Character.isLetter(text.charAt(i))) {
      pom+=text.charAt(i);
    }
  }
  text=pom;
  if (linePositions == null) {
    linePositions=new int[height];
    for (int i=0; i < linePositions.length; i++) {
      linePositions[i]=i;
    }
  }
}
"
2690,createName(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OCRSeparationFilter.java,neuroph,16,93,66,4,0.1813,0.0746,0,7,2,"/** 
 * trenutno radi samo sa slovima, malim i velikim
 * promeniti da prepoznaje i druge karaktere
 * @return naziv slova, npr A ili c
 */
private String createName(){
  int offsetBIG=65;
  int offsetSMALL=97;
  int offsetARRAY=26;
  char c=text.charAt(seqNum);
  int key=c;
  int number;
  if (key < 95) {
    number=counts[key - offsetBIG];
    counts[key - offsetBIG]++;
  }
 else {
    number=counts[key - offsetSMALL + offsetARRAY];
    counts[key - offsetSMALL + offsetARRAY]++;
  }
  String name=c + ""_"" + number;
  return name;
}
"
2695,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OtsuBinarizeFilter.java,neuroph,21,151,92,2,0.1402,0.0641,1,13,4,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  int[] histogram=imageHistogram(originalImage);
  int totalNumberOfpixels=height * width;
  int treshold=treshold(histogram,totalNumberOfpixels);
  int black=0;
  int white=255;
  int alpha;
  int gray;
  int newColor;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      gray=new Color(originalImage.getRGB(i,j)).getRed();
      alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      if (gray > treshold)       newColor=white;
 else       newColor=black;
      newColor=ImageUtilities.colorToRGB(alpha,newColor,newColor,newColor);
      filteredImage.setRGB(i,j,newColor);
    }
  }
  return filteredImage;
}
"
2696,imageHistogram(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OtsuBinarizeFilter.java,neuroph,6,12,9,3,0.2667,0.0889,0,6,4,"public int[] imageHistogram(BufferedImage image){
  int[] histogram=new int[256];
  for (int i=0; i < histogram.length; i++)   histogram[i]=0;
  for (int i=0; i < image.getWidth(); i++) {
    for (int j=0; j < image.getHeight(); j++) {
      int gray=new Color(image.getRGB(i,j)).getRed();
      histogram[gray]++;
    }
  }
  return histogram;
}
"
2697,"treshold(int[],int)",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\OtsuBinarizeFilter.java,neuroph,22,182,133,3,0.1329,0.0765,0,13,6,"private int treshold(int[] histogram,int total){
  float sum=0;
  for (int i=0; i < 256; i++)   sum+=i * histogram[i];
  float sumB=0;
  int wB=0;
  int wF=0;
  float varMax=0;
  int threshold=0;
  for (int i=0; i < 256; i++) {
    wB+=histogram[i];
    if (wB == 0)     continue;
    wF=total - wB;
    if (wF == 0)     break;
    sumB+=(float)(i * histogram[i]);
    float mB=sumB / wB;
    float mF=(sum - sumB) / wF;
    float varBetween=(float)wB * (float)wF * (mB - mF)* (mB - mF);
    if (varBetween > varMax) {
      varMax=varBetween;
      threshold=i;
    }
  }
  return threshold;
}
"
2699,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\SobelEdgeDetection.java,neuroph,25,245,190,3,0.1073,0.0446,1,14,7,"@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  int width=image.getWidth();
  int height=image.getHeight();
  filteredImage=new BufferedImage(width,height,image.getType());
  treshold=0.1;
  generateSobelOperators();
  double[][] Gx=new double[width][height];
  double[][] Gy=new double[width][height];
  double[][] G=new double[width][height];
  double max=0;
  for (int i=1; i < width - 1; i++) {
    for (int j=1; j < height - 1; j++) {
      Gx[i][j]=calculateGradient(i,j,sobelX);
      Gy[i][j]=calculateGradient(i,j,sobelY);
      G[i][j]=Math.abs(Gx[i][j]) + Math.abs(Gy[i][j]);
      if (G[i][j] > max)       max=G[i][j];
    }
  }
  treshold=treshold * max;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      int newColor;
      int alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      if (G[i][j] > treshold)       newColor=0;
 else       newColor=255;
      int rgb=ImageUtilities.colorToRGB(alpha,newColor,newColor,newColor);
      filteredImage.setRGB(i,j,rgb);
    }
  }
  return filteredImage;
}
"
2700,generateSobelOperators(),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\SobelEdgeDetection.java,neuroph,16,65,10,1,0.3,0.2597,0,2,1,"protected void generateSobelOperators(){
  sobelX=new double[3][3];
  sobelX[0][0]=-0.25;
  sobelX[0][1]=-0.5;
  sobelX[0][2]=-0.25;
  sobelX[1][0]=0;
  sobelX[1][1]=0;
  sobelX[1][2]=0;
  sobelX[2][0]=0.25;
  sobelX[2][1]=0.5;
  sobelX[2][2]=0.25;
  sobelY=new double[3][3];
  sobelY[0][0]=-0.25;
  sobelY[0][1]=0;
  sobelY[0][2]=0.25;
  sobelY[1][0]=-0.5;
  sobelY[1][1]=0;
  sobelY[1][2]=0.5;
  sobelY[2][0]=-0.25;
  sobelY[2][1]=0;
  sobelY[2][2]=0.25;
  double one=1;
  double oneThird=one / 3;
  sobelX[0][0]=-oneThird;
  sobelX[0][1]=-oneThird;
  sobelX[0][2]=-oneThird;
  sobelX[1][0]=0;
  sobelX[1][1]=0;
  sobelX[1][2]=0;
  sobelX[2][0]=oneThird;
  sobelX[2][1]=oneThird;
  sobelX[2][2]=oneThird;
  sobelY[0][0]=-oneThird;
  sobelY[0][1]=0;
  sobelY[0][2]=oneThird;
  sobelY[1][0]=-oneThird;
  sobelY[1][1]=0;
  sobelY[1][2]=oneThird;
  sobelY[2][0]=-oneThird;
  sobelY[2][1]=0;
  sobelY[2][2]=oneThird;
}
"
2701,"calculateGradient(int,int,double[][])",D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\SobelEdgeDetection.java,neuroph,12,56,46,5,0.1417,0.0672,0,9,3,"protected double calculateGradient(int i,int j,double[][] sobelOperator){
  double sum=0;
  int posX=0;
  for (int x=i - 1; x <= i + 1; x++) {
    int posY=0;
    for (int y=j - 1; y <= j + 1; y++) {
      double gray=new Color(originalImage.getRGB(x,y)).getRed();
      sum=sum + gray * sobelOperator[posX][posY];
      posY++;
    }
    posX++;
  }
  return sum;
}
"
2710,processImage(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\ZhangSuenThinFilter.java,neuroph,33,427,326,4,0.0886,0.052,1,15,14,"/** 
 * @param image The input image should be binary
 * @return
 */
@Override public BufferedImage processImage(BufferedImage image){
  originalImage=image;
  width=originalImage.getWidth();
  height=originalImage.getHeight();
  filteredImage=new BufferedImage(width,height,originalImage.getType());
  imageM=new int[width][height];
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      int col=new Color(originalImage.getRGB(i,j)).getRed();
      if (blackLetters) {
        imageM[i][j]=1 - (col / 255);
      }
 else {
        imageM[i][j]=col / 255;
      }
    }
  }
  while (true) {
    int[][] start=new int[width][height];
    for (int i=0; i < width; i++) {
      for (int j=0; j < height; j++) {
        start[i][j]=imageM[i][j];
      }
    }
    thiningIteration(0);
    thiningIteration(1);
    boolean same=true;
    MainforLoop:     for (int i=0; i < width; i++) {
      for (int j=0; j < height; j++) {
        if (start[i][j] != imageM[i][j]) {
          same=false;
          break MainforLoop;
        }
      }
    }
    if (same) {
      break;
    }
  }
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      int alpha=new Color(originalImage.getRGB(i,j)).getAlpha();
      int col;
      if (blackLetters) {
        col=255 - imageM[i][j] * 255;
      }
 else {
        col=imageM[i][j] * 255;
      }
      int rgb=ImageUtilities.colorToRGB(alpha,col,col,col);
      filteredImage.setRGB(i,j,rgb);
    }
  }
  return filteredImage;
}
"
2711,thiningIteration(int),D:\temp\case study\neuroph-2.94\org\neuroph\imgrec\filter\impl\ZhangSuenThinFilter.java,neuroph,49,1096,1016,10,0.0565,0.0277,0,27,30,"public void thiningIteration(int iter){
  int[][] marker=new int[width][height];
  for (int i=1; i < width - 1; i++) {
    for (int j=1; j < height - 1; j++) {
      int p2=imageM[i - 1][j];
      int p3=imageM[i - 1][j + 1];
      int p4=imageM[i][j + 1];
      int p5=imageM[i + 1][j + 1];
      int p6=imageM[i + 1][j];
      int p7=imageM[i + 1][j - 1];
      int p8=imageM[i][j - 1];
      int p9=imageM[i - 1][j - 1];
      int c1=0;
      int c2=0;
      int c3=0;
      int c4=0;
      int c5=0;
      int c6=0;
      int c7=0;
      int c8=0;
      if (p2 == 0 && p3 == 1) {
        c1=1;
      }
      if (p3 == 0 && p4 == 1) {
        c2=1;
      }
      if (p4 == 0 && p5 == 1) {
        c3=1;
      }
      if (p5 == 0 && p6 == 1) {
        c4=1;
      }
      if (p6 == 0 && p7 == 1) {
        c5=1;
      }
      if (p7 == 0 && p8 == 1) {
        c6=1;
      }
      if (p8 == 0 && p9 == 1) {
        c7=1;
      }
      if (p9 == 0 && p2 == 1) {
        c8=1;
      }
      int A=c1 + c2 + c3+ c4+ c5+ c6+ c7+ c8;
      int B=p2 + p3 + p4+ p5+ p6+ p7+ p8+ p9;
      int m1=iter == 0 ? (p2 * p4 * p6) : (p2 * p4 * p8);
      int m2=iter == 0 ? (p4 * p6 * p8) : (p2 * p6 * p8);
      if (A == 1 && (B >= 2 && B <= 6) && m1 == 0 && m2 == 0) {
        marker[i][j]=1;
      }
    }
  }
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      int tmp=1 - marker[i][j];
      if (imageM[i][j] == tmp && imageM[i][j] == 1) {
        imageM[i][j]=1;
      }
 else {
        imageM[i][j]=0;
      }
    }
  }
}
"
2715,calculate(),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\layer\CompetitiveLayer.java,neuroph,19,138,105,3,0.1474,0.0931,0.75,9,9,"/** 
 * Performs calculaton for all neurons in this layer
 */
@Override public void calculate(){
  boolean hasWinner=false;
  int iterationsCount=0;
  while (!hasWinner) {
    int fireingNeurons=0;
    for (    Neuron neuron : this.getNeurons()) {
      neuron.calculate();
      if (neuron.getOutput() > 0)       fireingNeurons+=1;
    }
    if (iterationsCount > this.maxIterations)     break;
    if (fireingNeurons == 1)     hasWinner=true;
    iterationsCount++;
  }
  if (hasWinner) {
    double maxOutput=Double.MIN_VALUE;
    for (    Neuron neuron : this.getNeurons()) {
      CompetitiveNeuron cNeuron=(CompetitiveNeuron)neuron;
      cNeuron.setIsCompeting(false);
      if (cNeuron.getOutput() > maxOutput) {
        maxOutput=cNeuron.getOutput();
        this.winner=cNeuron;
      }
    }
  }
}
"
2719,"ConvolutionalLayer(FeatureMapsLayer,Dimension2D,int)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\layer\ConvolutionalLayer.java,neuroph,7,13,5,3,0.254,0.0905,0.4,9,1,"/** 
 * Creates convolutional layer with specified kernel, appropriate map
 * dimensions in regard to previous layer (fromLayer param) and specified
 * number of feature maps with given neuron properties.
 * @param fromLayer previous layer, which will be connected to this layer
 * @param kernel kernel for all feature maps
 * @param numberOfMaps number of feature maps to create in this layer
 * @param neuronProp settings for neurons in feature maps
 */
public ConvolutionalLayer(FeatureMapsLayer fromLayer,Dimension2D kernelDimension,int numberOfMaps,NeuronProperties neuronProp){
  Dimension2D fromDimension=fromLayer.getMapDimensions();
  int mapWidth=fromDimension.getWidth() - kernelDimension.getWidth() + 1;
  int mapHeight=fromDimension.getHeight() - kernelDimension.getHeight() + 1;
  this.mapDimensions=new Dimension2D(mapWidth,mapHeight);
  createFeatureMaps(numberOfMaps,this.mapDimensions,kernelDimension,neuronProp);
}
"
2722,"connectMaps(FeatureMapLayer,FeatureMapLayer)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\layer\ConvolutionalLayer.java,neuroph,25,263,226,11,0.1067,0.0402,0.454545455,13,5,"/** 
 * Creates connections with shared weights between two feature maps Assumes
 * that toMap is from Convolutional layer.
 * <p/>
 * Kernel is used as a sliding window, and kernel positions overlap. Kernel
 * is shifting right by one position at a time. Neurons at the same kernel
 * position share the same weights
 * @param fromMap source feature map
 * @param toMap destination feature map
 */
@Override public void connectMaps(FeatureMapLayer fromMap,FeatureMapLayer toMap){
  Kernel kernel=toMap.getKernel();
  kernel.initWeights(-0.15,0.15);
  BiasNeuron biasNeuron=new BiasNeuron();
  fromMap.addNeuron(biasNeuron);
  for (int y=0; y < toMap.getHeight(); y++) {
    for (int x=0; x < toMap.getWidth(); x++) {
      Neuron toNeuron=toMap.getNeuronAt(x,y);
      for (int ky=0; ky < kernel.getHeight(); ky++) {
        for (int kx=0; kx < kernel.getWidth(); kx++) {
          int fromX=x + kx;
          int fromY=y + ky;
          Weight[][] concreteKernel=kernel.getWeights();
          Neuron fromNeuron=fromMap.getNeuronAt(fromX,fromY);
          ConnectionFactory.createConnection(fromNeuron,toNeuron,concreteKernel[kx][ky]);
          ConnectionFactory.createConnection(biasNeuron,toNeuron);
        }
      }
    }
  }
}
"
2724,"FeatureMapLayer(Dimension2D,NeuronProperties)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\layer\FeatureMapLayer.java,neuroph,6,13,11,4,0.2222,0.0476,0.75,5,2,"/** 
 * Creates 2D layer with specified dimensions, filled with neurons with
 * specified properties
 * @param dimensions       layer dimensions
 * @param neuronProperties neuron properties
 */
public FeatureMapLayer(Dimension2D dimensions,NeuronProperties neuronProperties,Dimension2D kernelDimension){
  this(dimensions,kernelDimension);
  for (int i=0; i < dimensions.getHeight() * dimensions.getWidth(); i++) {
    Neuron neuron=NeuronFactory.createNeuron(neuronProperties);
    addNeuron(neuron);
  }
}
"
2746,InputLayer(int),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\layer\InputLayer.java,neuroph,6,13,11,4,0.2222,0.0417,1,4,2,"/** 
 * Creates a new instance of InputLayer with specified number of input neurons
 * @param neuronsCount input neurons count for this layer
 */
public InputLayer(int neuronsCount){
  NeuronProperties inputNeuronProperties=new NeuronProperties(InputNeuron.class,Linear.class);
  for (int i=0; i < neuronsCount; i++) {
    Neuron neuron=NeuronFactory.createNeuron(inputNeuronProperties);
    this.addNeuron(neuron);
  }
}
"
2749,"PoolingLayer(FeatureMapsLayer,Dimension2D)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\layer\PoolingLayer.java,neuroph,9,25,14,3,0.2121,0.0736,0.428571429,9,1,"/** 
 * Creates pooling layer with specified kernel, appropriate map
 * dimensions in regard to previous layer (fromLayer param) and specified
 * number of feature maps with given neuron properties.
 * @param fromLayer    previous layer, which will be connected to this layer
 * @param kernel       kernel for all feature maps
 * @param numberOfMaps number of feature maps to create in this layer
 * @param neuronProp   settings for neurons in feature maps
 */
public PoolingLayer(FeatureMapsLayer fromLayer,Dimension2D kernelDim,int numberOfMaps,NeuronProperties neuronProp){
  this.kernel=kernel;
  Dimension2D fromDimension=fromLayer.getMapDimensions();
  int mapWidth=fromDimension.getWidth() / kernel.getWidth();
  int mapHeight=fromDimension.getHeight() / kernel.getHeight();
  this.mapDimensions=new Dimension2D(mapWidth,mapHeight);
  createFeatureMaps(numberOfMaps,mapDimensions,kernelDim,neuronProp);
}
"
2751,"connectMaps(FeatureMapLayer,FeatureMapLayer)",D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\layer\PoolingLayer.java,neuroph,14,64,37,3,0.1667,0.0629,0.571428571,13,5,"/** 
 * Creates connections with shared weights between two feature maps
 * Assumes that toMap is from Pooling layer.
 * <p/>
 * In this implementation, there is no overlapping between kernel positions.
 * @param fromMap source feature map
 * @param toMap   destination feature map
 */
@Override public void connectMaps(FeatureMapLayer fromMap,FeatureMapLayer toMap){
  int kernelWidth=kernel.getWidth();
  int kernelHeight=kernel.getHeight();
  Weight weight=new Weight(1);
  for (int x=0; x < fromMap.getWidth() - kernelWidth + 1; x+=kernelWidth) {
    for (int y=0; y < fromMap.getHeight() - kernelHeight + 1; y+=kernelHeight) {
      Neuron toNeuron=toMap.getNeuronAt(x / kernelWidth,y / kernelHeight);
      for (int dy=0; dy < kernelHeight; dy++) {
        for (int dx=0; dx < kernelWidth; dx++) {
          int fromX=x + dx;
          int fromY=y + dy;
          Neuron fromNeuron=fromMap.getNeuronAt(fromX,fromY);
          ConnectionFactory.createConnection(fromNeuron,toNeuron,weight);
        }
      }
    }
  }
}
"
2758,calculate(),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\neuron\CompetitiveNeuron.java,neuroph,8,23,18,4,0.2125,0.0901,1,12,2,"@Override public void calculate(){
  if (this.isCompeting) {
    this.totalInput=this.inputFunction.getOutput(this.connectionsFromThisLayer);
  }
 else {
    this.totalInput=this.inputFunction.getOutput(this.connectionsFromOtherLayers);
    this.isCompeting=true;
  }
  this.output=this.transferFunction.getOutput(this.totalInput);
  outputHistory.add(0,new Double(this.output));
}
"
2759,addInputConnection(Connection),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\neuron\CompetitiveNeuron.java,neuroph,8,22,16,5,0.2188,0.1136,1,1,2,"/** 
 * Adds input connection for this competitive neuron
 * @param connection input connection
 */
@Override public void addInputConnection(Connection connection){
  super.addInputConnection(connection);
  if (connection.getFromNeuron().getParentLayer() == this.getParentLayer()) {
    connectionsFromThisLayer.add(connection);
  }
 else {
    connectionsFromOtherLayers.add(connection);
  }
}
"
2776,calculate(),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\comp\neuron\InputOutputNeuron.java,neuroph,6,9,3,2,0.2407,0.1274,1,3,4,"/** 
 * Calculates neuron output
 */
@Override public void calculate(){
  if (!externalInputSet) {
    if (this.hasInputConnections())     totalInput=inputFunction.getOutput(this.inputConnections);
  }
  this.output=transferFunction.getOutput(this.totalInput + bias);
  if (externalInputSet) {
    externalInputSet=false;
    totalInput=0;
  }
}
"
2787,equals(Object),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\kmeans\Cluster.java,neuroph,9,27,18,3,0.2407,0.1071,0.5,5,5,"/** 
 * Returns true if two clusters have same centroid
 * @param obj
 * @return 
 */
@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final Cluster other=(Cluster)obj;
  double[] otherValues=other.getCentroid().getValues();
  double[] values=other.getCentroid().getValues();
  for (int i=0; i < centroid.size(); i++) {
    if (otherValues[i] != values[i])     return false;
  }
  return true;
}
"
2788,hashCode(),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\kmeans\Cluster.java,neuroph,6,9,3,3,0.3333,0.2024,0,3,1,"@Override public int hashCode(){
  int hash=7;
  hash=97 * hash + Objects.hashCode(this.centroid);
  hash=97 * hash + Objects.hashCode(this.vectors);
  return hash;
}
"
2791,KMeansClustering(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\kmeans\KMeansClustering.java,neuroph,10,33,21,3,0.2286,0.1076,0.75,9,2,"public KMeansClustering(DataSet dataSet,int numberOfClusters){
  this.dataSet=dataSet;
  this.numberOfClusters=numberOfClusters;
  this.dataVectors=new KVector[dataSet.size()];
  int i=0;
  for (  DataSetRow row : dataSet.getRows()) {
    KVector vector=new KVector(row.getInput());
    this.dataVectors[i]=vector;
    i++;
  }
}
"
2795,doClustering(),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\kmeans\KMeansClustering.java,neuroph,14,75,59,5,0.2143,0.1364,0.666666667,5,6,"public void doClustering(){
  if (numberOfClusters <= 0) {
    throw new RuntimeException(""Error: Number of clusters must be greater then zero!"");
  }
  initClusters();
  for (  KVector vector : dataVectors) {
    Cluster nearestCluster=getNearestCluster(vector);
    nearestCluster.assignVector(vector);
  }
  boolean clustersChanged;
  do {
    clustersChanged=false;
    recalculateCentroids();
    for (    KVector vector : dataVectors) {
      Cluster nearestCluster=getNearestCluster(vector);
      if (!vector.getCluster().equals(nearestCluster)) {
        nearestCluster.assignVector(vector);
        clustersChanged=true;
      }
    }
  }
 while (clustersChanged);
}
"
2813,toString(),D:\temp\case study\neuroph-2.94\org\neuroph\nnet\learning\kmeans\KVector.java,neuroph,7,11,1,3,0.3333,0.3667,0,2,2,"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(""KMeansVector{"");
  for (int i=0; i < values.length; i++)   sb.append(""["" + i + ""]=""+ values[i]+ "","");
  sb.append('}');
  return sb.toString();
}
"
2819,heightHistogram(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\histogram\Histogram.java,neuroph,13,62,46,3,0.1795,0.0719,0,8,4,"/** 
 * @param image binarized image, letters are black, background is white
 * @return array which length is height of image, every element of array
 * represent count of black pixels in that row.
 */
public static int[] heightHistogram(BufferedImage image){
  int height=image.getHeight();
  int width=image.getWidth();
  int[] histogram=new int[height];
  int black=0;
  int color;
  for (int i=0; i < height; i++) {
    for (int j=0; j < width; j++) {
      color=new Color(image.getRGB(j,i)).getRed();
      if (color == black) {
        histogram[i]++;
      }
    }
  }
  return histogram;
}
"
2820,widthHistogram(BufferedImage),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\histogram\Histogram.java,neuroph,13,62,46,3,0.1795,0.0719,0,8,4,"/** 
 * @param image binarized image, letters are black, background is white
 * @return array which length is width of image, every element of array
 * represent count of black pixels in that column of pixels.
 */
public static int[] widthHistogram(BufferedImage image){
  int height=image.getHeight();
  int width=image.getWidth();
  int[] histogram=new int[width];
  int black=0;
  int color;
  for (int i=0; i < width; i++) {
    for (int j=0; j < height; j++) {
      color=new Color(image.getRGB(i,j)).getRed();
      if (color == black) {
        histogram[i]++;
      }
    }
  }
  return histogram;
}
"
2821,gradient(int[]),D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\histogram\Histogram.java,neuroph,6,9,3,3,0.3889,0.2381,0,3,2,"/** 
 * @param histogram histogram calculated by method
 * <b>heightHistogram(BufferedImage)</b> or 
 * <b>widthHistogram(BufferedImage)</b>
 * @return array that represents gradient Each element in array is
 * calculated in the following way:<br/>
 * gradient[i] = histogram[i] - histogram[i-1]
 */
public static int[] gradient(int[] histogram){
  int[] gradient=new int[histogram.length];
  for (int i=1; i < gradient.length; i++) {
    gradient[i]=histogram[i] - histogram[i - 1];
  }
  return gradient;
}
"
2822,"widthRowHistogram(BufferedImage,int,int)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\histogram\OCRHistogram.java,neuroph,14,73,55,3,0.1558,0.0658,0,10,6,"/** 
 * Calculate the width histogram for single row. <br/>
 * Make the rectangle with: <br/>
 * width = width of the image<br/>
 * height = predicted height of letter<br/>
 * It scans this rectangle by width, start from left to right and finds all black
 * pixels in each column. Method returns array which length is width of the image. 
 * Every element in array corresponds to number of black pixels in the column of 
 * the rectangle.
 * @param image input image with multiple lines and letters
 * @param row pixel position of the row. It should be center of the single row.
 * This number can be calculated by method findRowPixels
 * @param letterHeight predicted letter size (above and below row)
 * @return 
 */
public static int[] widthRowHistogram(BufferedImage image,int row,int letterHeight){
  int width=image.getWidth();
  int height=image.getHeight();
  int color;
  int black=0;
  int[] histogram=new int[width];
  for (int i=0; i < width; i++) {
    for (int j=row - (letterHeight / 2); j <= row + (letterHeight / 2); j++) {
      if (j < 0 || j >= height) {
        continue;
      }
      color=new Color(image.getRGB(i,j)).getRed();
      if (color == black) {
        histogram[i]++;
      }
    }
  }
  return histogram;
}
"
2823,"histogramWithoutLetterSpaces(int[],int)",D:\temp\case study\neuroph-2.94\org\neuroph\ocr\util\histogram\OCRHistogram.java,neuroph,12,43,20,4,0.2667,0.1619,0,5,6,"/** 
 * Method for finding histogram but with ignoring spaces between lines/words<br/>
 * When you use only widthHistogram() method, it will find spaces between letters.
 * With this method you need to set the space gap will be ignored so you will get new 
 * histogram where the words are separated, not letters.
 * @param histogram classic width histogram
 * @param spaceGap size of the space which will be ignored
 * @return new histogram with ignored spaces. <br/>
 * Previously in histogram these spaces have had values of zero<br/>
 * Now they are filled with ones: histogram[i] = 1
 */
public static int[] histogramWithoutLetterSpaces(int[] histogram,int spaceGap){
  int count=0;
  for (int i=0; i < histogram.length; i++) {
    if (histogram[i] == 0) {
      count++;
    }
 else {
      if (count > 0 && count < spaceGap) {
        for (int j=i - count; j < i; j++) {
          histogram[j]=1;
        }
      }
      count=0;
    }
  }
  return histogram;
}
"
2825,"createDataSet(List<MNISTImage>,int)",D:\temp\case study\neuroph-2.94\org\neuroph\samples\convolution\mnist\MNISTDataSet.java,neuroph,32,385,274,2,0.1021,0.1573,0.428571429,15,7,"private static DataSet createDataSet(List<MNISTImage> imageList,int sampleCount){
  int pixelCount=imageList.get(0).getSize();
  int totalSize=1024;
  DataSet dataSet=new DataSet(totalSize,10);
  for (int i=0; i < sampleCount; i++) {
    MNISTImage dImage=imageList.get(i);
    double[] input=new double[totalSize];
    double[] output=new double[10];
    for (int j=0; j < 10; j++) {
      output[j]=0;
    }
    for (int j=0; j < totalSize; j++) {
      input[j]=0;
    }
    output[dImage.getLabel()]=1;
    byte[] imageData=dImage.getData();
    int k=66;
    for (int j=0; j < pixelCount; j++) {
      if ((imageData[j] & 0xff) > 0)       input[k++]=255;
 else       k++;
      if (j % 28 == 27)       k+=4;
    }
    DataSetRow row=new DataSetRow(input,output);
    dataSet.addRow(row);
  }
  dataSet.setColumnName(1024,""0"");
  dataSet.setColumnName(1025,""1"");
  dataSet.setColumnName(1026,""2"");
  dataSet.setColumnName(1027,""3"");
  dataSet.setColumnName(1028,""4"");
  dataSet.setColumnName(1029,""5"");
  dataSet.setColumnName(1030,""6"");
  dataSet.setColumnName(1031,""7"");
  dataSet.setColumnName(1032,""8"");
  dataSet.setColumnName(1033,""9"");
  return dataSet;
}
"
2826,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\convolution\mnist\MNISTExample.java,neuroph,25,271,242,13,0.0833,0.049,0.555555556,6,2,"public static void main(String[] args){
  try {
    DataSet trainSet=MNISTDataSet.createFromFile(MNISTDataSet.TRAIN_LABEL_NAME,MNISTDataSet.TRAIN_IMAGE_NAME,60);
    DataSet testSet=MNISTDataSet.createFromFile(MNISTDataSet.TEST_LABEL_NAME,MNISTDataSet.TEST_IMAGE_NAME,10);
    ConvolutionalNetwork convolutionNetwork=new ConvolutionalNetwork.Builder().withInputLayer(32,32,1).withConvolutionLayer(5,5,6).withPoolingLayer(2,2).withConvolutionLayer(5,5,16).withPoolingLayer(2,2).withConvolutionLayer(5,5,120).withFullConnectedLayer(84).withFullConnectedLayer(10).build();
    ConvolutionalBackpropagation backPropagation=new ConvolutionalBackpropagation();
    backPropagation.setLearningRate(0.001);
    backPropagation.setMaxError(0.01);
    backPropagation.setErrorFunction(new MeanSquaredError());
    convolutionNetwork.setLearningRule(backPropagation);
    backPropagation.addListener(new LearningListener());
    convolutionNetwork.learn(trainSet);
    Evaluation.runFullEvaluation(convolutionNetwork,testSet);
    convolutionNetwork.save(""mnist.nnet"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
2836,displayWeight(List<Double>),D:\temp\case study\neuroph-2.94\org\neuroph\samples\convolution\util\LayerVisialize.java,neuroph,13,52,26,1,0.1748,0.1526,0.5,6,1,"private void displayWeight(List<Double> currentKernel){
  JFrame frame=new JFrame(""Weight Visualiser: "");
  frame.setSize(400,400);
  JLabel label=new JLabel();
  Dimension d=new Dimension(mapDimensions.getWidth() * RATIO,mapDimensions.getHeight() * RATIO);
  label.setSize(d);
  label.setPreferredSize(d);
  frame.getContentPane().add(label,BorderLayout.CENTER);
  frame.pack();
  frame.setVisible(true);
  BufferedImage image=new BufferedImage(mapDimensions.getWidth(),mapDimensions.getHeight(),BufferedImage.TYPE_BYTE_GRAY);
  int[] rgb=convertWeightToRGB(currentKernel);
  image.setRGB(0,0,mapDimensions.getWidth(),mapDimensions.getHeight(),rgb,0,mapDimensions.getWidth());
  label.setIcon(new ImageIcon(image.getScaledInstance(mapDimensions.getWidth() * RATIO,mapDimensions.getHeight() * RATIO,Image.SCALE_SMOOTH)));
}
"
2837,convertWeightToRGB(List<Double>),D:\temp\case study\neuroph-2.94\org\neuroph\samples\convolution\util\LayerVisialize.java,neuroph,9,30,24,4,0.2037,0.0786,0.5,5,2,"private int[] convertWeightToRGB(List<Double> pixels){
  normalizeWeights(pixels);
  int[] data=new int[mapDimensions.getWidth() * mapDimensions.getHeight()];
  int i=0;
  for (  Double weight : pixels) {
    int val=(int)(weight * 255);
    data[i++]=new Color(val,val,val).getRGB();
  }
  return data;
}
"
2838,normalizeWeights(List<Double>),D:\temp\case study\neuroph-2.94\org\neuroph\samples\convolution\util\LayerVisialize.java,neuroph,10,32,19,3,0.2571,0.0951,0,6,3,"private void normalizeWeights(List<Double> weights){
  double min=Double.MAX_VALUE;
  double max=Double.MIN_VALUE;
  for (  Double weight : weights) {
    min=Math.min(min,weight);
    max=Math.max(max,weight);
  }
  for (int i=0; i < weights.size(); i++) {
    double value=(weights.get(i) - min) / (max - min);
    weights.set(i,value);
  }
}
"
2842,displayWeight(List<Double>),D:\temp\case study\neuroph-2.94\org\neuroph\samples\convolution\util\WeightVisualiser.java,neuroph,13,52,26,1,0.1748,0.1526,0.5,6,1,"private void displayWeight(List<Double> currentKernel){
  JFrame frame=new JFrame(""Weight Visualiser: "");
  frame.setSize(400,400);
  JLabel label=new JLabel();
  Dimension d=new Dimension(kernel.getWidth() * RATIO,kernel.getHeight() * RATIO);
  label.setSize(d);
  label.setPreferredSize(d);
  frame.getContentPane().add(label,BorderLayout.CENTER);
  frame.pack();
  frame.setVisible(true);
  BufferedImage image=new BufferedImage(kernel.getWidth(),kernel.getHeight(),BufferedImage.TYPE_BYTE_GRAY);
  int[] rgb=convertWeightToRGB(currentKernel);
  image.setRGB(0,0,kernel.getWidth(),kernel.getHeight(),rgb,0,kernel.getWidth());
  label.setIcon(new ImageIcon(image.getScaledInstance(kernel.getWidth() * RATIO,kernel.getHeight() * RATIO,Image.SCALE_SMOOTH)));
}
"
2843,convertWeightToRGB(List<Double>),D:\temp\case study\neuroph-2.94\org\neuroph\samples\convolution\util\WeightVisualiser.java,neuroph,9,30,24,4,0.2037,0.0786,0.5,5,2,"private int[] convertWeightToRGB(List<Double> weights){
  normalizeWeights(weights);
  int[] data=new int[kernel.getWidth() * kernel.getHeight()];
  int i=0;
  for (  Double weight : weights) {
    int val=(int)(weight * 255);
    data[i++]=new Color(val,val,val).getRGB();
  }
  return data;
}
"
2844,normalizeWeights(List<Double>),D:\temp\case study\neuroph-2.94\org\neuroph\samples\convolution\util\WeightVisualiser.java,neuroph,10,32,19,3,0.2571,0.0951,0,6,3,"private void normalizeWeights(List<Double> weights){
  double min=Double.MAX_VALUE;
  double max=Double.MIN_VALUE;
  for (  Double weight : weights) {
    min=Math.min(min,weight);
    max=Math.max(max,weight);
  }
  for (int i=0; i < weights.size(); i++) {
    double value=(weights.get(i) - min) / (max - min);
    weights.set(i,value);
  }
}
"
2846,createLearningRule(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\evaluation\optimization\IrisOptimization.java,neuroph,6,9,3,3,0.6667,0.4286,1,1,1,"private static BackPropagation createLearningRule(){
  BackPropagation learningRule=new BackPropagation();
  learningRule.setMaxIterations(50);
  learningRule.setMaxError(0.0001);
  return learningRule;
}
"
2848,createLearningRule(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\evaluation\optimization\MLPMNISTOptimization.java,neuroph,6,9,3,3,0.6667,0.4286,1,1,1,"private static BackPropagation createLearningRule(){
  BackPropagation learningRule=new BackPropagation();
  learningRule.setMaxIterations(100);
  learningRule.setMaxError(0.0001);
  return learningRule;
}
"
2849,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\mnist\learn\CnnMNIST.java,neuroph,34,501,441,8,0.0617,0.0343,0.578947368,20,2,"/** 
 * @param args Command line parameters used to initialize parameters of convolutional network
 * [0] - maximal number of epochs during learning
 * [1] - learning error stop condition
 * [2] - learning rate used during learning process
 * [3] - number of feature maps in 1st convolutional layer
 * [4] - number of feature maps in 2nd convolutional layer
 * [5] - number of feature maps in 3rd convolutional layer
 */
public static void main(String[] args){
  try {
    int maxIter=10000;
    double maxError=0.01;
    double learningRate=0.2;
    int layer1=Integer.parseInt(args[3]);
    int layer2=Integer.parseInt(args[4]);
    int layer3=Integer.parseInt(args[5]);
    LOG.info(""{}-{}-{}"",layer1,layer2,layer3);
    String putanja=""C:\\Users\\jecak_000\\Documents\\Neuroph\\neuroph_novaVerzija\\neurophNoviPull\\neuroph-2.9\\Samples\\"";
    String labelName=putanja.concat(MNISTDataSet.TRAIN_LABEL_NAME);
    String trainImage=putanja.concat(MNISTDataSet.TRAIN_IMAGE_NAME);
    String testLabel=putanja.concat(MNISTDataSet.TEST_LABEL_NAME);
    String testImage=putanja.concat(MNISTDataSet.TEST_IMAGE_NAME);
    DataSet trainSet=MNISTDataSet.createFromFile(labelName,trainImage,100);
    DataSet testSet=MNISTDataSet.createFromFile(testLabel,testImage,100);
    Dimension2D inputDimension=new Dimension2D(32,32);
    Dimension2D convolutionKernel=new Dimension2D(5,5);
    Dimension2D poolingKernel=new Dimension2D(2,2);
    ConvolutionalNetwork convolutionNetwork=new ConvolutionalNetwork.Builder().withInputLayer(32,32,1).withConvolutionLayer(5,5,layer1).withPoolingLayer(2,2).withConvolutionLayer(5,5,layer2).withPoolingLayer(2,2).withConvolutionLayer(5,5,layer3).withFullConnectedLayer(10).build();
    ConvolutionalBackpropagation backPropagation=new ConvolutionalBackpropagation();
    backPropagation.setLearningRate(learningRate);
    backPropagation.setMaxError(maxError);
    backPropagation.setMaxIterations(maxIter);
    backPropagation.addListener(new LearningListener(convolutionNetwork,testSet));
    backPropagation.setErrorFunction(new MeanSquaredError());
    convolutionNetwork.setLearningRule(backPropagation);
    convolutionNetwork.learn(trainSet);
    Evaluation.runFullEvaluation(convolutionNetwork,testSet);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
"
2852,main(String[]),D:\temp\case study\neuroph-2.94\org\neuroph\samples\mnist\learn\MultiLayerMNIST.java,neuroph,21,187,164,8,0.0982,0.058,0.8,12,1,"/** 
 * @param args Command line parameters used to initialize parameters of multi layer neural network optimizer
 * [0] - maximal number of epochs during learning
 * [1] - learning error stop condition
 * [2] - learning rate used during learning process
 * [3] - number of validation folds
 * [4] - max number of layers in neural network
 * [5] - min neuron count per layer
 * [6] - max neuron count per layer
 * [7] - neuron increment count
 */
public static void main(String[] args) throws IOException {
  int maxIter=10000;
  double maxError=0.01;
  double learningRate=0.2;
  int validationFolds=Integer.parseInt(args[3]);
  int maxLayers=Integer.parseInt(args[4]);
  int minNeuronCount=Integer.parseInt(args[5]);
  int maxNeuronCount=Integer.parseInt(args[6]);
  int neuronIncrement=Integer.parseInt(args[7]);
  LOG.info(""MLP learning for MNIST started....."");
  DataSet trainSet=MNISTDataSet.createFromFile(MNISTDataSet.TRAIN_LABEL_NAME,MNISTDataSet.TRAIN_IMAGE_NAME,60000);
  DataSet testSet=MNISTDataSet.createFromFile(MNISTDataSet.TEST_LABEL_NAME,MNISTDataSet.TEST_IMAGE_NAME,10000);
  BackPropagation bp=new BackPropagation();
  bp.setMaxIterations(maxIter);
  bp.setMaxError(maxError);
  bp.setLearningRate(learningRate);
  LOG.info(""Evaluating model on Test Set....."");
  LOG.info(""MLP learning for MNIST successfully finished....."");
}
"
2853,FuNet1(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\mnist\master\FuNet1.java,neuroph,10,39,33,6,0.1833,0.1136,1,3,5,"public FuNet1(){
  try {
    for (    UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
      if (""Nimbus"".equals(info.getName())) {
        UIManager.setLookAndFeel(info.getClassName());
        break;
      }
    }
  }
 catch (  Exception e) {
  }
  try {
    network=network.load(new FileInputStream(""/home/mithquissir/Desktop/cnn/5-50-100/30.nnet""));
    testSet=MNISTDataSet.createFromFile(MNISTDataSet.TEST_LABEL_NAME,MNISTDataSet.TEST_IMAGE_NAME,10000);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  initComponents();
}
"
2854,updateCanvas(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\mnist\master\FuNet1.java,neuroph,9,15,0,3,0.25,0.2169,0,1,3,"public void updateCanvas(){
  Graphics2D g2=canvas.createGraphics();
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.setPaint(getColor());
  if (tool == 1) {
    g2.fillOval(currentX - ((int)value / 2),currentY - ((int)value / 2),(int)value,(int)value);
  }
 else   if (tool == 2) {
    g2.setStroke(new BasicStroke((float)value,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));
    g2.drawLine(oldX,oldY,currentX,currentY);
    g2.setStroke(new BasicStroke(1.0f));
  }
  repaint();
}
"
2856,initComponents(),D:\temp\case study\neuroph-2.94\org\neuroph\samples\mnist\master\FuNet1.java,neuroph,26,282,239,8,0.0627,0.0689,0,10,1,"private void initComponents(){
  canvas=new BufferedImage(320,320,BufferedImage.TYPE_BYTE_GRAY);
  buttonGroup1=new ButtonGroup();
  buttonGroup2=new ButtonGroup();
  jPanel4=new JPanel();
  jSlider2=new JSlider();
  jLabel1=new JLabel();
  jPanel2=new JPanel(new GridBagLayout());
  JLabel canvasLabel=new JLabel(new ImageIcon(canvas));
  jPanel2.add(canvasLabel,null);
  jPanel3=new JPanel();
  jRadioButton3=new JRadioButton();
  jRadioButton4=new JRadioButton();
  jRadioButton5=new JRadioButton();
  jRadioButton6=new JRadioButton();
  jRadioButton7=new JRadioButton();
  jRadioButton8=new JRadioButton();
  jButton1=new JButton();
  setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  setTitle(""FuNet1 --- powered by Neuroph"");
  jPanel4.setBorder(BorderFactory.createTitledBorder(""Line thickness""));
  jSlider2.setMajorTickSpacing(10);
  jSlider2.setMaximum(51);
  jSlider2.setMinimum(1);
  jSlider2.setMinorTickSpacing(5);
  jSlider2.setPaintTicks(true);
  jSlider2.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent evt){
      jSlider2StateChanged(evt);
    }
  }
);
  GroupLayout jPanel4Layout=new GroupLayout(jPanel4);
  jPanel4.setLayout(jPanel4Layout);
  jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanel4Layout.createSequentialGroup().addContainerGap().addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,51,Short.MAX_VALUE).addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.TRAILING).addComponent(jLabel1).addComponent(jSlider2,GroupLayout.PREFERRED_SIZE,150,GroupLayout.PREFERRED_SIZE)).addContainerGap()));
  label=new JLabel("""");
  Font labelFont=label.getFont();
  label.setFont(new Font(labelFont.getName(),Font.PLAIN,30));
  jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.TRAILING).addComponent(jSlider2,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addGroup(jPanel4Layout.createSequentialGroup().addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(jLabel1)).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED))));
  jPanel2.setBackground(new Color(0,0,0));
  jPanel2.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
  canvasLabel.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent evt){
      jPanel2MousePressed(evt);
    }
    public void mouseReleased(    MouseEvent evt){
      jPanel2MouseReleased(evt);
    }
  }
);
  canvasLabel.addMouseMotionListener(new MouseMotionAdapter(){
    public void mouseDragged(    MouseEvent evt){
      jPanel2MouseDragged(evt);
    }
  }
);
  jButton1.setText(""Clear"");
  jButton1.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      jButton1ActionPerformed(evt);
    }
  }
);
  GroupLayout layout=new GroupLayout(getContentPane());
  getContentPane().setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(jPanel2,GroupLayout.Alignment.TRAILING,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addGroup(layout.createSequentialGroup().addComponent(jPanel4,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jPanel3,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(jButton1,GroupLayout.DEFAULT_SIZE,112,Short.MAX_VALUE).addComponent(label,GroupLayout.DEFAULT_SIZE,112,Short.MAX_VALUE)))).addContainerGap()));
  layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING,false).addGroup(layout.createSequentialGroup().addGap(4,4,4).addComponent(jButton1,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addComponent(label,GroupLayout.PREFERRED_SIZE,30,GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)).addComponent(jPanel4,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(jPanel3,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel2,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  Graphics g=canvas.getGraphics();
  g.setColor(Color.WHITE);
  g.fillRect(0,0,canvas.getWidth(),canvas.getHeight());
  repaint();
  pack();
}
"
2862,jButton1ActionPerformed(ActionEvent),D:\temp\case study\neuroph-2.94\org\neuroph\samples\mnist\master\FuNet1.java,neuroph,6,12,9,4,0.25,0.1429,0,2,1,"private void jButton1ActionPerformed(ActionEvent evt){
  Graphics g=canvas.getGraphics();
  g.setColor(Color.WHITE);
  g.fillRect(0,0,canvas.getWidth(),canvas.getHeight());
  repaint();
}
"
2863,jPanel2MouseDragged(MouseEvent),D:\temp\case study\neuroph-2.94\org\neuroph\samples\mnist\master\FuNet1.java,neuroph,6,12,9,3,0.2667,0.0714,0,1,2,"private void jPanel2MouseDragged(MouseEvent evt){
  currentX=evt.getX();
  currentY=evt.getY();
  updateCanvas();
  if (tool == 1) {
    oldX=currentX;
    oldY=currentY;
  }
}
"
2864,jPanel2MousePressed(MouseEvent),D:\temp\case study\neuroph-2.94\org\neuroph\samples\mnist\master\FuNet1.java,neuroph,7,18,15,4,0.2041,0.0476,0,1,2,"private void jPanel2MousePressed(MouseEvent evt){
  oldX=evt.getX();
  oldY=evt.getY();
  if (tool == 2) {
    currentX=oldX;
    currentY=oldY;
  }
}
"
2866,jPanel2MouseReleased(MouseEvent),D:\temp\case study\neuroph-2.94\org\neuroph\samples\mnist\master\FuNet1.java,neuroph,27,315,279,6,0.0796,0.0476,0.428571429,10,3,"private void jPanel2MouseReleased(MouseEvent evt){
  currentX=evt.getX();
  currentY=evt.getY();
  final double SCALE=0.1;
  BufferedImage bi=new BufferedImage(32,32,BufferedImage.TYPE_BYTE_GRAY);
  Graphics2D grph=(Graphics2D)bi.getGraphics();
  grph.scale(SCALE,SCALE);
  grph.drawImage(canvas,0,0,null);
  grph.dispose();
  newPix=new double[32 * 32];
  pixels=bi.getRGB(0,0,32,32,pixels,0,32);
  for (int i=0; i < pixels.length; i++) {
    newPix[i]=255 - (pixels[i] & 0xff);
    newPix[i]/=255;
  }
  long start=System.currentTimeMillis();
  network.setInput(newPix);
  network.calculate();
  System.out.println(""Execution time: "" + (System.currentTimeMillis() - start) + "" milliseconds"");
  try {
    ImageIO.write(bi,""png"",new File(""number.png""));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  double[] networkOutput=network.getOutput();
  int maxNeuronIdx=Utils.maxIdx(networkOutput);
  ClassificationResult max=new ClassificationResult(maxNeuronIdx,networkOutput[maxNeuronIdx]);
  System.out.println(""New calculation:"");
  System.out.println(""Class: "" + max.getClassIdx());
  System.out.println(""Probability: "" + max.getNeuronOutput());
  label.setText(String.valueOf(max.getClassIdx()));
}
"
2872,normalize(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\DecimalScaleNormalizer.java,neuroph,10,32,19,4,0.2333,0.1317,0.333333333,4,3,"@Override public void normalize(DataSet dataSet){
  findMaxVectors(dataSet);
  findScaleVectors();
  for (  DataSetRow dataSetRow : dataSet.getRows()) {
    double[] normalizedInput=normalizeScale(dataSetRow.getInput(),scaleFactorIn);
    dataSetRow.setInput(normalizedInput);
    if (dataSet.isSupervised()) {
      double[] normalizedOutput=normalizeScale(dataSetRow.getDesiredOutput(),scaleFactorOut);
      dataSetRow.setDesiredOutput(normalizedOutput);
    }
  }
}
"
2873,findMaxVectors(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\DecimalScaleNormalizer.java,neuroph,19,130,89,3,0.1619,0.0745,0.4,10,8,"/** 
 * Finds max values for all columns in dataset (inputs and outputs)
 * Sets max column values to maxIn and maxOut fields
 * @param dataSet 
 */
private void findMaxVectors(DataSet dataSet){
  int inputSize=dataSet.getInputSize();
  int outputSize=dataSet.getOutputSize();
  maxIn=new double[inputSize];
  for (int i=0; i < inputSize; i++) {
    maxIn[i]=Double.MIN_VALUE;
  }
  maxOut=new double[outputSize];
  for (int i=0; i < outputSize; i++) {
    maxOut[i]=Double.MIN_VALUE;
  }
  for (  DataSetRow dataSetRow : dataSet.getRows()) {
    double[] input=dataSetRow.getInput();
    for (int i=0; i < inputSize; i++) {
      if (input[i] > maxIn[i]) {
        maxIn[i]=input[i];
      }
    }
    double[] output=dataSetRow.getDesiredOutput();
    for (int i=0; i < outputSize; i++) {
      if (output[i] > maxOut[i]) {
        maxOut[i]=output[i];
      }
    }
  }
}
"
2874,findScaleVectors(),D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\DecimalScaleNormalizer.java,neuroph,15,74,43,2,0.2222,0.1384,0,4,7,"public void findScaleVectors(){
  scaleFactorIn=new double[maxIn.length];
  for (int i=0; i < scaleFactorIn.length; i++) {
    scaleFactorIn[i]=1;
  }
  for (int i=0; i < maxIn.length; i++) {
    while (maxIn[i] > 1) {
      maxIn[i]=maxIn[i] / 10.0;
      scaleFactorIn[i]=scaleFactorIn[i] * 10;
    }
  }
  scaleFactorOut=new double[maxOut.length];
  for (int i=0; i < scaleFactorOut.length; i++) {
    scaleFactorOut[i]=1;
  }
  for (int i=0; i < maxOut.length; i++) {
    while (maxOut[i] > 1) {
      maxOut[i]=maxOut[i] / 10.0;
      scaleFactorOut[i]=scaleFactorOut[i] * 10;
    }
  }
}
"
2875,"normalizeScale(double[],double[])",D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\DecimalScaleNormalizer.java,neuroph,6,11,7,3,0.3333,0.1429,0,4,2,"private double[] normalizeScale(double[] vector,double[] scaleFactor){
  double[] normalizedVector=new double[vector.length];
  for (int i=0; i < vector.length; i++) {
    normalizedVector[i]=vector[i] / scaleFactor[i];
  }
  return normalizedVector;
}
"
2876,normalize(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\MaxMinNormalizer.java,neuroph,6,4,0,1,0.3125,0.2295,0.333333333,4,3,"@Override public void normalize(DataSet dataSet){
  findMaxAndMinVectors(dataSet);
  for (  DataSetRow row : dataSet.getRows()) {
    double[] normalizedInput=normalizeMaxMin(row.getInput(),minIn,maxIn);
    row.setInput(normalizedInput);
    if (dataSet.isSupervised()) {
      double[] normalizedOutput=normalizeMaxMin(row.getDesiredOutput(),minOut,maxOut);
      row.setDesiredOutput(normalizedOutput);
    }
  }
}
"
2877,findMaxAndMinVectors(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\MaxMinNormalizer.java,neuroph,27,267,183,3,0.1531,0.0783,0.4,10,10,"private void findMaxAndMinVectors(DataSet dataSet){
  int inputSize=dataSet.getInputSize();
  int outputSize=dataSet.getOutputSize();
  maxIn=new double[inputSize];
  minIn=new double[inputSize];
  for (int i=0; i < inputSize; i++) {
    maxIn[i]=Double.MIN_VALUE;
    minIn[i]=Double.MAX_VALUE;
  }
  maxOut=new double[outputSize];
  minOut=new double[outputSize];
  for (int i=0; i < outputSize; i++) {
    maxOut[i]=Double.MIN_VALUE;
    minOut[i]=Double.MAX_VALUE;
  }
  for (  DataSetRow dataSetRow : dataSet.getRows()) {
    double[] input=dataSetRow.getInput();
    for (int i=0; i < inputSize; i++) {
      if (input[i] > maxIn[i]) {
        maxIn[i]=input[i];
      }
      if (input[i] < minIn[i]) {
        minIn[i]=input[i];
      }
    }
    double[] output=dataSetRow.getDesiredOutput();
    for (int i=0; i < outputSize; i++) {
      if (output[i] > maxOut[i]) {
        maxOut[i]=output[i];
      }
      if (output[i] < minOut[i]) {
        minOut[i]=output[i];
      }
    }
  }
}
"
2878,"normalizeMaxMin(double[],double[],double[])",D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\MaxMinNormalizer.java,neuroph,6,11,7,3,0.3,0.1286,0,5,2,"private double[] normalizeMaxMin(double[] vector,double[] min,double[] max){
  double[] normalizedVector=new double[vector.length];
  for (int i=0; i < vector.length; i++) {
    normalizedVector[i]=(vector[i] - min[i]) / (max[i] - min[i]);
  }
  return normalizedVector;
}
"
2879,normalize(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\MaxNormalizer.java,neuroph,6,4,0,1,0.3611,0.2689,0.333333333,4,3,"@Override public void normalize(DataSet dataSet){
  findMaxVectors(dataSet);
  for (  DataSetRow row : dataSet.getRows()) {
    double[] normalizedInput=normalizeMax(row.getInput(),maxIn);
    row.setInput(normalizedInput);
    if (dataSet.isSupervised()) {
      double[] normalizedOutput=normalizeMax(row.getDesiredOutput(),maxOut);
      row.setDesiredOutput(normalizedOutput);
    }
  }
}
"
2880,findMaxVectors(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\MaxNormalizer.java,neuroph,18,114,75,3,0.1667,0.0794,0.4,10,8,"/** 
 * Finds max values for columns in input and output vector for given data set
 * @param dataSet  
 */
private void findMaxVectors(DataSet dataSet){
  int inputSize=dataSet.getInputSize();
  int outputSize=dataSet.getOutputSize();
  maxIn=new double[inputSize];
  for (int i=0; i < inputSize; i++) {
    maxIn[i]=Double.MIN_VALUE;
  }
  maxOut=new double[outputSize];
  for (int i=0; i < outputSize; i++)   maxOut[i]=Double.MIN_VALUE;
  for (  DataSetRow dataSetRow : dataSet.getRows()) {
    double[] input=dataSetRow.getInput();
    for (int i=0; i < inputSize; i++) {
      if (input[i] > maxIn[i]) {
        maxIn[i]=input[i];
      }
    }
    double[] output=dataSetRow.getDesiredOutput();
    for (int i=0; i < outputSize; i++) {
      if (output[i] > maxOut[i]) {
        maxOut[i]=output[i];
      }
    }
  }
}
"
2881,"normalizeMax(double[],double[])",D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\MaxNormalizer.java,neuroph,6,11,7,3,0.3333,0.1429,0,4,2,"public double[] normalizeMax(double[] vector,double[] max){
  double[] normalizedVector=new double[vector.length];
  for (int i=0; i < vector.length; i++) {
    normalizedVector[i]=vector[i] / max[i];
  }
  return normalizedVector;
}
"
2884,normalize(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\RangeNormalizer.java,neuroph,8,15,2,2,0.25,0.1765,0.333333333,4,3,"@Override public void normalize(DataSet dataSet){
  findMaxAndMinVectors(dataSet);
  for (  DataSetRow row : dataSet.getRows()) {
    double[] normalizedInput=normalizeToRange(row.getInput(),minIn,maxIn);
    row.setInput(normalizedInput);
    if (dataSet.isSupervised()) {
      double[] normalizedOutput=normalizeToRange(row.getDesiredOutput(),minOut,maxOut);
      row.setDesiredOutput(normalizedOutput);
    }
  }
}
"
2885,"normalizeToRange(double[],double[],double[])",D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\RangeNormalizer.java,neuroph,6,11,7,3,0.2619,0.1122,0,5,2,"private double[] normalizeToRange(double[] vector,double[] min,double[] max){
  double[] normalizedVector=new double[vector.length];
  for (int i=0; i < vector.length; i++) {
    normalizedVector[i]=((vector[i] - min[i]) / (max[i] - min[i])) * (highLimit - lowLimit) + lowLimit;
  }
  return normalizedVector;
}
"
2886,findMaxAndMinVectors(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\RangeNormalizer.java,neuroph,27,267,183,3,0.1531,0.0783,0.4,10,10,"private void findMaxAndMinVectors(DataSet dataSet){
  int inputSize=dataSet.getInputSize();
  int outputSize=dataSet.getOutputSize();
  maxIn=new double[inputSize];
  minIn=new double[inputSize];
  for (int i=0; i < inputSize; i++) {
    maxIn[i]=Double.MIN_VALUE;
    minIn[i]=Double.MAX_VALUE;
  }
  maxOut=new double[outputSize];
  minOut=new double[outputSize];
  for (int i=0; i < outputSize; i++) {
    maxOut[i]=Double.MIN_VALUE;
    minOut[i]=Double.MAX_VALUE;
  }
  for (  DataSetRow dataSetRow : dataSet.getRows()) {
    double[] input=dataSetRow.getInput();
    for (int i=0; i < inputSize; i++) {
      if (input[i] > maxIn[i]) {
        maxIn[i]=input[i];
      }
      if (input[i] < minIn[i]) {
        minIn[i]=input[i];
      }
    }
    double[] output=dataSetRow.getDesiredOutput();
    for (int i=0; i < outputSize; i++) {
      if (output[i] > maxOut[i]) {
        maxOut[i]=output[i];
      }
      if (output[i] < minOut[i]) {
        minOut[i]=output[i];
      }
    }
  }
}
"
2887,normalize(DataSet),D:\temp\case study\neuroph-2.94\org\neuroph\util\data\norm\ZeroMeanNormalizer.java,neuroph,9,16,0,1,0.2963,0.1759,0.428571429,8,4,"public void normalize(DataSet dataSet){
  double[] maxInput=DataSetStats.calculateMaxByColumns(dataSet);
  double[] minInput=DataSetStats.calculateMinByColumns(dataSet);
  double[] meanInput=DataSetStats.calculateMeanByColumns(dataSet);
  for (  DataSetRow row : dataSet.getRows()) {
    double[] normalizedInput=row.getInput();
    for (int i=0; i < dataSet.getInputSize(); i++) {
      double divider=maxInput[i] - minInput[i] == 0 ? 1 : maxInput[i] - minInput[i];
      normalizedInput[i]=(normalizedInput[i] - meanInput[i]) / divider;
    }
    row.setInput(normalizedInput);
  }
}
"
2896,save(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\Config.java,xdm,44,206,0,4,0.0665,0.3445,1,42,6,"public void save(){
  FileWriter fw=null;
  try {
    File file=new File(System.getProperty(""user.home""),"".xdman/config.txt"");
    fw=new FileWriter(file);
    String newLine=""\n"";
    fw.write(""monitoring:"" + this.monitoring + newLine);
    fw.write(""downloadFolder:"" + this.downloadFolder + newLine);
    fw.write(""maxDownloads:"" + this.maxDownloads + newLine);
    fw.write(""maxSegments:"" + this.maxSegments + newLine);
    fw.write(""networkTimeout:"" + this.networkTimeout + newLine);
    fw.write(""tcpWindowSize:"" + this.tcpWindowSize + newLine);
    fw.write(""minSegmentSize:"" + this.minSegmentSize + newLine);
    fw.write(""minVidSize:"" + this.minVidSize + newLine);
    fw.write(""duplicateAction:"" + this.duplicateAction + newLine);
    fw.write(""speedLimit:"" + this.speedLimit + newLine);
    fw.write(""showDownloadWindow:"" + this.showDownloadWindow + newLine);
    fw.write(""showDownloadCompleteWindow:"" + this.showDownloadCompleteWindow + newLine);
    fw.write(""blockedHosts:"" + XDMUtils.appendArray2Str(this.blockedHosts) + newLine);
    fw.write(""vidUrls:"" + XDMUtils.appendArray2Str(this.vidUrls) + newLine);
    fw.write(""fileExts:"" + XDMUtils.appendArray2Str(this.fileExts) + newLine);
    fw.write(""vidExts:"" + XDMUtils.appendArray2Str(this.vidExts) + newLine);
    fw.write(""proxyMode:"" + this.proxyMode + newLine);
    fw.write(""proxyPac:"" + this.proxyPac + newLine);
    fw.write(""proxyHost:"" + this.proxyHost + newLine);
    fw.write(""proxyPort:"" + this.proxyPort + newLine);
    fw.write(""socksHost:"" + this.socksHost + newLine);
    fw.write(""socksPort:"" + this.socksPort + newLine);
    fw.write(""proxyUser:"" + this.proxyUser + newLine);
    fw.write(""proxyPass:"" + this.proxyPass + newLine);
    fw.write(""autoShutdown:"" + this.autoShutdown + newLine);
    fw.write(""keepAwake:"" + this.keepAwake + newLine);
    fw.write(""execCmd:"" + this.execCmd + newLine);
    fw.write(""execAntivir:"" + this.execAntivir + newLine);
    fw.write(""version:"" + XDMApp.APP_VERSION + newLine);
    fw.write(""autoStart:"" + this.autoStart + newLine);
    fw.write(""language:"" + this.language + newLine);
    if (!StringUtils.isNullOrEmptyOrBlank(this.antivirExe))     fw.write(""antivirExe:"" + this.antivirExe + newLine);
    if (!StringUtils.isNullOrEmptyOrBlank(this.antivirCmd))     fw.write(""antivirCmd:"" + this.antivirCmd + newLine);
    if (!StringUtils.isNullOrEmptyOrBlank(this.customCmd))     fw.write(""customCmd:"" + this.customCmd + newLine);
    fw.write(""showVideoNotification:"" + this.showVideoNotification + newLine);
  }
 catch (  Exception e) {
  }
  try {
    fw.close();
  }
 catch (  Exception e) {
  }
}
"
2897,load(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\Config.java,xdm,56,876,212,5,0.0408,0.1339,1,44,43,"public void load(){
  BufferedReader br=null;
  try {
    File file=new File(System.getProperty(""user.home""),"".xdman/config.txt"");
    if (!file.exists()) {
      return;
    }
    FileReader r=new FileReader(file);
    br=new BufferedReader(r);
    while (true) {
      String ln=br.readLine();
      if (ln == null)       break;
      if (ln.startsWith(""#""))       continue;
      int index=ln.indexOf("":"");
      if (index < 1)       continue;
      String key=ln.substring(0,index);
      String val=ln.substring(index + 1);
      if (key.equals(""monitoring"")) {
        this.monitoring=val.equals(""true"");
      }
 else       if (key.equals(""downloadFolder"")) {
        this.downloadFolder=val;
      }
 else       if (key.equals(""maxSegments"")) {
        this.maxSegments=Integer.parseInt(val);
      }
 else       if (key.equals(""minSegmentSize"")) {
        this.minSegmentSize=Integer.parseInt(val);
      }
 else       if (key.equals(""networkTimeout"")) {
        this.networkTimeout=Integer.parseInt(val);
      }
 else       if (key.equals(""tcpWindowSize"")) {
        this.tcpWindowSize=Integer.parseInt(val);
      }
 else       if (key.equals(""duplicateAction"")) {
        this.duplicateAction=Integer.parseInt(val);
      }
 else       if (key.equals(""speedLimit"")) {
        this.speedLimit=Integer.parseInt(val);
      }
 else       if (key.equals(""showDownloadWindow"")) {
        this.showDownloadWindow=val.equals(""true"");
      }
 else       if (key.equals(""showDownloadCompleteWindow"")) {
        this.showDownloadCompleteWindow=val.equals(""true"");
      }
 else       if (key.equals(""minVidSize"")) {
        this.minVidSize=Integer.parseInt(val);
      }
 else       if (key.equals(""maxDownloads"")) {
        this.maxDownloads=Integer.parseInt(val);
      }
 else       if (key.equals(""blockedHosts"")) {
        this.blockedHosts=val.split("","");
      }
 else       if (key.equals(""vidUrls"")) {
        this.vidUrls=val.split("","");
      }
 else       if (key.equals(""fileExts"")) {
        this.fileExts=val.split("","");
      }
 else       if (key.equals(""vidExts"")) {
        this.vidExts=val.split("","");
      }
 else       if (key.equals(""proxyMode"")) {
        this.proxyMode=Integer.parseInt(val);
      }
 else       if (key.equals(""proxyPort"")) {
        this.proxyPort=Integer.parseInt(val);
      }
 else       if (key.equals(""socksPort"")) {
        this.socksPort=Integer.parseInt(val);
      }
 else       if (key.equals(""proxyPac"")) {
        this.proxyPac=val;
      }
 else       if (key.equals(""proxyHost"")) {
        this.proxyHost=val;
      }
 else       if (key.equals(""socksHost"")) {
        this.socksHost=val;
      }
 else       if (key.equals(""proxyUser"")) {
        this.proxyUser=val;
      }
 else       if (key.equals(""proxyPass"")) {
        this.proxyPass=val;
      }
 else       if (key.equals(""showVideoNotification"")) {
        this.showVideoNotification=""true"".equals(val);
      }
 else       if (key.equals(""keepAwake"")) {
        this.keepAwake=""true"".equals(val);
      }
 else       if (key.equals(""autoStart"")) {
        this.autoStart=""true"".equals(val);
      }
 else       if (key.equals(""execAntivir"")) {
        this.execAntivir=""true"".equals(val);
      }
 else       if (key.equals(""execCmd"")) {
        this.execCmd=""true"".equals(val);
      }
 else       if (key.equals(""antivirExe"")) {
        this.antivirExe=val;
      }
 else       if (key.equals(""antivirCmd"")) {
        this.antivirCmd=val;
      }
 else       if (key.equals(""customCmd"")) {
        this.customCmd=val;
      }
 else       if (key.equals(""autoShutdown"")) {
        this.autoShutdown=""true"".equals(val);
      }
 else       if (key.equals(""version"")) {
        this.firstRun=!XDMApp.APP_VERSION.equals(val);
      }
 else       if (key.equals(""language"")) {
        this.language=val;
      }
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  try {
    br.close();
  }
 catch (  Exception e) {
  }
}
"
2898,Config(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\Config.java,xdm,41,748,676,25,0.0377,0.0584,1,32,5,"private Config(){
  File f=new File(System.getProperty(""user.home""),"".xdman"");
  if (!f.exists()) {
    f.mkdirs();
  }
  dataFolder=f.getAbsolutePath();
  f=new File(dataFolder,""metadata"");
  if (!f.exists()) {
    f.mkdir();
  }
  this.metadataFolder=f.getAbsolutePath();
  f=new File(dataFolder,""temp"");
  if (!f.exists()) {
    f.mkdir();
  }
  this.temporaryFolder=f.getAbsolutePath();
  this.downloadFolder=XDMUtils.getDownloadsFolder();
  if (!new File(this.downloadFolder).exists()) {
    this.downloadFolder=System.getProperty(""user.home"");
  }
  this.monitoring=true;
  this.showDownloadWindow=true;
  this.setMaxSegments(8);
  this.setMinSegmentSize(64 * 1024);
  this.maxDownloads=100;
  this.minVidSize=1 * 1024 * 1024;
  this.defaultFileTypes=new String[]{""3GP"",""7Z"",""AVI"",""BZ2"",""DEB"",""DOC"",""DOCX"",""EXE"",""GZ"",""ISO"",""MSI"",""PDF"",""PPT"",""PPTX"",""RAR"",""RPM"",""XLS"",""XLSX"",""SIT"",""SITX"",""TAR"",""JAR"",""ZIP""};
  this.fileExts=defaultFileTypes;
  this.autoShutdown=false;
  this.blockedHosts=new String[]{""update.microsoft.com"",""windowsupdate.com"",""thwawte.com""};
  this.defaultVideoTypes=new String[]{""MP4"",""M3U8"",""F4M"",""WEBM"",""OGG"",""MP3"",""AAC"",""FLV"",""MKV"",""DIVX"",""MOV"",""MPG"",""MPEG"",""OPUS""};
  this.vidExts=defaultVideoTypes;
  this.vidUrls=new String[]{"".facebook.com|pagelet"",""player.vimeo.com/"",""instagram.com/p/""};
  this.networkTimeout=60;
  this.tcpWindowSize=8;
  this.speedLimit=0;
  this.proxyMode=0;
  this.proxyPort=0;
  this.socksPort=0;
  this.proxyPac=this.proxyHost=this.proxyUser=this.proxyPass=this.socksHost="""";
  this.showVideoNotification=true;
  this.showDownloadCompleteWindow=true;
  this.firstRun=true;
  this.language=""en"";
}
"
2997,load(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\CredentialManager.java,xdm,20,167,144,5,0.1091,0.0731,0.75,7,10,"private void load(){
  BufferedReader br=null;
  try {
    File f=new File(Config.getInstance().getDataFolder(),"".credentials"");
    if (!f.exists()) {
      Logger.log(""No saved credentials"");
      return;
    }
    br=new BufferedReader(new InputStreamReader(new FileInputStream(f)));
    if (!savedCredentials.isEmpty())     savedCredentials.clear();
    while (true) {
      String ln=br.readLine();
      if (ln == null)       break;
      String str=new String(Base64.decode(ln));
      String[] arr=str.split(""\n"");
      if (arr.length < 2)       continue;
      savedCredentials.put(arr[0],new PasswordAuthentication(arr[1],arr.length == 3 ? arr[2].toCharArray() : new char[0]));
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    try {
      if (br != null) {
        br.close();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
"
2998,save(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\CredentialManager.java,xdm,19,145,119,4,0.1128,0.0721,0.75,10,5,"public void save(){
  StringBuilder buf=new StringBuilder();
  Iterator<String> savedKeyIterator=savedCredentials.keySet().iterator();
  while (savedKeyIterator.hasNext()) {
    String key=savedKeyIterator.next();
    PasswordAuthentication pauth=savedCredentials.get(key);
    String str=key + ""\n"" + pauth.getUserName()+ ""\n""+ new String(pauth.getPassword());
    String str64=Base64.encode(str.getBytes());
    buf.append(str64 + ""\n"");
  }
  OutputStream out=null;
  try {
    File f=new File(Config.getInstance().getDataFolder(),"".credentials"");
    out=new FileOutputStream(f);
    out.write(buf.toString().getBytes());
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    try {
      if (out != null) {
        out.close();
      }
    }
 catch (    Exception e) {
    }
  }
}
"
3034,"DownloadQueue(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\DownloadQueue.java,xdm,6,15,15,6,0.1667,0,0,6,1,"public DownloadQueue(String id,String name){
  this.name=name;
  this.queueId=id;
  queuedItems=new ArrayList<String>();
  this.startTime=this.endTime=-1;
}
"
3037,stop(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\DownloadQueue.java,xdm,10,37,29,4,0.2,0.0708,0.5,5,5,"public void stop(){
  running=false;
  XDMApp app=XDMApp.getInstance();
  for (int i=0; i < queuedItems.size(); i++) {
    String id=queuedItems.get(i);
    DownloadEntry ent=app.getEntry(id);
    int state=ent.getState();
    if (state == XDMConstants.FAILED || state == XDMConstants.FINISHED || state == XDMConstants.PAUSED) {
      continue;
    }
 else {
      app.pauseDownload(id);
    }
  }
}
"
3038,next(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\DownloadQueue.java,xdm,30,356,277,4,0.1262,0.0808,0.428571429,7,14,"public synchronized void next(){
  Logger.log(queueId + "" attmpting to process next item"");
  if (!running)   return;
  int c=0;
  XDMApp app=XDMApp.getInstance();
  if (queuedItems == null)   return;
  if (app.queueItemPending(queueId)) {
    Logger.log(queueId + "" not processing as has already pending download"");
    return;
  }
  if (currentItemId != null) {
    DownloadEntry ent=app.getEntry(currentItemId);
    if (ent != null) {
      int state=ent.getState();
      if (!(state == XDMConstants.FAILED || state == XDMConstants.PAUSED || state == XDMConstants.FINISHED)) {
        Logger.log(queueId + "" not processing as has already active download"");
        return;
      }
    }
  }
  Logger.log(queueId + "" total queued "" + queuedItems.size());
  if (!(index < queuedItems.size())) {
    index=0;
  }
  for (; index < queuedItems.size(); ) {
    String id=queuedItems.get(index);
    DownloadEntry ent=app.getEntry(id);
    if (ent != null) {
      int state=ent.getState();
      if (state == XDMConstants.FAILED || state == XDMConstants.PAUSED) {
        Logger.log(""index: "" + index + "" c: ""+ c);
        currentItemId=id;
        index++;
        ent.setStartedByUser(false);
        XDMApp.getInstance().resumeDownload(id,false);
        return;
      }
    }
    index++;
  }
}
"
3039,removeFromQueue(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\DownloadQueue.java,xdm,16,91,62,4,0.1687,0.0845,0.6,5,6,"public void removeFromQueue(String id){
  int c=0;
  XDMApp app=XDMApp.getInstance();
  for (int i=0; i < queuedItems.size(); i++) {
    if (queuedItems.get(i).equals(id)) {
      c=i;
      if (c <= index) {
        index--;
      }
      queuedItems.remove(i);
      if (id.equals(currentItemId)) {
        currentItemId=null;
      }
      DownloadEntry ent=app.getEntry(id);
      if (ent != null) {
        ent.setQueueId("""");
      }
      QueueManager.getInstance().saveQueues();
      return;
    }
  }
}
"
3040,addToQueue(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\DownloadQueue.java,xdm,9,24,12,4,0.2381,0.1129,0.666666667,2,3,"public void addToQueue(String id){
  if (!queuedItems.contains(id)) {
    Logger.log(id + "" added to "" + queueId);
    queuedItems.add(id);
    DownloadEntry ent=XDMApp.getInstance().getEntry(id);
    if (ent != null) {
      ent.setQueueId(queueId);
    }
  }
  QueueManager.getInstance().saveQueues();
}
"
3059,hasPendingItems(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\DownloadQueue.java,xdm,7,17,13,4,0.2286,0.0958,0.666666667,2,5,"public boolean hasPendingItems(){
  if (!running) {
    return false;
  }
  for (  String id : queuedItems) {
    DownloadEntry ent=XDMApp.getInstance().getEntry(id);
    if (ent != null) {
      if (ent.getState() != XDMConstants.FINISHED) {
        return true;
      }
    }
  }
  return false;
}
"
3066,main(String[]),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\Main.java,xdm,10,41,37,7,0.15,0.0641,1,2,2,"public static void main(String[] args){
  Logger.log(""loading..."");
  Logger.log(System.getProperty(""java.version"") + "" "" + System.getProperty(""os.version""));
  try {
    UIManager.setLookAndFeel(new XDMLookAndFeel());
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  XDMApp.start(args);
}
"
3072,loadQueues(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\QueueManager.java,xdm,39,542,343,5,0.0725,0.0875,0.333333333,17,12,"private void loadQueues(){
  File file=new File(Config.getInstance().getDataFolder(),""queues.txt"");
  DownloadQueue defaultQ=new DownloadQueue("""",StringResource.get(""DEF_QUEUE""));
  queueList.add(defaultQ);
  if (!file.exists()) {
    return;
  }
  SimpleDateFormat dateFormatter=new SimpleDateFormat(""yyyy-MM-dd"");
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),Charset.forName(""UTF-8"")));
    int count=Integer.parseInt(reader.readLine().trim());
    for (int i=0; i < count; i++) {
      String id=reader.readLine().trim();
      String name=reader.readLine().trim();
      DownloadQueue queue=null;
      if ("""".equals(id)) {
        queue=defaultQ;
      }
 else {
        queue=new DownloadQueue(id,name);
      }
      int c=Integer.parseInt(reader.readLine().trim());
      for (int j=0; j < c; j++) {
        queue.getQueuedItems().add(reader.readLine().trim());
      }
      boolean hasStartTime=Integer.parseInt(reader.readLine()) == 1;
      if (hasStartTime) {
        queue.setStartTime(Long.parseLong(reader.readLine()));
        boolean hasEndTime=Integer.parseInt(reader.readLine()) == 1;
        if (hasEndTime) {
          queue.setEndTime(Long.parseLong(reader.readLine()));
        }
        boolean isPeriodic=Integer.parseInt(reader.readLine()) == 1;
        queue.setPeriodic(isPeriodic);
        if (isPeriodic) {
          queue.setDayMask(Integer.parseInt(reader.readLine()));
        }
 else {
          if (Integer.parseInt(reader.readLine()) == 1) {
            String ln=reader.readLine();
            queue.setExecDate(dateFormatter.parse(ln));
          }
        }
      }
      if (queue.getQueueId().length() > 0) {
        queueList.add(queue);
      }
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  try {
    reader.close();
  }
 catch (  Exception e1) {
  }
}
"
3073,saveQueues(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\QueueManager.java,xdm,38,422,141,4,0.1155,0.1998,0.272727273,11,11,"public void saveQueues(){
  int count=queueList.size();
  File file=new File(Config.getInstance().getDataFolder(),""queues.txt"");
  BufferedWriter writer=null;
  String newLine=System.getProperty(""line.separator"");
  SimpleDateFormat dateFormatter=new SimpleDateFormat(""yyyy-MM-dd"");
  try {
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),Charset.forName(""UTF-8"")));
    writer.write(count + newLine);
    for (int i=0; i < count; i++) {
      DownloadQueue queue=queueList.get(i);
      writer.write(queue.getQueueId() + newLine);
      writer.write(queue.getName() + newLine);
      ArrayList<String> queuedItems=queue.getQueuedItems();
      writer.write(queuedItems.size() + newLine);
      for (int j=0; j < queuedItems.size(); j++) {
        writer.write(queuedItems.get(j) + newLine);
      }
      if (queue.getStartTime() != -1) {
        writer.write(""1"" + newLine);
        writer.write(queue.getStartTime() + newLine);
        if (queue.getEndTime() != -1) {
          writer.write(""1"" + newLine);
          writer.write(queue.getEndTime() + newLine);
        }
 else {
          writer.write(""0"" + newLine);
        }
        writer.write((queue.isPeriodic() ? 1 : 0) + newLine);
        if (queue.isPeriodic()) {
          writer.write(queue.getDayMask() + newLine);
        }
 else {
          if (queue.getExecDate() != null) {
            writer.write(""1"" + newLine);
            writer.write(dateFormatter.format(queue.getExecDate()) + newLine);
          }
 else {
            writer.write(""0"" + newLine);
          }
        }
      }
 else {
        writer.write(""0"" + newLine);
      }
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  if (writer != null) {
    try {
      writer.close();
    }
 catch (    IOException e) {
      Logger.log(e);
    }
  }
}
"
3074,removeQueue(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\QueueManager.java,xdm,12,41,16,3,0.2024,0.1928,0.5,5,5,"public void removeQueue(String queueId){
  DownloadQueue q=getQueueById(queueId);
  if (q == null)   return;
  if (q.isRunning()) {
    q.stop();
  }
  for (int i=0; i < q.getQueuedItems().size(); i++) {
    String id=q.getQueuedItems().get(i);
    DownloadEntry ent=XDMApp.getInstance().getEntry(id);
    if (ent != null) {
      ent.setQueueId("""");
    }
  }
  queueList.remove(q);
}
"
3075,createNewQueue(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\QueueManager.java,xdm,16,105,90,5,0.1389,0.0684,0.5,6,6,"public void createNewQueue(){
  int counter=1;
  String name="""";
  String qw=StringResource.get(""Q_WORD"");
  while (true) {
    boolean found=false;
    counter++;
    for (    DownloadQueue qi : queueList) {
      if ("""".equals(qi.getQueueId()))       continue;
      if ((qw + "" "" + counter).equals(qi.getName())) {
        found=true;
        break;
      }
    }
    if (!found) {
      name=qw + "" "" + counter;
      break;
    }
  }
  DownloadQueue q=new DownloadQueue(UUID.randomUUID().toString(),name);
  queueList.add(q);
  saveQueues();
}
"
3076,"fixCorruptEntries(Iterator<String>,XDMApp)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\QueueManager.java,xdm,18,130,107,3,0.1389,0.0556,0.75,11,7,"public void fixCorruptEntries(Iterator<String> ids,XDMApp app){
  DownloadQueue dfq=getDefaultQueue();
  while (ids.hasNext()) {
    String id=ids.next();
    DownloadEntry ent=app.getEntry(id);
    String qId=ent.getQueueId();
    if (qId == null || getQueueById(qId) == null) {
      dfq.getQueuedItems().add(id);
      ent.setQueueId("""");
    }
  }
  for (int i=0; i < queueList.size(); i++) {
    DownloadQueue q=queueList.get(i);
    ArrayList<String> corruptIds=new ArrayList<String>();
    for (int k=0; k < q.getQueuedItems().size(); k++) {
      String id=q.getQueuedItems().get(k);
      if (app.getEntry(id) == null) {
        corruptIds.add(id);
      }
    }
    q.getQueuedItems().removeAll(corruptIds);
  }
}
"
3080,run(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\QueueScheduler.java,xdm,58,1517,1381,10,0.0517,0.0366,0.35,21,25,"@Override public void run(){
  long lastUpdateChecked=0;
  try {
    Calendar cal=Calendar.getInstance();
    while (!stop) {
      try {
        long currentTime=System.currentTimeMillis();
        if (currentTime - lastKeepAwakePing > 3000) {
          if (!XDMApp.getInstance().isAllFinished()) {
            XDMUtils.keepAwakePing();
            lastKeepAwakePing=currentTime;
          }
        }
        ArrayList<DownloadQueue> queues=QueueManager.getInstance().getQueueList();
        for (int i=0; i < queues.size(); i++) {
          DownloadQueue queue=queues.get(i);
          if (queue.isRunning() || queue.getStartTime() == -1) {
            continue;
          }
          Date now=new Date();
          cal.setTime(now);
          Date onlyDate=DateTimeUtils.getDatePart(cal);
          long seconds=DateTimeUtils.getTimePart(now);
          if (seconds > queue.getStartTime()) {
            if (queue.getEndTime() > 0) {
              if (queue.getEndTime() < seconds) {
                continue;
              }
            }
          }
 else {
            continue;
          }
          if (queue.isPeriodic()) {
            int day=cal.get(Calendar.DAY_OF_WEEK);
            int mask=0x01 << (day - 1);
            if ((queue.getDayMask() & mask) != mask) {
              continue;
            }
          }
 else {
            Date execDate=queue.getExecDate();
            if (execDate == null) {
              continue;
            }
            cal.setTime(execDate);
            Date onlyDate2=DateTimeUtils.getDatePart(cal);
            if (onlyDate.compareTo(onlyDate2) < 0) {
              continue;
            }
          }
          queue.start();
        }
        for (int i=0; i < queues.size(); i++) {
          DownloadQueue queue=queues.get(i);
          if (!queue.isRunning()) {
            continue;
          }
          if (queue.getEndTime() < 1) {
            continue;
          }
          Date now=new Date();
          long seconds=DateTimeUtils.getTimePart(now);
          if (queue.getEndTime() < seconds) {
            queue.stop();
          }
        }
        Thread.sleep(1000);
      }
 catch (      Exception e2) {
        Logger.log(""error in scheduler: "" + e2);
        Logger.log(e2);
      }
      long now=System.currentTimeMillis();
      if (now - lastUpdateChecked > 3600 * 1000) {
        int stat=UpdateChecker.getUpdateStat();
switch (stat) {
case UpdateChecker.NO_UPDATE_AVAILABLE:
          break;
case UpdateChecker.APP_UPDATE_AVAILABLE:
        XDMApp.getInstance().notifyAppUpdate();
      break;
case UpdateChecker.COMP_NOT_INSTALLED:
    XDMApp.getInstance().notifyComponentInstall();
  break;
case UpdateChecker.COMP_UPDATE_AVAILABLE:
XDMApp.getInstance().notifyComponentUpdate();
break;
}
}
lastUpdateChecked=now;
}
}
 catch (Exception e) {
Logger.log(""error in scheduler: "" + e);
Logger.log(e);
}
}
"
3085,showMainWindow(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,6,9,3,3,0.4167,0.3214,1,0,2,"public void showMainWindow(){
  if (mainWindow == null) {
    mainWindow=new MainWindow();
  }
  mainWindow.setVisible(true);
  mainWindow.toFront();
}
"
3086,XDMApp(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,14,90,89,13,0.0774,0.0038,0.5,0,1,"private XDMApp(){
  listChangeListeners=new ArrayList<ListChangeListener>();
  downloads=new HashMap<String,DownloadEntry>();
  downloaders=new HashMap<String,Downloader>();
  downloadWindows=new HashMap<String,DownloadWindow>();
  loadDownloadList();
  lastSaved=System.currentTimeMillis();
  pendingDownloads=new ArrayList<String>();
  qMgr=QueueManager.getInstance();
  qMgr.fixCorruptEntries(getDownloadIds(),this);
  QueueScheduler.getInstance().start();
  Config.getInstance().load();
  HttpContext.getInstance().init();
}
"
3088,downloadFinished(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,24,241,206,9,0.1204,0.0656,0.4,4,10,"public void downloadFinished(String id){
  DownloadEntry ent=downloads.get(id);
  ent.setState(XDMConstants.FINISHED);
  Downloader d=downloaders.remove(id);
  if (d != null && d.getSize() < 0) {
    ent.setSize(d.getDownloaded());
  }
  DownloadWindow wnd=downloadWindows.get(id);
  if (wnd != null) {
    wnd.close(XDMConstants.FINISHED,0);
    downloadWindows.remove(id);
    if (ent.isStartedByUser()) {
      new DownloadCompleteWnd(ent.getFile(),ent.getFolder()).setVisible(true);
    }
  }
  notifyListeners(null);
  saveDownloadList();
  if (Config.getInstance().isExecAntivir()) {
    if (!StringUtils.isNullOrEmptyOrBlank(Config.getInstance().getAntivirExe())) {
      execAntivir();
    }
  }
  processNextItem(id);
  if (isAllFinished()) {
    if (Config.getInstance().isAutoShutdown()) {
      initShutdown();
    }
    if (Config.getInstance().isExecCmd()) {
      execCmd();
    }
  }
}
"
3089,downloadFailed(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,16,91,62,5,0.1641,0.1191,1,4,3,"public void downloadFailed(String id){
  Downloader d=downloaders.remove(id);
  if (id == null) {
    Logger.log(""Download failed, id null"");
    return;
  }
  DownloadWindow wnd=downloadWindows.get(id);
  if (wnd != null) {
    wnd.close(XDMConstants.FAILED,d.getErrorCode());
    downloadWindows.remove(id);
  }
 else {
    Logger.log(""Wnd is null!!!"");
  }
  DownloadEntry ent=downloads.get(id);
  ent.setState(XDMConstants.PAUSED);
  notifyListeners(id);
  saveDownloadList();
  Logger.log(""removed"");
  processNextItem(id);
}
"
3090,downloadStopped(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,12,47,28,4,0.2083,0.1315,1,3,2,"public void downloadStopped(String id){
  downloaders.remove(id);
  DownloadWindow wnd=downloadWindows.get(id);
  if (wnd != null) {
    wnd.close(XDMConstants.PAUSED,0);
    downloadWindows.remove(id);
  }
  DownloadEntry ent=downloads.get(id);
  ent.setState(XDMConstants.PAUSED);
  notifyListeners(id);
  saveDownloadList();
  processNextItem(id);
}
"
3091,downloadConfirmed(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,15,68,31,4,0.1852,0.1342,0.5,4,3,"public void downloadConfirmed(String id){
  Logger.log(""confirmed "" + id);
  Downloader d=downloaders.get(id);
  DownloadEntry ent=downloads.get(id);
  ent.setSize(d.getSize());
  if (d.isFileNameChanged()) {
    ent.setFile(d.getNewFile());
    ent.setCategory(XDMUtils.findCategory(d.getNewFile()));
    updateFileName(ent);
  }
  DownloadWindow wnd=downloadWindows.get(id);
  if (wnd != null) {
    wnd.update(d,ent.getFile());
  }
  notifyListeners(id);
  saveDownloadList();
}
"
3092,downloadUpdated(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,18,115,77,6,0.1611,0.1213,0.363636364,5,5,"public void downloadUpdated(String id){
  DownloadEntry ent=downloads.get(id);
  Downloader d=downloaders.get(id);
  if (d == null) {
    Logger.log(""################# sync error ##############"");
  }
  ent.setSize(d.getSize());
  ent.setDownloaded(d.getDownloaded());
  ent.setProgress(d.getProgress());
  ent.setState(d.isAssembling() ? XDMConstants.ASSEMBLING : XDMConstants.DOWNLOADING);
  DownloadWindow wnd=downloadWindows.get(id);
  if (wnd != null) {
    wnd.update(d,ent.getFile());
  }
  notifyListeners(id);
  long now=System.currentTimeMillis();
  if (now - lastSaved > 5000) {
    saveDownloadList();
    lastSaved=now;
  }
}
"
3094,"addDownload(HttpMetadata,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,22,230,229,21,0.0682,0.0122,1,2,3,"public void addDownload(final HttpMetadata metadata,final String file){
  if (refreshCallback != null) {
    if (refreshCallback.isValidLink(metadata)) {
      return;
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      new NewDownloadWindow(metadata,file).setVisible(true);
    }
  }
);
}
"
3098,"addMedia(HttpMetadata,String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,8,28,28,8,0.125,0,0.5,3,2,"public void addMedia(final HttpMetadata metadata,final String file,final String info){
  if (Config.getInstance().isShowVideoNotification()) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        VideoPopup.getInstance().addVideo(metadata,file,info);
      }
    }
);
  }
}
"
3100,"createDownload(String,String,HttpMetadata,boolean,String,int,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,23,172,91,5,0.1204,0.1323,0.375,9,5,"public void createDownload(String file,String folder,HttpMetadata metadata,boolean now,String queueId,int formatIndex,int streamIndex){
  metadata.save();
  DownloadEntry ent=new DownloadEntry();
  ent.setId(metadata.getId());
  ent.setOutputFormatIndex(formatIndex);
  ent.setState(XDMConstants.PAUSED);
  ent.setFile(file);
  ent.setFolder(folder);
  ent.setCategory(XDMUtils.findCategory(file));
  ent.setDate(System.currentTimeMillis());
  putInQueue(queueId,ent);
  ent.setStartedByUser(now);
  downloads.put(metadata.getId(),ent);
  saveDownloadList();
  if (!now) {
    DownloadQueue q=qMgr.getQueueById(queueId);
    if (q != null && q.isRunning()) {
      Logger.log(""Queue is running, if no pending download pickup next available download"");
      q.next();
    }
  }
  if (now) {
    startDownload(metadata.getId(),metadata,ent,streamIndex);
  }
  notifyListeners(null);
}
"
3101,"startDownload(String,HttpMetadata,DownloadEntry,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,34,404,247,3,0.1046,0.0969,0.647058824,9,9,"private void startDownload(String id,HttpMetadata metadata,DownloadEntry ent,int streams){
  if (!checkAndBufferRequests(id)) {
    Logger.log(""starting "" + id + "" with: ""+ metadata+ "" is dash: ""+ (metadata instanceof DashMetadata));
    Downloader d=null;
    if (metadata instanceof DashMetadata) {
      Logger.log(""Dash download with stream: "" + streams);
      if (streams == 1) {
        DashMetadata dm=(DashMetadata)metadata;
        dm.setUrl(dm.getUrl2());
        dm.setUrl2(null);
      }
 else       if (streams == 2) {
        DashMetadata dm=(DashMetadata)metadata;
        dm.setUrl2(null);
      }
 else {
        Logger.log(""Dash download created"");
        DashMetadata dm=(DashMetadata)metadata;
        d=new DashDownloader(id,Config.getInstance().getTemporaryFolder(),dm);
      }
    }
    if (metadata instanceof HlsMetadata) {
      Logger.log(""Hls download created"");
      d=new HlsDownloader(id,Config.getInstance().getTemporaryFolder(),(HlsMetadata)metadata);
    }
    if (metadata instanceof HdsMetadata) {
      Logger.log(""Hls download created"");
      d=new HdsDownloader(id,Config.getInstance().getTemporaryFolder(),(HdsMetadata)metadata);
    }
    if (d == null) {
      d=new HttpDownloader(id,Config.getInstance().getTemporaryFolder(),metadata);
    }
    d.setOuputMediaFormat(ent.getOutputFormatIndex());
    downloaders.put(id,d);
    d.registerListener(this);
    ent.setState(XDMConstants.DOWNLOADING);
    d.start();
    if (Config.getInstance().showDownloadWindow()) {
      DownloadWindow wnd=new DownloadWindow(id,this);
      downloadWindows.put(id,wnd);
      wnd.setVisible(true);
    }
  }
 else {
    Logger.log(id + "": Maximum download limit reached, queueing request"");
  }
}
"
3102,pauseDownload(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,6,9,3,3,0.3333,0.2857,0.5,2,2,"public void pauseDownload(String id){
  Downloader d=downloaders.get(id);
  if (d != null) {
    d.stop();
    d.unregisterListener();
  }
}
"
3103,"resumeDownload(String,boolean)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,34,368,175,4,0.1074,0.1083,0.55,9,10,"public void resumeDownload(String id,boolean startedByUser){
  DownloadEntry ent=downloads.get(id);
  ent.setStartedByUser(startedByUser);
  if (ent.getState() == XDMConstants.PAUSED || ent.getState() == XDMConstants.FAILED) {
    if (!checkAndBufferRequests(id)) {
      ent.setState(XDMConstants.DOWNLOADING);
      HttpMetadata metadata=HttpMetadata.load(id);
      if (Config.getInstance().showDownloadWindow() && ent.isStartedByUser()) {
        DownloadWindow wnd=new DownloadWindow(id,this);
        downloadWindows.put(id,wnd);
        wnd.setVisible(true);
      }
      Downloader d=null;
      if (metadata instanceof DashMetadata) {
        DashMetadata dm=(DashMetadata)metadata;
        Logger.log(""Dash download- url1: "" + dm.getUrl() + "" url2: ""+ dm.getUrl2());
        d=new DashDownloader(id,Config.getInstance().getTemporaryFolder(),dm);
      }
      if (metadata instanceof HlsMetadata) {
        HlsMetadata hm=(HlsMetadata)metadata;
        Logger.log(""HLS download- url1: "" + hm.getUrl());
        d=new HlsDownloader(id,Config.getInstance().getTemporaryFolder(),hm);
      }
      if (metadata instanceof HdsMetadata) {
        HdsMetadata hm=(HdsMetadata)metadata;
        Logger.log(""HLS download- url1: "" + hm.getUrl());
        d=new HdsDownloader(id,Config.getInstance().getTemporaryFolder(),hm);
      }
      if (d == null) {
        Logger.log(""normal download"");
        d=new HttpDownloader(id,Config.getInstance().getTemporaryFolder(),metadata);
      }
      downloaders.put(id,d);
      d.setOuputMediaFormat(ent.getOutputFormatIndex());
      d.registerListener(this);
      d.resume();
    }
 else {
      Logger.log(id + "": Maximum download limit reached, queueing request"");
    }
    notifyListeners(null);
  }
}
"
3104,restartDownload(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,7,15,9,3,0.3333,0.1667,0.5,2,4,"public void restartDownload(String id){
  DownloadEntry ent=downloads.get(id);
  if (ent.getState() == XDMConstants.PAUSED || ent.getState() == XDMConstants.FAILED || ent.getState() == XDMConstants.FINISHED) {
    ent.setState(XDMConstants.PAUSED);
    clearData(id);
    resumeDownload(id,true);
  }
 else {
    return;
  }
}
"
3110,clearData(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,8,25,22,3,0.2083,0.0909,0.5,4,3,"private void clearData(String id){
  File folder=new File(Config.getInstance().getTemporaryFolder(),id);
  File[] files=folder.listFiles();
  if (files != null) {
    for (int i=0; i < files.length; i++) {
      files[i].delete();
    }
  }
  folder.delete();
}
"
3114,loadDownloadList(File),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,45,748,506,5,0.088,0.1349,0.142857143,15,19,"public void loadDownloadList(File file){
  if (!file.exists()) {
    return;
  }
  SimpleDateFormat dateFormat=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),Charset.forName(""UTF-8"")));
    int count=Integer.parseInt(reader.readLine().trim());
    for (int i=0; i < count; i++) {
      int fieldCount=Integer.parseInt(reader.readLine().trim());
      DownloadEntry ent=new DownloadEntry();
      for (int j=0; j < fieldCount; j++) {
        String ln=reader.readLine();
        int index=ln.indexOf("":"");
        if (index > 0) {
          String key=ln.substring(0,index).trim();
          String val=ln.substring(index + 1).trim();
          if (key.equals(""id"")) {
            ent.setId(val);
          }
          if (key.equals(""file"")) {
            ent.setFile(val);
          }
          if (key.equals(""category"")) {
            ent.setCategory(Integer.parseInt(val));
          }
          if (key.equals(""state"")) {
            int state=Integer.parseInt(val);
            ent.setState(state == XDMConstants.FINISHED ? state : XDMConstants.PAUSED);
          }
          if (key.equals(""folder"")) {
            ent.setFolder(val);
          }
          if (key.equals(""date"")) {
            ent.setDate(dateFormat.parse(val).getTime());
          }
          if (key.equals(""downloaded"")) {
            ent.setDownloaded(Long.parseLong(val));
          }
          if (key.equals(""size"")) {
            ent.setSize(Long.parseLong(val));
          }
          if (key.equals(""progress"")) {
            ent.setProgress(Integer.parseInt(val));
          }
          if (key.equals(""queueid"")) {
            ent.setQueueId(val);
          }
          if (key.equals(""formatIndex"")) {
            ent.setOutputFormatIndex(Integer.parseInt(val));
          }
        }
      }
      downloads.put(ent.getId(),ent);
    }
    reader.close();
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  try {
    reader.close();
  }
 catch (  Exception e1) {
  }
}
"
3116,saveDownloadList(File),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,45,748,506,5,0.0944,0.1557,0.166666667,12,5,"public void saveDownloadList(File file){
  int count=downloads.size();
  BufferedWriter writer=null;
  SimpleDateFormat dateFormat=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
  String newLine=System.getProperty(""line.separator"");
  try {
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),Charset.forName(""UTF-8"")));
    writer.write(count + """");
    writer.newLine();
    Iterator<String> keyIterator=downloads.keySet().iterator();
    while (keyIterator.hasNext()) {
      String key=keyIterator.next();
      DownloadEntry ent=downloads.get(key);
      int c=0;
      StringBuffer sb=new StringBuffer();
      sb.append(""id: "" + ent.getId() + newLine);
      c++;
      sb.append(""file: "" + ent.getFile() + newLine);
      c++;
      sb.append(""category: "" + ent.getCategory() + newLine);
      c++;
      sb.append(""state: "" + ent.getState() + newLine);
      c++;
      sb.append(""folder: "" + ent.getFolder() + newLine);
      c++;
      sb.append(""date: "" + dateFormat.format(new Date(ent.getDate())) + newLine);
      c++;
      sb.append(""downloaded: "" + ent.getDownloaded() + newLine);
      c++;
      sb.append(""size: "" + ent.getSize() + newLine);
      c++;
      sb.append(""progress: "" + ent.getProgress() + newLine);
      c++;
      if (ent.getQueueId() != null) {
        sb.append(""queueid: "" + ent.getQueueId() + newLine);
        c++;
      }
      sb.append(""formatIndex: "" + ent.getOutputFormatIndex() + newLine);
      c++;
      writer.write(c + newLine);
      writer.write(sb.toString());
    }
    writer.close();
  }
 catch (  Exception e) {
    Logger.log(e);
    try {
      writer.close();
    }
 catch (    Exception e1) {
    }
  }
}
"
3117,hidePrgWnd(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,6,11,7,3,0.3889,0.1667,1,2,2,"public void hidePrgWnd(String id){
  DownloadWindow wnd=downloadWindows.get(id);
  if (wnd != null) {
    downloadWindows.remove(id);
    wnd.close(XDMConstants.PAUSED,0);
  }
}
"
3119,checkAndBufferRequests(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,7,14,7,3,0.3429,0.1575,0.666666667,2,4,"private synchronized boolean checkAndBufferRequests(String id){
  int actCount=getActiveDownloadCount();
  if (Config.getInstance().getMaxDownloads() > 0 && actCount >= Config.getInstance().getMaxDownloads()) {
    Logger.log(""active: "" + actCount + "" max: ""+ Config.getInstance().getMaxDownloads());
    if (!pendingDownloads.contains(id)) {
      pendingDownloads.add(id);
    }
    return true;
  }
  return false;
}
"
3120,processNextItem(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,12,49,32,4,0.2708,0.1521,0.6,3,6,"private synchronized void processNextItem(String lastId){
  processPendingRequests();
  if (lastId == null)   return;
  DownloadEntry ent=getEntry(lastId);
  if (ent == null) {
    return;
  }
  DownloadQueue queue=null;
  if ("""".equals(ent.getQueueId())) {
    queue=qMgr.getDefaultQueue();
  }
 else {
    queue=qMgr.getQueueById(ent.getQueueId());
  }
  if (queue != null && queue.isRunning()) {
    queue.next();
  }
}
"
3121,processPendingRequests(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,16,87,54,3,0.1667,0.0932,0.666666667,8,6,"private void processPendingRequests(){
  int activeCount=getActiveDownloadCount();
  int maxDownloadCount=Config.getInstance().getMaxDownloads();
  List<String> tobeStartedIds=new ArrayList<String>();
  if (maxDownloadCount - activeCount > 0) {
    for (int i=0; i < Math.min(maxDownloadCount,pendingDownloads.size()); i++) {
      String ent=pendingDownloads.get(i);
      tobeStartedIds.add(ent);
    }
  }
  if (tobeStartedIds.size() > 0) {
    for (int i=0; i < tobeStartedIds.size(); i++) {
      String id=tobeStartedIds.get(i);
      pendingDownloads.remove(id);
      DownloadEntry ent=getEntry(id);
      if (ent != null) {
        resumeDownload(id,ent.isStartedByUser());
      }
    }
  }
}
"
3122,queueItemPending(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,7,15,9,2,0.2857,0.1206,1,4,6,"public boolean queueItemPending(String queueId){
  if (queueId == null)   return false;
  for (int i=0; i < pendingDownloads.size(); i++) {
    String id=pendingDownloads.get(i);
    DownloadEntry ent=getEntry(id);
    if (ent == null || ent.getQueueId() == null)     continue;
    if (ent.getQueueId().equals(queueId)) {
      return true;
    }
  }
  return false;
}
"
3125,"putInQueue(String,DownloadEntry)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,14,63,35,3,0.2232,0.1148,0.428571429,6,4,"private void putInQueue(String queueId,DownloadEntry ent){
  DownloadQueue q=getQueueById(queueId);
  String id=ent.getId();
  if (q == null) {
    Logger.log(""No queue found for: '"" + queueId + ""'"");
    return;
  }
  String qid=ent.getQueueId();
  DownloadQueue oldQ=getQueueById(qid);
  Logger.log(""Adding to: '"" + queueId + ""'"");
  if (!q.getQueueId().equals(qid)) {
    if (oldQ != null) {
      oldQ.removeFromQueue(id);
    }
    ent.setQueueId(queueId);
    q.addToQueue(id);
  }
}
"
3126,"compare(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,7,15,9,3,0.2857,0.1333,1,4,5,"@Override public int compare(String key1,String key2){
  DownloadEntry ent1=getEntry(key1);
  DownloadEntry ent2=getEntry(key2);
  if (ent1 == null)   return -1;
  if (ent2 == null)   return 1;
  if (ent1.getDate() > ent2.getDate()) {
    return 1;
  }
 else   if (ent1.getDate() < ent2.getDate()) {
    return -1;
  }
 else {
    return 0;
  }
}
"
3128,isAllFinished(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,7,19,17,5,0.25,0.0556,0.666666667,2,5,"public boolean isAllFinished(){
  if (getActiveDownloadCount() != 0) {
    return false;
  }
  if (pendingDownloads.size() != 0) {
    return false;
  }
  for (int i=0; i < QueueManager.getInstance().getQueueList().size(); i++) {
    DownloadQueue q=QueueManager.getInstance().getQueueList().get(i);
    if (q.hasPendingItems()) {
      return false;
    }
  }
  return true;
}
"
3130,deleteDownloads(ArrayList<String>),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,22,169,107,5,0.157,0.1086,0.5,8,10,"public int deleteDownloads(ArrayList<String> ids){
  int c=0;
  for (int i=0; i < ids.size(); i++) {
    String id=ids.get(i);
    DownloadEntry ent=getEntry(id);
    if (ent != null) {
      if (ent.getState() == XDMConstants.FINISHED || ent.getState() == XDMConstants.PAUSED || ent.getState() == XDMConstants.FAILED) {
        this.downloads.remove(id);
        if (pendingDownloads.contains(id)) {
          pendingDownloads.remove(id);
        }
        String qId=ent.getQueueId();
        if (qId != null) {
          DownloadQueue q=getQueueById(qId);
          if (q != null) {
            if (q.getQueueId().length() > 0) {
              q.removeFromQueue(id);
            }
          }
        }
        deleteFiles(id);
        c++;
      }
    }
  }
  saveDownloadList();
  notifyListeners(null);
  return ids.size() - c;
}
"
3131,deleteFiles(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,14,56,21,3,0.2653,0.1528,0.5,6,4,"private void deleteFiles(String id){
  Logger.log(""Deleting metadata for "" + id);
  File mf=new File(Config.getInstance().getMetadataFolder(),id);
  boolean deleted=mf.delete();
  Logger.log(""Deleted manifest "" + id + "" ""+ deleted);
  File df=new File(Config.getInstance().getTemporaryFolder(),id);
  File[] files=df.listFiles();
  if (files != null && files.length > 0) {
    for (    File f : files) {
      deleted=f.delete();
      Logger.log(""Deleted tmp file "" + id + "" ""+ deleted);
    }
  }
  deleted=df.delete();
  Logger.log(""Deleted tmp folder "" + id + "" ""+ deleted);
}
"
3136,deleteCompleted(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,10,32,19,3,0.2667,0.0962,1,4,3,"public void deleteCompleted(){
  Iterator<String> allIds=downloads.keySet().iterator();
  ArrayList<String> idList=new ArrayList<String>();
  while (allIds.hasNext()) {
    String id=allIds.next();
    DownloadEntry ent=downloads.get(id);
    if (ent.getState() == XDMConstants.FINISHED) {
      idList.add(id);
    }
  }
  deleteDownloads(idList);
}
"
3137,"promptCredential(String,String,boolean)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,13,56,34,4,0.1692,0.1108,0.571428571,5,6,"public boolean promptCredential(String id,String msg,boolean proxy){
  DownloadEntry ent=getEntry(id);
  if (ent == null)   return false;
  if (!ent.isStartedByUser())   return false;
  PasswordAuthentication pauth=getCredential(msg,proxy);
  if (pauth == null) {
    return false;
  }
  if (proxy) {
    Config.getInstance().setProxyUser(pauth.getUserName());
    if (pauth.getPassword() != null) {
      Config.getInstance().setProxyPass(new String(pauth.getPassword()));
    }
  }
 else {
    Logger.log(""saving password for: "" + msg);
    CredentialManager.getInstance().addCredentialForHost(msg,pauth);
  }
  return true;
}
"
3141,updateFileName(DownloadEntry),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\XDMApp.java,xdm,15,72,39,3,0.2074,0.104,0.5,6,3,"private void updateFileName(DownloadEntry ent){
  Logger.log(""checking for same named file on disk..."");
  String id=ent.getId();
  File f=new File(getOutputFolder(id),ent.getFile());
  int c=1;
  while (f.exists()) {
    String ext=XDMUtils.getExtension(f.getAbsolutePath());
    if (ext == null) {
      ext="""";
    }
    String f2=XDMUtils.getFileNameWithoutExtension(ent.getFile());
    f=new File(getOutputFolder(id),f2 + ""_"" + c+ ext);
    c++;
  }
  Logger.log(""Updating file name- old: "" + ent.getFile() + "" new: ""+ f.getName());
  ent.setFile(f.getName());
}
"
3155,connect(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\AbstractChannel.java,xdm,11,43,31,5,0.2182,0.1186,0.5,2,4,"private boolean connect(){
  try {
    chunk.getChunkListener().synchronize();
  }
 catch (  NullPointerException e) {
    Logger.log(""stopped chunk "" + chunk);
    return false;
  }
  if (connectImpl()) {
    in=getInputStreamImpl();
    long length=getLengthImpl();
    if (chunk.getLength() < 0) {
      Logger.log(""Setting length of "" + chunk.getId() + "" to: ""+ length);
      chunk.setLength(length);
    }
    return true;
  }
 else {
    return false;
  }
}
"
3156,run(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\AbstractChannel.java,xdm,16,104,88,6,0.1875,0.1091,0.5,1,9,"@Override public void run(){
  try {
    while (!stop) {
      if (!connect()) {
        if (!stop) {
          chunk.transferFailed(errorMessage);
        }
        close();
        break;
      }
      chunk.transferInitiated();
      if (chunk == null) {
        continue;
      }
      if (((chunk.getLength() > 0) ? copyStream1() : copyStream2())) {
        break;
      }
    }
  }
 catch (  Exception e) {
    Logger.log(""Internal problem: "" + e);
    Logger.log(e);
    if (!stop) {
      chunk.transferFailed(errorMessage);
    }
  }
 finally {
    close();
  }
}
"
3158,stop(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\AbstractChannel.java,xdm,6,13,11,4,0.2778,0.1333,0,2,2,"public void stop(){
  stop=true;
  this.chunk=null;
  if (this.t != null) {
    t.interrupt();
  }
}
"
3159,copyStream1(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\AbstractChannel.java,xdm,33,484,440,14,0.0854,0.0529,0.4,4,12,"private boolean copyStream1(){
  try {
    while (!stop) {
      chunk.getChunkListener().synchronize();
      long rem=chunk.getLength() - chunk.getDownloaded();
      if (rem == 0) {
        if (this instanceof HttpChannel) {
          if (((HttpChannel)this).isFinished()) {
            close();
          }
        }
 else {
          close();
        }
        if (chunk.transferComplete()) {
          Logger.log(chunk + "" complete and closing "" + chunk.getDownloaded()+ "" ""+ chunk.getLength());
          return true;
        }
      }
      if (stop) {
        return false;
      }
      int diff=(int)(rem > buf.length ? buf.length : rem);
      int x=in.read(buf,0,diff);
      if (stop)       return false;
      if (x == -1) {
        throw new Exception(""Unexpected eof"");
      }
      chunk.getOutStream().write(buf,0,x);
      if (stop)       return false;
      chunk.setDownloaded(chunk.getDownloaded() + x);
      chunk.transferring();
    }
    return false;
  }
 catch (  Exception e) {
    Logger.log(e);
    return false;
  }
 finally {
    close();
  }
}
"
3160,copyStream2(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\AbstractChannel.java,xdm,14,73,55,6,0.1905,0.1259,0.285714286,2,6,"private boolean copyStream2(){
  try {
    while (!stop) {
      chunk.getChunkListener().synchronize();
      int x=in.read(buf,0,buf.length);
      if (stop)       return false;
      if (x == -1) {
        chunk.transferComplete();
        return true;
      }
      chunk.getOutStream().write(buf,0,x);
      if (stop)       return false;
      chunk.setDownloaded(chunk.getDownloaded() + x);
      chunk.transferring();
    }
    return false;
  }
 catch (  Exception e) {
    return false;
  }
 finally {
    close();
  }
}
"
3179,retryFailedChunks(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\Downloader.java,xdm,15,75,45,4,0.1905,0.1619,1,4,6,"protected synchronized int retryFailedChunks(int rem) throws IOException {
  if (stopFlag)   return 0;
  int count=0;
  int totalInactive=findTotalInactiveChunk();
  Logger.log(""Total inactive chunks: "" + totalInactive);
  if (totalInactive > rem) {
    totalInactive=rem;
  }
  if (totalInactive > 0) {
    for (; totalInactive > 0; totalInactive--) {
      Segment c=findInactiveChunk();
      if (c != null) {
        c.download(this);
        count++;
      }
 else {
        Logger.log(""$$$ debug rem:"" + rem);
      }
    }
  }
  return count;
}
"
3180,findInactiveChunk(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\Downloader.java,xdm,6,11,7,3,0.3333,0.1556,0.5,2,5,"protected Segment findInactiveChunk(){
  if (stopFlag)   return null;
  for (int i=0; i < chunks.size(); i++) {
    Segment c=chunks.get(i);
    if (c.isFinished() || c.isActive())     continue;
    return c;
  }
  return null;
}
"
3181,findTotalInactiveChunk(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\Downloader.java,xdm,8,23,18,4,0.2813,0.1481,0.5,3,4,"protected int findTotalInactiveChunk(){
  int count=0;
  for (int i=0; i < chunks.size(); i++) {
    Segment c=chunks.get(i);
    if (c.isFinished() || c.isActive())     continue;
    count++;
  }
  return count;
}
"
3185,allFinished(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\Downloader.java,xdm,6,9,3,3,0.4444,0.2143,1,2,4,"protected boolean allFinished(){
  if (chunks.size() > 0) {
    for (int i=0; i < chunks.size(); i++) {
      Segment chunk=chunks.get(i);
      if (!chunk.isFinished()) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}
"
3187,cleanup(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\Downloader.java,xdm,7,18,15,3,0.2286,0.0667,1,3,2,"public void cleanup(){
  File dir=new File(folder);
  File[] files=dir.listFiles();
  for (int i=0; i < files.length; i++) {
    Logger.log(""Delete: "" + files[i] + "" [""+ files[i].length()+ ""] ""+ files[i].delete());
  }
  new File(folder).delete();
}
"
3189,"chunkFailed(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\Downloader.java,xdm,20,142,94,4,0.1308,0.1257,0.75,12,9,"@Override public synchronized void chunkFailed(String id,String reason){
  if (stopFlag)   return;
  int err=0;
  for (int i=0; i < chunks.size(); i++) {
    Segment chunk=chunks.get(i);
    if (chunk.isActive()) {
      return;
    }
    if (chunk.getErrorCode() != 0) {
      err=chunk.getErrorCode();
    }
  }
  if (err == XDMConstants.ERR_INVALID_RESP) {
    if (downloaded > 0) {
      if (length > 0) {
        if (chunks.size() > 1) {
          this.errorCode=XDMConstants.ERR_SESSION_FAILED;
        }
 else {
          this.errorCode=XDMConstants.ERR_NO_RESUME;
        }
      }
 else {
        this.errorCode=XDMConstants.ERR_NO_RESUME;
      }
    }
 else {
      this.errorCode=XDMConstants.ERR_INVALID_RESP;
    }
  }
 else {
    Logger.log(""Setting final error code: "" + err);
    this.errorCode=err;
  }
  this.listener.downloadFailed(this.id);
  Logger.log(""failed"");
}
"
3230,"SegmentDownloader(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,10,43,41,8,0.1167,0.0133,0.333333333,10,1,"protected SegmentDownloader(String id,String folder){
  this.id=id;
  this.folder=new File(folder,id).getAbsolutePath();
  this.length=-1;
  this.MAX_COUNT=Config.getInstance().getMaxSegments();
  this.MIN_CHUNK_SIZE=Config.getInstance().getMinSegmentSize();
  this.lastDownloaded=downloaded;
  this.prevTime=System.currentTimeMillis();
  this.eta=""---"";
}
"
3231,start(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,15,78,51,5,0.1481,0.1405,0.555555556,4,3,"public void start(){
  Logger.log(""creating folder "" + folder);
  new File(folder).mkdirs();
  chunks=new ArrayList<Segment>();
  try {
    Segment c1=new SegmentImpl(this,folder);
    if (getMetadata() instanceof DashMetadata) {
      c1.setTag(""T1"");
    }
    c1.setLength(-1);
    c1.setStartOffset(0);
    c1.setDownloaded(0);
    chunks.add(c1);
    c1.download(this);
  }
 catch (  IOException e) {
    this.errorCode=XDMConstants.RESUME_FAILED;
    this.listener.downloadFailed(id);
  }
}
"
3232,resume(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,27,311,271,13,0.0895,0.085,0.8,9,7,"@Override public void resume(){
  try {
    stopFlag=false;
    Logger.log(""Resuming"");
    if (!restoreState()) {
      Logger.log(""Starting from beginning"");
      start();
      return;
    }
    this.lastDownloaded=downloaded;
    this.prevTime=System.currentTimeMillis();
    Logger.log(""Restore success"");
    init=true;
    Segment c1=findInactiveChunk();
    if (c1 != null) {
      try {
        c1.download(this);
      }
 catch (      Exception e) {
        Logger.log(e);
        if (!stopFlag) {
          Logger.log(e);
          this.errorCode=XDMConstants.RESUME_FAILED;
          listener.downloadFailed(this.id);
          return;
        }
      }
    }
 else     if (allFinished()) {
      assembleAsync();
    }
 else {
      Logger.log(""Internal error: no inactive/incomplete chunk found while resuming!"");
    }
  }
 catch (  Exception e) {
    Logger.log(e);
    this.errorCode=XDMConstants.RESUME_FAILED;
    listener.downloadFailed(this.id);
    return;
  }
}
"
3233,createChunk(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,14,67,43,3,0.1786,0.1111,0.75,4,5,"private synchronized void createChunk() throws IOException {
  if (stopFlag)   return;
  int activeCount=getActiveChunkCount();
  Logger.log(""active count:"" + activeCount);
  if (activeCount == MAX_COUNT) {
    return;
  }
  int rem=MAX_COUNT - activeCount;
  rem-=retryFailedChunks(rem);
  if (rem > 0) {
    Segment c1=findMaxChunk();
    Segment c=splitChunk(c1);
    if (c != null) {
      Logger.log(""creating chunk "" + c);
      chunks.add(c);
      c.download(this);
    }
  }
}
"
3234,findMaxChunk(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,12,45,24,2,0.2381,0.1394,0.4,5,6,"private Segment findMaxChunk(){
  if (stopFlag)   return null;
  long size=-1;
  String id=null;
  for (int i=0; i < chunks.size(); i++) {
    Segment c=chunks.get(i);
    if (c.isActive()) {
      long rem=c.getLength() - c.getDownloaded();
      if (rem > size) {
        id=c.getId();
        size=rem;
      }
    }
  }
  if (size < MIN_CHUNK_SIZE)   return null;
  return getById(id);
}
"
3236,splitChunk(Segment),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,13,52,26,3,0.2115,0.1569,0.444444444,5,4,"private Segment splitChunk(Segment c) throws IOException {
  if (c == null || stopFlag)   return null;
  long rem=c.getLength() - c.getDownloaded();
  long offset=c.getStartOffset() + c.getLength() - rem / 2;
  long len=rem / 2;
  Logger.log(""Changing length from: "" + c.getLength() + "" to ""+ (c.getLength() - rem / 2));
  c.setLength(c.getLength() - rem / 2);
  Segment c2=new SegmentImpl(this,folder);
  if (getMetadata() instanceof DashMetadata) {
    c2.setTag(""T1"");
  }
  c2.setLength(len);
  c2.setStartOffset(offset);
  return c2;
}
"
3237,findNextNeedyChunk(Segment),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,8,16,4,2,0.3,0.2411,0.25,4,6,"private Segment findNextNeedyChunk(Segment chunk){
  if (stopFlag)   return null;
  long offset=chunk.getStartOffset() + chunk.getLength();
  for (int i=0; i < chunks.size(); i++) {
    Segment c=chunks.get(i);
    if (c.getDownloaded() == 0) {
      if (!c.isFinished()) {
        if (c.getStartOffset() == offset) {
          return c;
        }
      }
    }
  }
  return null;
}
"
3238,onComplete(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,27,309,267,9,0.101,0.065,0.444444444,7,6,"private synchronized boolean onComplete(String id) throws IOException {
  if (allFinished() || length < 0) {
    finished=true;
    updateStatus();
    try {
      assemble();
      Logger.log(""********Download finished*********"");
      updateStatus();
      listener.downloadFinished(this.id);
    }
 catch (    Exception e) {
      if (!stopFlag) {
        Logger.log(e);
        this.errorCode=XDMConstants.ERR_ASM_FAILED;
        listener.downloadFailed(this.id);
      }
    }
    listener=null;
    return true;
  }
  Segment chunk=getById(id);
  Logger.log(""Complete: "" + chunk + "" ""+ chunk.getDownloaded()+ "" ""+ chunk.getLength());
  Segment nextNeedyChunk=findNextNeedyChunk(chunk);
  if (nextNeedyChunk != null) {
    Logger.log(""****************Needy chunk found!!!"");
    Logger.log(""Stopping: "" + nextNeedyChunk);
    nextNeedyChunk.stop();
    chunks.remove(nextNeedyChunk);
    nextNeedyChunk.dispose();
    mergeChunk(chunk,nextNeedyChunk);
    createChunk();
    return false;
  }
  createChunk();
  return true;
}
"
3239,chunkInitiated(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,11,46,37,5,0.1688,0.0946,1,5,4,"@Override public synchronized void chunkInitiated(String id) throws IOException {
  if (stopFlag)   return;
  if (!init) {
    Segment c=getById(id);
    this.length=c.getLength();
    init=true;
    Logger.log(""size: "" + this.length);
    super.getLastModifiedDate(c);
    saveState();
    chunkConfirmed(c);
    listener.downloadConfirmed(this.id);
  }
  if (length > 0) {
    createChunk();
  }
}
"
3241,chunkUpdated(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,18,133,113,9,0.125,0.0754,0.666666667,5,6,"@Override public void chunkUpdated(String id){
  if (stopFlag)   return;
  long now=System.currentTimeMillis();
  if (now - lastSaved > 5000) {
synchronized (this) {
      saveState();
    }
    lastSaved=now;
  }
  if (now - lastUpdated > 1000) {
    updateStatus();
    lastUpdated=now;
synchronized (this) {
      int activeCount=getActiveChunkCount();
      if (activeCount < MAX_COUNT) {
        int rem=MAX_COUNT - activeCount;
        try {
          retryFailedChunks(rem);
        }
 catch (        Exception e) {
          Logger.log(e);
        }
      }
    }
  }
}
"
3242,assemble(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,44,872,798,10,0.0528,0.0377,0.571428571,13,18,"private void assemble() throws IOException {
  InputStream in=null;
  OutputStream out=null;
  totalAssembled=0L;
  assembling=true;
  assembleFinished=false;
  File outFile=new File(getOutputFolder(),getOutputFileName(true));
  try {
    if (stopFlag)     return;
    byte buf[]=new byte[8192 * 8];
    Logger.log(""assembling... "");
    Collections.sort(chunks,new SegmentComparator());
    out=new FileOutputStream(outFile);
    for (int i=0; i < chunks.size(); i++) {
      Logger.log(""chunk "" + i + "" ""+ stopFlag);
      Segment c=chunks.get(i);
      in=new FileInputStream(new File(folder,c.getId()));
      long rem=c.getLength();
      while (true) {
        int x=(int)(rem > 0 ? (rem > buf.length ? buf.length : rem) : buf.length);
        int r=in.read(buf,0,x);
        if (stopFlag) {
          return;
        }
        if (r == -1) {
          if (length > 0) {
            throw new IllegalArgumentException(""Assemble EOF"");
          }
 else {
            break;
          }
        }
        out.write(buf,0,r);
        if (stopFlag) {
          return;
        }
        if (length > 0) {
          rem-=r;
          if (rem == 0)           break;
        }
        totalAssembled+=r;
        long now=System.currentTimeMillis();
        if (now - lastUpdated > 1000) {
          updateStatus();
          lastUpdated=now;
        }
      }
      in.close();
    }
    out.close();
    setLastModifiedDate(outFile);
    assembleFinished=true;
  }
 catch (  Exception e) {
    Logger.log(e);
    throw new IOException(e);
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e2) {
      }
    }
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception e2) {
      }
    }
  }
}
"
3244,stop(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,8,26,24,6,0.2,0.06,1,1,2,"public void stop(){
  stopFlag=true;
  saveState();
  for (int i=0; i < chunks.size(); i++) {
    chunks.get(i).stop();
  }
  listener.downloadStopped(id);
  listener=null;
}
"
3245,saveState(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,22,167,103,3,0.1266,0.1194,0.5,9,5,"private void saveState(){
  if (length < 0)   return;
  StringBuffer sb=new StringBuffer();
  sb.append(this.length + ""\n"");
  sb.append(downloaded + ""\n"");
  sb.append(chunks.size() + ""\n"");
  for (int i=0; i < chunks.size(); i++) {
    Segment seg=chunks.get(i);
    sb.append(seg.getId() + ""\n"");
    sb.append(seg.getLength() + ""\n"");
    sb.append(seg.getStartOffset() + ""\n"");
    sb.append(seg.getDownloaded() + ""\n"");
  }
  if (!StringUtils.isNullOrEmptyOrBlank(lastModified)) {
    sb.append(this.lastModified + ""\n"");
  }
  try {
    File tmp=new File(folder,System.currentTimeMillis() + "".tmp"");
    File out=new File(folder,""state.txt"");
    FileOutputStream fs=new FileOutputStream(tmp);
    fs.write(sb.toString().getBytes());
    fs.close();
    out.delete();
    tmp.renameTo(out);
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3246,restoreState(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,29,310,214,4,0.0931,0.087,0.444444444,14,8,"private boolean restoreState(){
  BufferedReader br=null;
  chunks=new ArrayList<Segment>();
  File file=new File(folder,""state.txt"");
  if (!file.exists()) {
    file=getBackupFile(folder);
    if (file == null) {
      return false;
    }
  }
  try {
    br=new BufferedReader(new FileReader(file));
    this.length=Long.parseLong(br.readLine());
    this.downloaded=Long.parseLong(br.readLine());
    int chunkCount=Integer.parseInt(br.readLine());
    for (int i=0; i < chunkCount; i++) {
      String cid=br.readLine();
      long len=Long.parseLong(br.readLine());
      long off=Long.parseLong(br.readLine());
      long dwn=Long.parseLong(br.readLine());
      Segment seg=new SegmentImpl(folder,cid,off,len,dwn);
      if (getMetadata() instanceof DashMetadata) {
        seg.setTag(""T1"");
      }
      Logger.log(""id: "" + seg.getId() + ""\nlength: ""+ seg.getLength()+ ""\noffset: ""+ seg.getStartOffset()+ ""\ndownload: ""+ seg.getDownloaded());
      chunks.add(seg);
    }
    this.lastModified=br.readLine();
    return true;
  }
 catch (  Exception e) {
    Logger.log(""Failed to load saved state"");
    Logger.log(e);
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return false;
}
"
3249,updateStatus(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentDownloader.java,xdm,38,607,511,5,0.0779,0.0498,0.4,15,11,"private void updateStatus(){
  try {
    long now=System.currentTimeMillis();
    if (this.assembling) {
      long len=length > 0 ? length : downloaded;
      progress=(int)((totalAssembled * 100) / len);
    }
 else {
      long downloaded2=0;
      if (segDet == null) {
        segDet=new SegmentDetails();
      }
      if (segDet.getCapacity() < chunks.size()) {
        segDet.extend(chunks.size() - segDet.getCapacity());
      }
      segDet.setChunkCount(chunks.size());
      downloadSpeed=0;
      for (int i=0; i < chunks.size(); i++) {
        Segment s=chunks.get(i);
        downloaded2+=s.getDownloaded();
        SegmentInfo info=segDet.getChunkUpdates().get(i);
        info.setDownloaded(s.getDownloaded());
        info.setStart(s.getStartOffset());
        info.setLength(s.getLength());
        downloadSpeed+=s.getTransferRate();
      }
      this.downloaded=downloaded2;
      if (length > 0) {
        progress=(int)((downloaded * 100) / length);
        long diff=downloaded - lastDownloaded;
        long timeSpend=now - prevTime;
        if (timeSpend > 0) {
          float rate=((float)diff / timeSpend) * 1000;
          if (rate > downloadSpeed) {
            downloadSpeed=rate;
          }
          this.eta=FormatUtilities.getETA(length - downloaded,rate);
          if (this.eta == null) {
            this.eta=""---"";
          }
          lastDownloaded=downloaded;
          prevTime=now;
        }
      }
    }
    listener.downloadUpdated(id);
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3252,"SegmentImpl(SegmentListener,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentImpl.java,xdm,11,50,45,7,0.1169,0.0256,1,17,3,"public SegmentImpl(String folder,String id,long off,long len,long dwn) throws IOException {
  this.id=id;
  this.id=id;
  this.startOffset=off;
  this.folder=folder;
  this.length=len;
  this.downloaded=dwn;
  this.time1=System.currentTimeMillis();
  this.time2=time1;
  this.bytesRead1=dwn;
  this.bytesRead2=dwn;
  try {
    outStream=new RandomAccessFile(new File(folder,id),""rw"");
    outStream.seek(dwn);
    Logger.log(""File opened "" + id);
  }
 catch (  IOException e) {
    Logger.log(e);
    if (outStream != null) {
      outStream.close();
    }
    throw new IOException(e);
  }
  this.config=Config.getInstance();
}
"
3258,transferComplete(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentImpl.java,xdm,11,50,45,7,0.1313,0.0545,0.5,1,6,"@Override public boolean transferComplete() throws IOException {
  if (stop)   return true;
  if (length < 0) {
    length=downloaded;
  }
  if (cl.chunkComplete(id)) {
    try {
      outStream.close();
    }
 catch (    IOException e) {
      Logger.log(e);
    }
    channel=null;
    if (cl.shouldCleanup()) {
      cl.cleanup();
    }
    return true;
  }
 else {
    return false;
  }
}
"
3260,transferFailed(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentImpl.java,xdm,12,56,46,4,0.1574,0.0813,1,5,4,"@Override public void transferFailed(String reason){
  if (stop)   return;
  if (outStream != null) {
    try {
      outStream.close();
      outStream=null;
    }
 catch (    IOException e) {
      Logger.log(e);
    }
  }
  this.errorCode=channel.getErrorCode();
  Logger.log(id + "" notifying failure "" + this.channel);
  this.channel=null;
  cl.chunkFailed(id,reason);
  cl=null;
}
"
3270,dispose(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentImpl.java,xdm,9,33,30,6,0.1778,0.0714,1,1,4,"@Override public void dispose(){
  cl=null;
  if (channel != null) {
    channel.stop();
  }
  if (outStream != null) {
    try {
      outStream.close();
    }
 catch (    IOException e) {
      Logger.log(e);
    }
  }
}
"
3275,calculateTransferRate(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentImpl.java,xdm,9,27,18,3,0.254,0.1067,0,5,3,"private void calculateTransferRate(){
  long now=System.currentTimeMillis();
  long timeDiff=now - time1;
  long bytesDiff=this.downloaded - bytesRead1;
  if (timeDiff > 1000 && bytesDiff > 0) {
    transferRate=((float)bytesDiff / timeDiff) * 1000;
    bytesRead1=this.downloaded;
    time1=now;
  }
}
"
3276,throttle(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentImpl.java,xdm,17,119,102,5,0.1218,0.0489,1,7,6,"private void throttle(){
  try {
    if (config.getSpeedLimit() < 1)     return;
    if (cl.getActiveChunkCount() < 1)     return;
    long maxBpms=(config.getSpeedLimit() * 1024) / (cl.getActiveChunkCount() * 1000);
    long now=System.currentTimeMillis();
    long timeSpentInReal=now - time2;
    if (timeSpentInReal > 0) {
      time2=now;
      long bytesDownloaded=downloaded - bytesRead2;
      bytesRead2=downloaded;
      long timeShouldRequired=bytesDownloaded / maxBpms;
      if (timeShouldRequired > timeSpentInReal) {
        long timeNeedToSleep=timeShouldRequired - timeSpentInReal;
        Thread.sleep(timeNeedToSleep);
      }
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3283,reopenStream(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\SegmentImpl.java,xdm,11,40,25,3,0.1818,0.1438,1,1,4,"public void reopenStream() throws IOException {
  if (outStream != null) {
    return;
  }
  try {
    outStream=new RandomAccessFile(new File(folder,id),""rw"");
    outStream.seek(downloaded);
    Logger.log(""File opened "" + id);
  }
 catch (  IOException e) {
    Logger.log(e);
    if (outStream != null) {
      outStream.close();
    }
    throw new IOException(e);
  }
}
"
3302,"FFmpeg(List<String>,String,MediaConversionListener,MediaFormat,boolean)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\mediaconversion\FFmpeg.java,xdm,7,20,19,6,0.1571,0.0238,0,10,1,"public FFmpeg(List<String> inputFiles,String outputFile,MediaConversionListener listener,MediaFormat outformat,boolean copy){
  this.inputFiles=inputFiles;
  this.outputFile=outputFile;
  this.listener=listener;
  this.outformat=outformat;
  this.copy=copy;
}
"
3303,convert(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\mediaconversion\FFmpeg.java,xdm,48,862,596,8,0.0598,0.1574,0.5,10,16,"public int convert(){
  try {
    Logger.log(""Outformat: "" + outformat + "" audio: ""+ outformat.isAudioOnly());
    File ffFile=new File(Config.getInstance().getDataFolder(),System.getProperty(""os.name"").toLowerCase().contains(""windows"") ? ""ffmpeg.exe"" : ""ffmpeg"");
    if (!ffFile.exists()) {
      return FF_NOT_FOUND;
    }
    List<String> args=new ArrayList<String>();
    args.add(ffFile.getAbsolutePath());
    if (hls) {
      args.add(""-f"");
      args.add(""concat"");
      args.add(""-safe"");
      args.add(""0"");
    }
    for (int i=0; i < inputFiles.size(); i++) {
      args.add(""-i"");
      args.add(inputFiles.get(i));
    }
    if (outformat.isAudioOnly()) {
      if (outformat.getWidth() > 0) {
        args.add(""-b:a"");
        args.add(outformat.getWidth() + ""k"");
      }
 else       if (copy) {
        args.add(""-acodec"");
        args.add(""copy"");
      }
    }
 else {
      if (outformat.getWidth() > 0) {
        args.add(""-vf"");
        args.add(""scale="" + outformat.getWidth() + "":""+ outformat.getHeight());
      }
 else       if (copy) {
        args.add(""-acodec"");
        args.add(""copy"");
        args.add(""-vcodec"");
        args.add(""copy"");
      }
    }
    args.add(outputFile);
    args.add(""-y"");
    for (    String s : args) {
      Logger.log(""@ffmpeg_args: "" + s);
    }
    ProcessBuilder pb=new ProcessBuilder(args);
    pb.redirectErrorStream(true);
    proc=pb.start();
    BufferedReader br=new BufferedReader(new InputStreamReader(proc.getInputStream()),1024);
    while (true) {
      String ln=br.readLine();
      if (ln == null) {
        break;
      }
      try {
        String text=ln.trim();
        processOutput(text);
      }
 catch (      Exception e) {
        Logger.log(e);
      }
    }
    ffExitCode=proc.waitFor();
    return ffExitCode == 0 ? FF_SUCCESS : FF_CONVERSION_FAILED;
  }
 catch (  Exception e) {
    return FF_LAUNCH_ERROR;
  }
}
"
3306,parseDuration(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\mediaconversion\FFmpeg.java,xdm,14,54,17,3,0.2857,0.2185,1,4,4,"private long parseDuration(String dur){
  long duration=0;
  String[] arr=dur.split("":"");
  String s=arr[0].trim();
  if (!StringUtils.isNullOrEmpty(s)) {
    duration=Integer.parseInt(s,10) * 3600;
  }
  s=arr[1].trim();
  if (!StringUtils.isNullOrEmpty(s)) {
    duration+=Integer.parseInt(arr[1].trim(),10) * 60;
  }
  s=arr[2].split(""\\."")[0].trim();
  if (!StringUtils.isNullOrEmpty(s)) {
    duration+=Integer.parseInt(s,10);
  }
  return duration;
}
"
3307,processOutput(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\mediaconversion\FFmpeg.java,xdm,27,244,137,3,0.125,0.1128,1,10,8,"private void processOutput(String text){
  if (StringUtils.isNullOrEmpty(text)) {
    return;
  }
  if (totalDuration > 0) {
    if (text.startsWith(""frame="") && text.contains(""time="")) {
      int index1=text.indexOf(""time"");
      index1=text.indexOf('=',index1);
      int index2=text.indexOf(""bitrate="");
      String dur=text.substring(index1 + 1,index2).trim();
      Logger.log(""Parsing duration: "" + dur);
      long t=parseDuration(dur);
      Logger.log(""Duration: "" + t + "" Total duration: ""+ totalDuration);
      int prg=(int)((t * 100) / totalDuration);
      Logger.log(""ffmpeg prg: "" + prg);
      listener.progress(prg);
    }
  }
  if (totalDuration == 0) {
    if (text.startsWith(""Duration:"")) {
      try {
        int index1=text.indexOf(""Duration"");
        index1=text.indexOf(':',index1);
        int index2=text.indexOf("","",index1);
        String dur=text.substring(index1 + 1,index2).trim();
        Logger.log(""Parsing duration: "" + dur);
        totalDuration=parseDuration(dur);
        Logger.log(""Total duration: "" + totalDuration);
      }
 catch (      Exception e) {
        Logger.log(e);
        totalDuration=-1;
      }
    }
  }
}
"
3322,toString(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\mediaconversion\MediaFormat.java,xdm,7,18,15,5,0.2381,0.0667,1,0,3,"@Override public String toString(){
  if (width < 0) {
    return StringResource.get(""VID_FMT_ORIG"");
  }
  if (audioOnly) {
    return format + "" "" + description+ "" ""+ width+ ""kbps "";
  }
  return format + "" "" + description+ "" (""+ width+ ""x""+ height+ "") "";
}
"
3330,run(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\BrowserMonitor.java,xdm,14,75,59,5,0.1429,0.0926,0.6,5,4,"public void run(){
  ServerSocket serverSock=null;
  try {
    serverSock=new ServerSocket();
    serverSock.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(),9614));
    XDMApp.instanceStarted();
    while (true) {
      Socket sock=serverSock.accept();
      MonitoringSession session=new MonitoringSession(sock);
      session.start();
    }
  }
 catch (  Exception e) {
    Logger.log(e);
    XDMApp.instanceAlreadyRunning();
  }
  try {
    serverSock.close();
  }
 catch (  Exception e) {
  }
}
"
3331,"handle(File,ParsedHookData)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\F4mHandler.java,xdm,30,373,311,5,0.087,0.0844,0.571428571,12,12,"public static boolean handle(File f4mfile,ParsedHookData data){
  try {
    StringBuffer buf=new StringBuffer();
    InputStream in=new FileInputStream(f4mfile);
    BufferedReader r=new BufferedReader(new InputStreamReader(in));
    while (true) {
      String ln=r.readLine();
      if (ln == null) {
        break;
      }
      buf.append(ln + ""\n"");
    }
    in.close();
    Logger.log(""HDS manifest validating..."");
    if (buf.indexOf(""http://ns.adobe.com/f4m/1.0"") < 0) {
      Logger.log(""No namespace"");
      return false;
    }
    if (buf.indexOf(""manifest"") < 0) {
      Logger.log(""No manifest keyword"");
      return false;
    }
    if (buf.indexOf(""drmAdditional"") > 0) {
      Logger.log(""DRM"");
      return false;
    }
    if (buf.indexOf(""media"") == 0 || buf.indexOf(""href"") > 0 || buf.indexOf("".f4m"") > 0) {
      Logger.log(""Not a valid manifest"");
      return false;
    }
    F4MManifest manifest=new F4MManifest(data.getUrl(),f4mfile.getAbsolutePath());
    long[] bitRates=manifest.getBitRates();
    for (int i=0; i < bitRates.length; i++) {
      HdsMetadata metadata=new HdsMetadata();
      metadata.setUrl(data.getUrl());
      metadata.setBitRate((int)bitRates[i]);
      metadata.setHeaders(data.getRequestHeaders());
      String file=data.getFile();
      if (StringUtils.isNullOrEmptyOrBlank(file)) {
        file=XDMUtils.getFileName(data.getUrl());
      }
      XDMApp.getInstance().addMedia(metadata,file + "".flv"",""FLV "" + bitRates[i] + "" bps"");
    }
    return true;
  }
 catch (  Exception e) {
    Logger.log(e);
    return false;
  }
}
"
3332,"handle(File,ParsedHookData)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\FBHandler.java,xdm,48,972,816,5,0.0707,0.046,0.545454545,23,12,"public static boolean handle(File tempFile,ParsedHookData data){
  try {
    StringBuffer buf=new StringBuffer();
    InputStream in=new FileInputStream(tempFile);
    BufferedReader r=new BufferedReader(new InputStreamReader(in));
    while (true) {
      String ln=r.readLine();
      if (ln == null) {
        break;
      }
      buf.append(ln + ""\n"");
    }
    in.close();
    Logger.log(""Parsing facebook page..."");
    ArrayList<String> sdUrls1=findURL(""sd_src"",buf);
    ArrayList<String> sdUrls2=findURL(""sd_src_no_ratelimit"",buf);
    ArrayList<String> hdUrls1=findURL(""hd_src"",buf);
    ArrayList<String> hdUrls2=findURL(""hd_src_no_ratelimit"",buf);
    for (int i=0; i < sdUrls1.size(); i++) {
      HttpMetadata metadata=new HttpMetadata();
      metadata.setUrl(sdUrls1.get(i));
      metadata.setHeaders(data.getRequestHeaders());
      String file=data.getFile();
      if (StringUtils.isNullOrEmptyOrBlank(file)) {
        file=XDMUtils.getFileName(data.getUrl());
      }
      XDMApp.getInstance().addMedia(metadata,file + "".mp4"",""MP4 LOW"");
    }
    for (int i=0; i < sdUrls2.size(); i++) {
      HttpMetadata metadata=new HttpMetadata();
      metadata.setUrl(sdUrls2.get(i));
      metadata.setHeaders(data.getRequestHeaders());
      String file=data.getFile();
      if (StringUtils.isNullOrEmptyOrBlank(file)) {
        file=XDMUtils.getFileName(data.getUrl());
      }
      XDMApp.getInstance().addMedia(metadata,file + "".mp4"",""MP4 MEDIUM"");
    }
    for (int i=0; i < hdUrls1.size(); i++) {
      HttpMetadata metadata=new HttpMetadata();
      metadata.setUrl(hdUrls1.get(i));
      metadata.setHeaders(data.getRequestHeaders());
      String file=data.getFile();
      if (StringUtils.isNullOrEmptyOrBlank(file)) {
        file=XDMUtils.getFileName(data.getUrl());
      }
      XDMApp.getInstance().addMedia(metadata,file + "".mp4"",""MP4 HD"");
    }
    for (int i=0; i < hdUrls2.size(); i++) {
      HttpMetadata metadata=new HttpMetadata();
      metadata.setUrl(hdUrls2.get(i));
      metadata.setHeaders(data.getRequestHeaders());
      String file=data.getFile();
      if (StringUtils.isNullOrEmptyOrBlank(file)) {
        file=XDMUtils.getFileName(data.getUrl());
      }
      XDMApp.getInstance().addMedia(metadata,file + "".mp4"",""MP4 HQ"");
    }
    return true;
  }
 catch (  Exception e) {
    Logger.log(e);
    return false;
  }
}
"
3333,"findURL(String,StringBuffer)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\FBHandler.java,xdm,48,1028,928,30,0.0677,0.059,1,11,10,"private static ArrayList<String> findURL(String keyword,StringBuffer buf){
  int index1=0;
  int index=0;
  ArrayList<String> urlList=new ArrayList<String>();
  String urlStart="":"";
  while (true) {
    index=buf.indexOf(keyword,index);
    if (index < 0)     break;
    index+=keyword.length();
    index=buf.indexOf("":"",index);
    if (index < 0) {
      break;
    }
    index+=1;
    int collonIndex=index;
    while (true) {
      char ch=buf.charAt(index);
      if (ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t')       index++;
 else       break;
    }
    char ch=buf.charAt(index);
    if (ch == '""') {
      index++;
      int index3=buf.indexOf(""\"""",index);
      String url=decodeJSONEscape(buf.substring(index,index3).trim().replace(""\"""",""""));
      Logger.log(keyword + "": "" + url);
      urlList.add(url);
    }
  }
  return urlList;
}
"
3334,decodeJSONEscape(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\FBHandler.java,xdm,15,62,19,3,0.2222,0.1742,0,6,4,"private static String decodeJSONEscape(String json){
  StringBuffer buf=new StringBuffer();
  int pos=0;
  while (true) {
    int index=json.indexOf(""\\u"",pos);
    if (index < 0) {
      if (pos < json.length()) {
        buf.append(json.substring(pos));
      }
      break;
    }
    buf.append(json.substring(pos,index));
    pos=index;
    String code=json.substring(pos + 2,pos + 2 + 4);
    int char_code=Integer.parseInt(code,16);
    buf.append((char)char_code);
    pos+=6;
  }
  return buf.toString().replace(""\\"","""");
}
"
3335,"handle(File,ParsedHookData)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\InstagramHandler.java,xdm,31,398,331,4,0.0829,0.0495,0.5,14,8,"public static boolean handle(File tempFile,ParsedHookData data){
  try {
    StringBuffer buf=new StringBuffer();
    InputStream in=new FileInputStream(tempFile);
    BufferedReader r=new BufferedReader(new InputStreamReader(in));
    while (true) {
      String ln=r.readLine();
      if (ln == null) {
        break;
      }
      buf.append(ln + ""\n"");
    }
    in.close();
    Logger.log(""Parsing instagram page..."");
    if (pattern == null) {
      pattern=Pattern.compile(""\""video\\_url\""\\s*:\\s*\""(.*?)\"""");
    }
    Matcher matcher=pattern.matcher(buf);
    if (matcher.find()) {
      int start=matcher.start();
      int end=matcher.end();
      String url=matcher.group(1);
      Logger.log(""Url: "" + url);
      HttpMetadata metadata=new HttpMetadata();
      metadata.setUrl(url);
      metadata.setHeaders(data.getRequestHeaders());
      String file=data.getFile();
      if (StringUtils.isNullOrEmptyOrBlank(file)) {
        file=XDMUtils.getFileName(data.getUrl());
      }
      String ext=XDMUtils.getExtension(XDMUtils.getFileName(url));
      if (ext != null) {
        ext=ext.replace(""."","""").toUpperCase();
      }
 else {
        ext="""";
      }
      XDMApp.getInstance().addMedia(metadata,file + ""."" + ext,ext);
    }
    return true;
  }
 catch (  Exception e) {
    Logger.log(e);
    return false;
  }
}
"
3336,"handle(File,ParsedHookData)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\M3U8Handler.java,xdm,31,330,195,3,0.1441,0.1057,0.470588235,13,11,"public static boolean handle(File m3u8file,ParsedHookData data){
  try {
    M3U8Manifest manifest=new M3U8Manifest(m3u8file.getAbsolutePath(),data.getUrl());
    if (manifest.isEncrypted()) {
      return true;
    }
    if (!manifest.isMasterPlaylist()) {
      HlsMetadata metadata=new HlsMetadata();
      metadata.setUrl(data.getUrl());
      metadata.setHeaders(data.getRequestHeaders());
      String file=data.getFile();
      if (StringUtils.isNullOrEmptyOrBlank(file)) {
        file=XDMUtils.getFileName(data.getUrl());
      }
      XDMApp.getInstance().addMedia(metadata,file + "".ts"",""HLS"");
    }
 else {
      ArrayList<String> urls=manifest.getMediaUrls();
      if (urls != null) {
        for (int i=0; i < urls.size(); i++) {
          String url=urls.get(i);
          M3U8MediaInfo info=manifest.getMediaProperty(i);
          HlsMetadata metadata=new HlsMetadata();
          metadata.setUrl(url);
          metadata.setHeaders(data.getRequestHeaders());
          String file=data.getFile();
          if (StringUtils.isNullOrEmptyOrBlank(file)) {
            file=XDMUtils.getFileName(data.getUrl());
          }
          StringBuilder infoStr=new StringBuilder();
          if (!StringUtils.isNullOrEmptyOrBlank(info.getBandwidth())) {
            infoStr.append(info.getBandwidth());
          }
          if (infoStr.length() > 0) {
            infoStr.append("" "");
          }
          if (!StringUtils.isNullOrEmptyOrBlank(info.getResolution())) {
            infoStr.append(info.getResolution());
          }
          XDMApp.getInstance().addMedia(metadata,file + "".ts"",infoStr.toString());
        }
      }
    }
    return true;
  }
 catch (  Exception e) {
  }
  return false;
}
"
3340,"onDownload(Request,Response)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,14,66,41,5,0.1571,0.1212,0.384615385,6,3,"private void onDownload(Request request,Response res) throws UnsupportedEncodingException {
  try {
    Logger.log(new String(request.getBody()));
    byte[] b=request.getBody();
    ParsedHookData data=ParsedHookData.parse(b);
    if (data.getUrl() != null && data.getUrl().length() > 0) {
      HttpMetadata metadata=new HttpMetadata();
      metadata.setUrl(data.getUrl());
      metadata.setHeaders(data.getRequestHeaders());
      metadata.setSize(data.getContentLength());
      String file=data.getFile();
      XDMApp.getInstance().addDownload(metadata,file);
    }
  }
  finally {
    setResponseOk(res);
  }
}
"
3341,"onVideo(Request,Response)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,14,74,57,6,0.1429,0.0985,0.571428571,5,12,"private void onVideo(Request request,Response res) throws UnsupportedEncodingException {
  try {
    Logger.log(new String(request.getBody()));
    if (!Config.getInstance().isShowVideoNotification()) {
      return;
    }
    byte[] b=request.getBody();
    ParsedHookData data=ParsedHookData.parse(b);
    String type=data.getContentType();
    if (type == null) {
      type="""";
    }
    if (type.contains(""f4f"") || type.contains(""m4s"") || type.contains(""mp2t"")|| data.getUrl().contains(""fcs"")|| data.getUrl().contains(""abst"")|| data.getUrl().contains(""f4x"")|| data.getUrl().contains("".fbcdn"")) {
      return;
    }
    if (!(processDashSegment(data) || processVideoManifest(data))) {
      processNormalVideo(data);
    }
  }
  finally {
    setResponseOk(res);
  }
}
"
3343,"onCmd(Request,Response)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,19,145,119,5,0.1158,0.0549,0.571428571,12,6,"private void onCmd(Request request,Response res){
  byte[] data=request.getBody();
  if (data == null || data.length < 1) {
    XDMApp.getInstance().showMainWindow();
  }
 else {
    String[] arr=new String(data).split(""\n"");
    for (int i=0; i < arr.length; i++) {
      String str=arr[i];
      int index=str.indexOf("":"");
      if (index < 1)       continue;
      String key=str.substring(0,index).trim();
      String val=str.substring(index + 1).trim();
      if (key.equals(""url"")) {
        String url=val;
        HttpMetadata metadata=new HttpMetadata();
        metadata.setUrl(url);
        String file=XDMUtils.getFileName(url);
        XDMApp.getInstance().addDownload(metadata,file);
      }
    }
  }
  setResponseOk(res);
}
"
3344,"onSync(Request,Response)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,26,174,23,3,0.2179,0.3287,0.25,5,1,"private void onSync(Request request,Response res){
  StringBuffer json=new StringBuffer();
  json.append(""{\n\""enabled\"": "");
  json.append(Config.getInstance().isBrowserMonitoringEnabled());
  json.append("",\n\""blockedHosts\"": ["");
  appendArray(Config.getInstance().getBlockedHosts(),json);
  json.append(""],"");
  json.append(""\n\""videoUrls\"": ["");
  appendArray(Config.getInstance().getVidUrls(),json);
  json.append(""],"");
  json.append(""\n\""fileExts\"": ["");
  appendArray(Config.getInstance().getFileExts(),json);
  json.append(""],"");
  json.append(""\n\""vidExts\"": ["");
  appendArray(Config.getInstance().getVidExts(),json);
  json.append(""]"");
  json.append(""\n}"");
  byte[] b=json.toString().getBytes();
  res.setCode(200);
  res.setMessage(""OK"");
  HeaderCollection headers=new HeaderCollection();
  headers.addHeader(""Content-Length"",b.length + """");
  headers.addHeader(""Content-Type"",""application/json"");
  res.setHeaders(headers);
  res.setBody(b);
}
"
3345,"appendArray(String[],StringBuffer)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,9,26,16,3,0.3056,0.1405,0,4,5,"private void appendArray(String[] arr,StringBuffer buf){
  boolean insertComma=false;
  if (arr != null && arr.length > 0) {
    for (int i=0; i < arr.length; i++) {
      if (insertComma) {
        buf.append("","");
      }
 else {
        insertComma=true;
      }
      buf.append(""\"""" + arr[i] + ""\"""");
    }
  }
}
"
3346,"processRequest(Request,Response)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,11,37,19,4,0.4242,0.2628,1,3,6,"private void processRequest(Request request,Response res) throws IOException {
  String verb=request.getUrl();
  if (verb.equals(""/sync"")) {
    onSync(request,response);
  }
 else   if (verb.equals(""/download"")) {
    onDownload(request,response);
  }
 else   if (verb.equals(""/video"")) {
    onVideo(request,response);
  }
 else   if (verb.equals(""/cmd"")) {
    onCmd(request,response);
  }
 else   if (verb.equals(""/quit"")) {
    onQuit(request,response);
  }
 else {
    throw new IOException(""invalid verb"");
  }
}
"
3347,serviceRequest(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,10,38,31,5,0.2,0.0603,1,5,3,"private void serviceRequest(){
  try {
    inStream=sock.getInputStream();
    outStream=sock.getOutputStream();
    while (true) {
      this.request.read(inStream);
      this.processRequest(this.request,this.response);
      this.response.write(outStream);
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  cleanup();
}
"
3348,cleanup(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,8,25,22,6,0.1875,0.1111,0,3,4,"private void cleanup(){
  try {
    inStream.close();
  }
 catch (  Exception e) {
  }
  try {
    outStream.close();
  }
 catch (  Exception e) {
  }
  try {
    sock.close();
  }
 catch (  Exception e) {
  }
}
"
3350,processDashSegment(ParsedHookData),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,79,2510,1939,3,0.063,0.055,0.384615385,27,37,"private boolean processDashSegment(ParsedHookData data){
  try {
    URL url=new URL(data.getUrl());
    String host=url.getHost();
    if (!(host.contains(""youtube.com"") || host.contains(""googlevideo.com""))) {
      Logger.log(""non yt host"");
      return false;
    }
    String type=data.getContentType();
    if (type == null) {
      type="""";
    }
    if (!(type.contains(""audio/"") || type.contains(""video/"") || type.contains(""application/octet""))) {
      Logger.log(""non yt type"");
      return false;
    }
    String low_path=data.getUrl().toLowerCase();
    if (low_path.indexOf(""videoplayback"") >= 0 && low_path.indexOf(""itag"") >= 0) {
      if (StringUtils.isNullOrEmptyOrBlank(url.getQuery())) {
        return false;
      }
      int index=data.getUrl().indexOf(""?"");
      String path=data.getUrl().substring(0,index);
      String query=data.getUrl().substring(index + 1);
      String arr[]=query.split(""&"");
      StringBuilder yt_url=new StringBuilder();
      yt_url.append(path + ""?"");
      int itag=0;
      long clen=0;
      String id="""";
      String mime="""";
      for (int i=0; i < arr.length; i++) {
        String str=arr[i];
        index=str.indexOf(""="");
        if (index > 0) {
          String key=str.substring(0,index).trim();
          String val=str.substring(index + 1).trim();
          if (key.startsWith(""range"")) {
            continue;
          }
          if (key.equals(""itag"")) {
            itag=Integer.parseInt(val);
          }
          if (key.equals(""clen"")) {
            clen=Integer.parseInt(val);
          }
          if (key.startsWith(""mime"")) {
            mime=URLDecoder.decode(val,""UTF-8"");
          }
          if (str.startsWith(""id"")) {
            id=val;
          }
        }
        yt_url.append(str);
        if (i < arr.length - 1) {
          yt_url.append(""&"");
        }
      }
      if (itag != 0) {
        if (YtUtil.isNormalVideo(itag)) {
          Logger.log(""Normal vid"");
          return false;
        }
      }
      DASH_INFO info=new DASH_INFO();
      info.url=yt_url.toString();
      info.clen=clen;
      info.video=mime.startsWith(""video"");
      info.itag=itag;
      info.id=id;
      info.mime=mime;
      info.headers=data.getRequestHeaders();
      Logger.log(""processing yt mime: "" + mime + "" id: ""+ id+ "" clen: ""+ clen+ "" itag: ""+ itag);
      if (YtUtil.addToQueue(info)) {
        DASH_INFO di=YtUtil.getDASHPair(info);
        if (di != null) {
          DashMetadata dm=new DashMetadata();
          dm.setUrl(info.video ? info.url : di.url);
          dm.setUrl2(info.video ? di.url : info.url);
          dm.setLen1(info.video ? info.clen : di.clen);
          dm.setLen2(info.video ? di.clen : info.clen);
          dm.setHeaders(info.video ? info.headers : di.headers);
          dm.setHeaders2(info.video ? di.headers : info.headers);
          String file=data.getFile();
          if (StringUtils.isNullOrEmptyOrBlank(file)) {
            file=XDMUtils.getFileName(data.getUrl());
          }
          Logger.log(""file: "" + file + "" url1: ""+ dm.getUrl()+ "" url2: ""+ dm.getUrl2()+ "" len1: ""+ dm.getLen1()+ "" len2: ""+ dm.getLen2());
          String szStr=null;
          if (info.clen > 0 && di.clen > 0) {
            szStr=FormatUtilities.formatSize(info.clen + di.clen);
          }
          String videoContentType=info.video ? info.mime : di.mime;
          String audioContentType=di.video ? di.mime : info.mime;
          String ext=getYtDashFormat(videoContentType,audioContentType);
          file+=""."" + ext;
          if (info.video) {
          }
          XDMApp.getInstance().addMedia(dm,file,YtUtil.getInfoFromITAG(info.video ? info.itag : di.itag) + (szStr == null ? """" : "" "" + szStr));
          return true;
        }
      }
      return true;
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  return false;
}
"
3351,processVideoManifest(ParsedHookData),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,32,339,182,5,0.1183,0.1645,0.727272727,7,13,"private boolean processVideoManifest(ParsedHookData data){
  String url=data.getUrl();
  String file=data.getFile();
  String contentType=data.getContentType();
  if (contentType == null) {
    contentType="""";
  }
  String ext=XDMUtils.getExtension(XDMUtils.getFileName(data.getUrl()));
  File manifestfile=null;
  try {
    if (contentType.contains(""mpegurl"") || "".m3u8"".equalsIgnoreCase(ext)) {
      Logger.log(""Downloading m3u8 manifest"");
      manifestfile=downloadMenifest(data);
      return M3U8Handler.handle(manifestfile,data);
    }
    if (contentType.contains(""f4m"") || "".f4m"".equalsIgnoreCase(ext)) {
      Logger.log(""Downloading f4m manifest"");
      manifestfile=downloadMenifest(data);
      return F4mHandler.handle(manifestfile,data);
    }
    if (url.contains("".facebook.com"") && url.toLowerCase().contains(""pagelet"")) {
      Logger.log(""Downloading fb manifest"");
      manifestfile=downloadMenifest(data);
      return FBHandler.handle(manifestfile,data);
    }
    if (url.contains(""player.vimeo.com"") && contentType.toLowerCase().contains(""json"")) {
      Logger.log(""Downloading video manifest"");
      manifestfile=downloadMenifest(data);
      return VimeoHandler.handle(manifestfile,data);
    }
    if (url.contains(""instagram.com/p/"")) {
      Logger.log(""Downloading video manifest"");
      manifestfile=downloadMenifest(data);
      return InstagramHandler.handle(manifestfile,data);
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (manifestfile != null) {
      manifestfile.delete();
    }
  }
  return false;
}
"
3352,processNormalVideo(ParsedHookData),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,33,403,278,4,0.1119,0.1438,0.444444444,7,17,"private void processNormalVideo(ParsedHookData data){
  String file=data.getFile();
  String type=data.getContentType();
  if (type == null) {
    type="""";
  }
  if (StringUtils.isNullOrEmptyOrBlank(file)) {
    file=XDMUtils.getFileName(data.getUrl());
  }
  String ext="""";
  if (type.contains(""video/mp4"")) {
    ext=""mp4"";
  }
 else   if (type.contains(""video/x-flv"")) {
    ext=""flv"";
  }
 else   if (type.contains(""video/webm"")) {
    ext=""mkv"";
  }
 else   if (type.contains(""matroska"") || type.contains(""mkv"")) {
    ext=""mkv"";
  }
 else   if (type.equals(""audio/mpeg"") || type.contains(""audio/mp3"")) {
    ext=""mp3"";
  }
 else   if (type.contains(""audio/aac"")) {
    ext=""aac"";
  }
 else   if (type.contains(""audio/mp4"")) {
    ext=""m4a"";
  }
 else {
    return;
  }
  file+=""."" + ext;
  if (data.getContentLength() < Config.getInstance().getMinVidSize()) {
    Logger.log(""video less than min size"");
    return;
  }
  HttpMetadata metadata=new HttpMetadata();
  metadata.setUrl(data.getUrl());
  metadata.setHeaders(data.getRequestHeaders());
  metadata.setSize(data.getContentLength());
  long size=data.getContentLength();
  if (size > 0) {
    if (data.isPartialResponse()) {
      size=-1;
    }
  }
  String sz=(size > 0 ? FormatUtilities.formatSize(size) : """");
  if (ext.length() > 0) {
    sz+="" "" + ext.toUpperCase();
  }
  XDMApp.getInstance().addMedia(metadata,file,sz);
}
"
3353,downloadMenifest(ParsedHookData),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\MonitoringSession.java,xdm,26,269,213,3,0.1071,0.0817,0.5,12,7,"private File downloadMenifest(ParsedHookData data){
  JavaHttpClient client=null;
  OutputStream out=null;
  try {
    client=new JavaHttpClient(data.getUrl());
    Iterator<HttpHeader> headers=data.getRequestHeaders().getAll();
    while (headers.hasNext()) {
      HttpHeader header=headers.next();
      client.addHeader(header.getName(),header.getValue());
    }
    client.connect();
    int resp=client.getStatusCode();
    Logger.log(""manifest download response: "" + resp);
    if (resp == 206 || resp == 200) {
      InputStream in=client.getInputStream();
      File tmpFile=new File(Config.getInstance().getTemporaryFolder(),UUID.randomUUID().toString());
      long len=client.getContentLength();
      out=new FileOutputStream(tmpFile);
      XDMUtils.copyStream(in,out,len);
      Logger.log(""manifest download successfull"");
      return tmpFile;
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    try {
      out.close();
    }
 catch (    Exception e) {
    }
    try {
      client.dispose();
    }
 catch (    Exception e) {
    }
  }
  return null;
}
"
3355,parse(byte[]),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\ParsedHookData.java,xdm,40,558,336,5,0.1039,0.1168,0.375,15,16,"public static ParsedHookData parse(byte[] b) throws UnsupportedEncodingException {
  ParsedHookData data=new ParsedHookData();
  data.requestHeaders=new HeaderCollection();
  data.responseHeaders=new HeaderCollection();
  String strBuf=new String(b,""utf-8"");
  String[] arr=strBuf.split(""\r\n"");
  for (int i=0; i < arr.length; i++) {
    String str=arr[i];
    if (!str.contains(""="")) {
      continue;
    }
    String ln=str;
    int index=ln.indexOf(""="");
    String key=ln.substring(0,index).trim().toLowerCase();
    String val=ln.substring(index + 1).trim();
    if (key.equals(""url"")) {
      data.setUrl(val);
    }
 else     if (key.equals(""file"")) {
      val=XDMUtils.getFileName(val);
      data.setFile(val);
    }
 else     if (key.equals(""req"")) {
      index=val.indexOf("":"");
      if (index > 0) {
        String headerName=val.substring(0,index).trim().toLowerCase();
        String headerValue=val.substring(index + 1).trim();
        if (headerName.equals(""range"") && (!headerValue.startsWith(""bytes=0-""))) {
          data.setPartialResponse(true);
        }
        if (!isBlockedHeader(headerName)) {
          data.requestHeaders.addHeader(headerName,headerValue);
        }
        System.out.println(ln);
      }
    }
 else     if (key.equals(""res"")) {
      index=val.indexOf("":"");
      if (index > 0) {
        String headerName=val.substring(0,index).trim().toLowerCase();
        String headerValue=val.substring(index + 1).trim();
        data.responseHeaders.addHeader(headerName,headerValue);
      }
    }
  }
  if (data.responseHeaders.containsHeader(""content-length"") || data.responseHeaders.containsHeader(""content-range"")) {
    data.contentLength=NetUtils.getContentLength(data.responseHeaders);
  }
  if (data.responseHeaders.containsHeader(""content-type"")) {
    data.contentType=NetUtils.getCleanContentType(data.responseHeaders.getValue(""content-type""));
  }
  try {
    data.setExt(XDMUtils.getExtension(XDMUtils.getFileName(data.getUrl())));
  }
 catch (  Exception e) {
  }
  return data;
}
"
3356,isBlockedHeader(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\ParsedHookData.java,xdm,12,66,66,12,0.0833,0,0,2,3,"private static boolean isBlockedHeader(String name){
  for (int i=0; i < blockedHeaders.length; i++) {
    if (name.startsWith(blockedHeaders[i])) {
      return true;
    }
  }
  return false;
}
"
3373,read(InputStream),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\Request.java,xdm,24,239,202,5,0.1012,0.0594,0.5,10,8,"public void read(InputStream in) throws IOException {
  String reqLine=NetUtils.readLine(in);
  if (reqLine == null || reqLine.length() < 1) {
    throw new IOException(""Invalid request line: "" + reqLine);
  }
  String[] arr=reqLine.split("" "");
  if (arr.length != 3) {
    throw new IOException(""Invalid request: "" + reqLine);
  }
  this.url=arr[1];
  this.method=arr[0].toLowerCase().equals(""post"") ? 1 : 2;
  this.headers=new HeaderCollection();
  headers.loadFromStream(in);
  String header=headers.getValue(""Content-Length"");
  if (header != null) {
    long len=Long.parseLong(header);
    body=new byte[(int)len];
    int off=0;
    while (len > 0) {
      int x=in.read(body,off,body.length - off);
      if (x == -1) {
        throw new IOException(""Unexpected EOF"");
      }
      len-=x;
      off+=x;
    }
  }
}
"
3382,write(OutputStream),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\Response.java,xdm,12,48,30,3,0.2222,0.1205,0.5,2,7,"public void write(OutputStream out) throws IOException {
  StringBuffer buf=new StringBuffer();
  buf.append(""HTTP/1.1 "" + code + "" ""+ message+ ""\r\n"");
  if (code != 204) {
    headers.addHeader(""Content-Length"",(body == null || body.length < 0) ? ""0"" : body.length + """");
  }
  headers.appendToBuffer(buf);
  buf.append(""\r\n"");
  out.write(buf.toString().getBytes());
  if (body != null && body.length > 0) {
    out.write(body);
  }
  out.flush();
}
"
3391,"handle(File,ParsedHookData)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\VimeoHandler.java,xdm,35,344,93,5,0.1122,0.2355,1,12,11,"public static boolean handle(File tempFile,ParsedHookData data){
  try {
    StringBuffer buf=new StringBuffer();
    InputStream in=new FileInputStream(tempFile);
    BufferedReader r=new BufferedReader(new InputStreamReader(in));
    while (true) {
      String ln=r.readLine();
      if (ln == null) {
        break;
      }
      buf.append(ln + ""\n"");
    }
    in.close();
    String keyword=""\""progressive\"""";
    int index=buf.indexOf(keyword);
    if (index < 0) {
      return false;
    }
    index+=keyword.length();
    index=buf.indexOf("":"",index);
    if (index < 0) {
      return false;
    }
    index++;
    index=buf.indexOf(""["",index);
    if (index < 0) {
      return false;
    }
    index++;
    int start=index;
    index=buf.indexOf(""]"",index);
    if (index < 0) {
      return false;
    }
    String str=buf.substring(start,index);
    index=0;
    while (index != -1) {
      index=str.indexOf(""{"",index);
      if (index > -1) {
        index++;
        start=index;
        index=str.indexOf(""}"",index);
        if (index > -1) {
          String s=str.substring(start,index);
          processString(s,data);
        }
      }
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  return false;
}
"
3392,"processString(String,ParsedHookData)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\VimeoHandler.java,xdm,30,363,291,3,0.102,0.0709,0.545454545,13,9,"private static void processString(String str,ParsedHookData data){
  String quality="""", type="""", url="""";
  String[] arr=str.split("","");
  for (int i=0; i < arr.length; i++) {
    int index=arr[i].indexOf("":"");
    if (index > 0) {
      String key=arr[i].substring(0,index).replace(""\"""","""");
      String val=arr[i].substring(index + 1).replace(""\"""","""");
      if (key.equals(""url"")) {
        url=val;
        Logger.log(url);
      }
      if (key.equals(""quality"")) {
        quality=val;
        Logger.log(quality);
      }
      if (key.equals(""mime"")) {
        type=val;
        Logger.log(type);
      }
    }
  }
  String ext=""mp4"";
  if (type.contains(""video/mp4"")) {
    ext=""mp4"";
  }
 else   if (type.contains(""video/webm"")) {
    ext=""webm"";
  }
  HttpMetadata metadata=new HttpMetadata();
  metadata.setUrl(url);
  metadata.setHeaders(data.getRequestHeaders());
  String file=data.getFile();
  if (StringUtils.isNullOrEmptyOrBlank(file)) {
    file=XDMUtils.getFileName(data.getUrl());
  }
  XDMApp.getInstance().addMedia(metadata,file + ""."" + ext,ext.toUpperCase() + "" "" + quality);
}
"
3394,addToQueue(DASH_INFO),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\YtUtil.java,xdm,20,134,78,4,0.1778,0.1287,1,5,10,"public static boolean addToQueue(DASH_INFO info){
synchronized (lockObject) {
    if (videoQueue.size() > 32) {
      videoQueue.remove(0);
    }
    if (audioQueue.size() > 32) {
      audioQueue.remove(0);
    }
    if (info.video) {
      for (int i=videoQueue.size() - 1; i >= 0; i--) {
        DASH_INFO di=videoQueue.get(i);
        if (di.clen == info.clen) {
          if (di.id.equals(info.id)) {
            return false;
          }
        }
      }
      videoQueue.add(info);
      Logger.log(""video added "" + videoQueue.size());
      return true;
    }
 else {
      for (int i=audioQueue.size() - 1; i >= 0; i--) {
        DASH_INFO di=audioQueue.get(i);
        if (di.clen == info.clen) {
          if (di.id.equals(info.id)) {
            return false;
          }
        }
      }
      audioQueue.add(info);
      Logger.log(""added added "" + audioQueue.size());
      return true;
    }
  }
}
"
3397,loadITAGs(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\monitoring\YtUtil.java,xdm,74,810,0,13,0.1166,0.7027,0,0,2,"static void loadITAGs(){
  if (itags != null) {
    return;
  }
  itags=new HashMap<Integer,String>();
  itags.put(5,""320 x 240"");
  itags.put(6,""450 x 270"");
  itags.put(13,""Small"");
  itags.put(17,""176 x 144"");
  itags.put(18,""480 x 360"");
  itags.put(22,""1280 x 720"");
  itags.put(34,""480 x 360"");
  itags.put(35,""640 x 480 "");
  itags.put(36,""320 x 240"");
  itags.put(37,""1920 x 1080"");
  itags.put(38,""2048 x 1080"");
  itags.put(43,""480 x 360"");
  itags.put(44,""640 x 480"");
  itags.put(45,""1280 x 720"");
  itags.put(46,""1920 x 1080"");
  itags.put(59,""854 x 480"");
  itags.put(78,""854 x 480"");
  itags.put(82,""480 x 360   3D"");
  itags.put(83,""640 x 480   3D"");
  itags.put(84,""1280 x 720   3D"");
  itags.put(85,""1920 x 1080  3D"");
  itags.put(100,""480 x 360   3D"");
  itags.put(101,""640 x 480   3D"");
  itags.put(102,""1280 x 720   3D"");
  itags.put(133,""320 x 240"");
  itags.put(134,""480 x 360"");
  itags.put(135,""640 x 480"");
  itags.put(136,""1280 x 720"");
  itags.put(137,""1920 x 1080"");
  itags.put(139,""Low bitrate"");
  itags.put(140,""Med bitrate"");
  itags.put(141,""Hi  bitrate"");
  itags.put(160,""256 x 144"");
  itags.put(167,""360p"");
  itags.put(168,""480p"");
  itags.put(169,""720p"");
  itags.put(170,""1080p"");
  itags.put(171,""Med bitrate"");
  itags.put(172,""Hi  bitrate"");
  itags.put(218,""480"");
  itags.put(219,""480"");
  itags.put(242,""320 x 240"");
  itags.put(243,""480 x 360"");
  itags.put(244,""640 x 480"");
  itags.put(245,""640 x 480"");
  itags.put(246,""640 x 480"");
  itags.put(247,""1280 x 720"");
  itags.put(248,""1920 x 1080"");
  itags.put(264,""1440p"");
  itags.put(266,""2160p"");
  itags.put(271,""1440p"");
  itags.put(272,""2160p"");
  itags.put(278,""144p"");
  itags.put(298,""720p"");
  itags.put(302,""720p"");
  itags.put(303,""1080p"");
  itags.put(308,""1440p"");
  itags.put(313,""2160p"");
  itags.put(315,""2160p"");
  itags.put(299,""2160p"");
}
"
3403,"findProxyForUrl(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\AutoProxyHandler.java,xdm,9,30,24,5,0.1852,0.0894,0,4,4,"private ProxyInfo findProxyForUrl(String url,String host) throws NoSuchMethodException, ScriptException, IOException {
  if (!pacLoaded) {
    loadPac();
  }
  Object localObject=((Invocable)engine).invokeFunction(""FindProxyForURL"",new Object[]{url,host});
  System.out.println(localObject);
  ProxyInfo[] arr=extractAutoProxySetting((String)localObject);
  if (arr == null || arr.length < 1)   return null;
  return arr[0];
}
"
3404,extractAutoProxySetting(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\AutoProxyHandler.java,xdm,17,97,58,3,0.2279,0.1117,1,6,5,"private final ProxyInfo[] extractAutoProxySetting(String paramString){
  if (paramString != null) {
    StringTokenizer localStringTokenizer=new StringTokenizer(paramString,"";"",false);
    ProxyInfo[] arrayOfProxyInfo=new ProxyInfo[localStringTokenizer.countTokens()];
    int i=0;
    while (localStringTokenizer.hasMoreTokens()) {
      String str=localStringTokenizer.nextToken();
      int j=str.indexOf(""PROXY"");
      if (j != -1) {
        arrayOfProxyInfo[(i++)]=new ProxyInfo(str.substring(j + 6));
      }
 else {
        j=str.indexOf(""SOCKS"");
        if (j != -1) {
          arrayOfProxyInfo[(i++)]=new ProxyInfo(null,str.substring(j + 6));
        }
 else {
          arrayOfProxyInfo[(i++)]=new ProxyInfo(null,-1);
        }
      }
    }
    return arrayOfProxyInfo;
  }
  return new ProxyInfo[]{new ProxyInfo(null)};
}
"
3405,loadPacScript(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\AutoProxyHandler.java,xdm,11,45,35,4,0.2121,0.0815,0,1,2,"private String loadPacScript() throws IOException {
  Logger.log(""Loading PAC script"");
  InputStream pacStram=new URL(pacUrl).openStream();
  StringBuilder sb=new StringBuilder();
  byte[] buf=new byte[512];
  while (true) {
    int x=pacStram.read(buf);
    if (x == -1) {
      break;
    }
    sb.append(new String(buf,0,x));
  }
  Logger.log(""Done loading PAC script"");
  return sb.toString();
}
"
3407,init(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\AutoProxyHandler.java,xdm,34,336,111,5,0.1471,0.319,1,24,50,"private void init() throws ScriptException, IOException {
  Logger.log(""Initializing PAC Handler"");
  ScriptEngineManager mgr=new ScriptEngineManager(null);
  engine=mgr.getEngineByName(""js"");
  engine.put(""obj"",this);
  this.autoProxyScript=new StringBuffer();
  this.autoProxyScript.append(""var _mon = new Array('JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC');\nvar _day = new Array('SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT');\nfunction _isGmt(i) {\n return typeof i == 'string' && i == 'GMT'; }"");
  this.autoProxyScript.append(""function dnsDomainIs(host, domain) {\nif (domain != null && domain.charAt(0) != '.')\nreturn shExpMatch(host, domain);\nreturn shExpMatch(host, '*' + domain); }"");
  this.autoProxyScript.append(""function isPlainHostName(host){\nreturn (dnsDomainLevels(host) == 0); }"");
  this.autoProxyScript.append(""function convert_addr(ipchars) {\n    var bytes = ipchars.split('.');\n    var result = ((bytes[0] & 0xff) << 24) |\n                 ((bytes[1] & 0xff) << 16) |\n                 ((bytes[2] & 0xff) <<  8) |\n                  (bytes[3] & 0xff);\n    return result;\n}\n"");
  this.autoProxyScript.append(""function isInNet(ipaddr, pattern, maskstr) {\n    var ipPattern = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\n    var test = ipaddr.match(ipPattern);\n    if (test == null) {\n        ipaddr = dnsResolve(ipaddr);\n        if (ipaddr == null)\n            return false;\n    } else if ((test[1] > 255) || (test[2] > 255) || \n               (test[3] > 255) || (test[4] > 255) ) {\n        return false;\n    }\n    var host = convert_addr(ipaddr);\n    var pat  = convert_addr(pattern);\n    var mask = convert_addr(maskstr);\n    return ((host & mask) == (pat & mask));\n    \n}\n"");
  this.autoProxyScript.append(""function dnsResolve(host){\n return String(obj.dnsResolve(host));\n }"");
  this.autoProxyScript.append(""function isResolvable(host){\nreturn (dnsResolve(host) != ''); }"");
  this.autoProxyScript.append(""function localHostOrDomainIs(host, hostdom){\nreturn shExpMatch(hostdom, host + '*'); }"");
  this.autoProxyScript.append(""function dnsDomainLevels(host){\nvar s = host + '';\nfor (var i=0, j=0; i < s.length; i++)\nif (s.charAt(i) == '.')\nj++;\nreturn j; }"");
  this.autoProxyScript.append(""function myIpAddress(){\nreturn '"");
  try {
    InetAddress localInetAddress=InetAddress.getLocalHost();
    this.autoProxyScript.append(localInetAddress.getHostAddress());
  }
 catch (  Throwable localThrowable) {
    localThrowable.printStackTrace();
    this.autoProxyScript.append(""127.0.0.1"");
  }
  this.autoProxyScript.append(""'; }"");
  this.autoProxyScript.append(""function shExpMatch(str, shexp){ \n if (typeof str != 'string' || typeof shexp != 'string') return false; \n if (shexp == '*') return true; \n if (str == '' && shexp == '') return true; \n str = str.toLowerCase();\n shexp = shexp.toLowerCase();\n var index = shexp.indexOf('*');\n if (index == -1) { return (str == shexp); } \n else if (index == 0) { \n for (var i=0; i <= str.length; i++) { \n if (shExpMatch(str.substring(i), shexp.substring(1))) return true; \n } return false; } \nelse { \nvar sub = null, sub2 = null; \nsub = shexp.substring(0, index);\nif (index <= str.length) sub2 = str.substring(0, index); \nif (sub != '' && sub2 != '' && sub == sub2) { \nreturn shExpMatch(str.substring(index), shexp.substring(index)); }\nelse { return false; }\n} }"");
  this.autoProxyScript.append(""function _dateRange(day1, month1, year1, day2, month2, year2, gmt){\nif (typeof day1 != 'number' || day1 <= 0 || typeof month1 != 'string' || typeof year1 != 'number' || year1 <= 0\n || typeof day2 != 'number' || day2 <= 0 || typeof month2 != 'string' || typeof year2 != 'number' || year2 <= 0\n || typeof gmt != 'boolean') return false; \nvar m1 = -1, m2 = -1;\nfor (var i=0; i < _mon.length; i++){\nif (_mon[i] == month1)\nm1 = i;\nif (_mon[i] == month2)\nm2 = i;\n}\nvar cur = new Date();\nvar d1 = new Date(year1, m1, day1, 0, 0, 0);\nvar d2 = new Date(year2, m2, day2, 23, 59, 59);\nif (gmt == true)\ncur = new Date(cur.getTime() - cur.getTimezoneOffset() * 60 * 1000);\nreturn ((d1.getTime() <= cur.getTime()) && (cur.getTime() <= d2.getTime()));\n}\nfunction dateRange(p1, p2, p3, p4, p5, p6, p7){\nvar cur = new Date();\nif (typeof p1 == 'undefined')\nreturn false;\nelse if (typeof p2 == 'undefined' || _isGmt(p2))\n{\nif ((typeof p1) == 'string')\nreturn _dateRange(1, p1, cur.getFullYear(), 31, p1, cur.getFullYear(), _isGmt(p2));\nelse if (typeof p1 == 'number' && p1 > 31)\nreturn _dateRange(1, 'JAN', p1, 31, 'DEC', p1, _isGmt(p2));\nelse {\nfor (var i=0; i < _mon.length; i++)\nif (_dateRange(p1, _mon[i], cur.getFullYear(), p1, _mon[i], cur.getFullYear(), _isGmt(p2)))\n return true;\nreturn false;\n}\n}\nelse if (typeof p3 == 'undefined' || _isGmt(p3))\n{\nif ((typeof p1) == 'string')\nreturn _dateRange(1, p1, cur.getFullYear(), 31, p2, cur.getFullYear(), _isGmt(p3));\nelse if (typeof p1 == 'number' && typeof p2 == 'number' && (p1 > 31 || p2 > 31))\nreturn _dateRange(1, 'JAN', p1, 31, 'DEC', p2, _isGmt(p3));\nelse \n{\nif ((typeof p2) == 'string')\n{\nreturn _dateRange(p1, p2, cur.getFullYear(), p1, p2, cur.getFullYear(), _isGmt(p3));\n}\nelse \n{\nfor (var i=0; i < _mon.length; i++)\nif (_dateRange(p1, _mon[i], cur.getFullYear(), p2, _mon[i], cur.getFullYear(), _isGmt(p3)))\nreturn true;\nreturn false;\n}\n}\n}\nelse if (typeof p4 == 'undefined' || _isGmt(p4))\nreturn _dateRange(p1, p2, p3, p1, p2, p3, _isGmt(p4));\nelse if (typeof p5 == 'undefined' || _isGmt(p5))\n{\nif (typeof p2 == 'number')\nreturn _dateRange(1, p1, p2, 31, p3, p4, _isGmt(p5));\nelse \nreturn _dateRange(p1, p2, cur.getFullYear(), p3, p4, cur.getFullYear(), _isGmt(p5))\n}\nelse if (typeof p6 == 'undefined')\nreturn false;\nelse \nreturn _dateRange(p1, p2, p3, p4, p5, p6, _isGmt(p7));\n}"");
  this.autoProxyScript.append(""function timeRange(p1, p2, p3, p4, p5, p6, p7) {\nif (typeof p1 == 'undefined')\nreturn false;\nelse if (typeof p2 == 'undefined' || _isGmt(p2))\nreturn _timeRange(p1, 0, 0, p1, 59, 59, _isGmt(p2));\nelse if (typeof p3 == 'undefined' || _isGmt(p3))\nreturn _timeRange(p1, 0, 0, p2, 0, 0, _isGmt(p3));\nelse if (typeof p4 == 'undefined')\nreturn false;\nelse if (typeof p5 == 'undefined' || _isGmt(p5))\nreturn _timeRange(p1, p2, 0, p3, p4, 0, _isGmt(p5));\nelse if (typeof p6 == 'undefined')\nreturn false;\nelse \nreturn _timeRange(p1, p2, p3, p4, p5, p6, _isGmt(p7));\n}\nfunction _timeRange(hour1, min1, sec1, hour2, min2, sec2, gmt) {\nif (typeof hour1 != 'number' || typeof min1 != 'number' || typeof sec1 != 'number' \n|| hour1 < 0 || min1 < 0 || sec1 < 0 \n|| typeof hour2 != 'number' || typeof min2 != 'number' || typeof sec2 != 'number' \n|| hour2 < 0 || min2 < 0 || sec2 < 0 \n|| typeof gmt != 'boolean')  return false; \nvar cur = new Date();\nvar d1 = new Date();\nvar d2 = new Date();\nd1.setHours(hour1);\nd1.setMinutes(min1);\nd1.setSeconds(sec1);\nd2.setHours(hour2);\nd2.setMinutes(min2);\nd2.setSeconds(sec2);\nif (gmt == true)\ncur = new Date(cur.getTime() - cur.getTimezoneOffset() * 60 * 1000);\nreturn ((d1.getTime() <= cur.getTime()) && (cur.getTime() <= d2.getTime()));\n}"");
  this.autoProxyScript.append(""function weekdayRange(wd1, wd2, gmt){\nif (typeof wd1 == 'undefined') \nreturn false;\nelse if (typeof wd2 == 'undefined' || _isGmt(wd2)) \nreturn _weekdayRange(wd1, wd1, _isGmt(wd2)); \nelse \nreturn _weekdayRange(wd1, wd2, _isGmt(gmt)); }\nfunction _weekdayRange(wd1, wd2, gmt) {\nif (typeof wd1 != 'string' || typeof wd2 != 'string' || typeof gmt != 'boolean') return false; \nvar w1 = -1, w2 = -1;\nfor (var i=0; i < _day.length; i++) {\nif (_day[i] == wd1)\nw1 = i;\nif (_day[i] == wd2)\nw2 = i; }\nvar cur = new Date();\nif (gmt == true)\ncur = new Date(cur.getTime() - cur.getTimezoneOffset() * 60 * 1000);\nvar w3 = cur.getDay();\nif (w1 > w2)\nw2 = w2 + 7;\nif (w1 > w3)\nw3 = w3 + 7;\nreturn (w1 <= w3 && w3 <= w2); }"");
  this.autoProxyScript.append("" function alert() {} "");
  Logger.log(""Executing builtin PAC functions"");
  engine.eval(this.autoProxyScript.toString());
  ScriptEngineFactory sef=engine.getFactory();
  System.out.println(sef.getMethodCallSyntax(""obj"",""dnsResolve"",""string""));
  engine.eval(""obj.dnsResolve('')"");
  Logger.log(""Done executing builtin PAC functions"");
}
"
3408,dnsResolve(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\AutoProxyHandler.java,xdm,6,12,9,4,0.2778,0.1389,0,3,2,"public String dnsResolve(String paramString){
  String str="""";
  try {
    str=InetAddress.getByName(paramString).getHostAddress();
  }
 catch (  UnknownHostException localUnknownHostException) {
    localUnknownHostException.printStackTrace();
  }
  return str;
}
"
3413,"read(byte[],int,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\FixedRangeInputStream.java,xdm,12,40,14,4,0.2361,0.1968,0,1,5,"@Override public int read() throws IOException {
  if (rem == 0) {
    return -1;
  }
  int x=baseStream.read();
  if (x == -1) {
    if (rem > 0) {
      throw new IOException(""Unexpected eof"");
    }
 else     return -1;
  }
  if (rem > 0) {
    rem-=x;
  }
  return x;
}
"
3427,"putSocket(Socket,String,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\KeepAliveConnectionCache.java,xdm,8,13,0,3,0.25,0.2593,0.2,4,1,"public synchronized void putSocket(Socket socket,String host,int port){
  KeepAliveInfo info=new KeepAliveInfo();
  info.setLastUsed(System.currentTimeMillis());
  info.setHost(host);
  info.setPort(port);
  info.setSocket(socket);
  socketList.add(info);
}
"
3429,scavengeCache(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\KeepAliveConnectionCache.java,xdm,17,111,86,5,0.1497,0.0788,0.5,8,6,"private void scavengeCache(){
  ArrayList<Socket> sockets2Close=new ArrayList<Socket>();
synchronized (_this) {
    for (int i=0; i < socketList.size(); i++) {
      KeepAliveInfo info=socketList.get(i);
      long now=System.currentTimeMillis();
      if (now - info.getLastUsed() >= MAX_KEEP_ALIVE_INT) {
        socketList.remove(i);
        sockets2Close.add(info.getSocket());
      }
    }
  }
  for (int i=0; i < socketList.size(); i++) {
    KeepAliveInfo info=socketList.get(i);
    long now=System.currentTimeMillis();
    if (now - info.getLastUsed() >= MAX_KEEP_ALIVE_INT) {
      socketList.remove(i);
      try {
        info.getSocket().close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}
"
3430,run(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\KeepAliveConnectionCache.java,xdm,10,39,33,6,0.2,0.0694,0,3,4,"@Override public void run(){
  while (!stop) {
    long lastrun=System.currentTimeMillis();
    scavengeCache();
    long now=System.currentTimeMillis();
    if (now - lastrun < MAX_KEEP_ALIVE_INT) {
      try {
        Thread.sleep(MAX_KEEP_ALIVE_INT - (now - lastrun));
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
}
"
3442,parse(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\ParsedURL.java,xdm,18,71,0,4,0.1869,0.1902,1,5,5,"public static ParsedURL parse(String urlString){
  try {
    URL url=new URL(urlString);
    ParsedURL parsedURL=new ParsedURL();
    parsedURL._url=urlString;
    parsedURL.host=url.getHost();
    parsedURL.port=url.getPort();
    if (parsedURL.port < 0) {
      parsedURL.port=url.getDefaultPort();
    }
    parsedURL.protocol=url.getProtocol();
    parsedURL.pathAndQuery=url.getPath();
    if (StringUtils.isNullOrEmptyOrBlank(parsedURL.pathAndQuery)) {
      parsedURL.pathAndQuery=""/"";
    }
    String query=url.getQuery();
    if (!StringUtils.isNullOrEmptyOrBlank(query)) {
      parsedURL.pathAndQuery+=""?"" + query;
    }
    return parsedURL;
  }
 catch (  Exception e) {
    return null;
  }
}
"
3449,"ProxyInfo(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\ProxyInfo.java,xdm,20,71,0,3,0.21,0.2809,0,8,1,"public ProxyInfo(String paramString1,int paramInt1,String paramString2,int paramInt2){
  this.proxy=paramString1;
  this.port=paramInt1;
  this.socksProxy=paramString2;
  this.socksPort=paramInt2;
}
"
3458,toString(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\ProxyInfo.java,xdm,6,13,11,4,0.25,0.0714,0,6,3,"public String toString(){
  if (this.proxy != null) {
    return this.proxy + "":"" + this.port;
  }
  if (this.socksProxy != null) {
    return this.socksProxy + "":"" + this.socksPort;
  }
  return ""DIRECT"";
}
"
3460,resolve(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\ProxyResolver.java,xdm,21,143,76,3,0.1571,0.1714,0.230769231,8,13,"public static WebProxy resolve(String url){
  Config config=Config.getInstance();
  int proxyMode=config.getProxyMode();
  if (proxyMode == 1) {
    try {
      String pacUrl=config.getProxyPac();
      AutoProxyHandler pacHandler=AutoProxyHandler.getInstance();
      String pacUrl2=pacHandler.getPacUrl();
      if (pacUrl2 == null || pacUrl2.compareTo(pacUrl) != 0) {
        pacHandler.setPacUrl(pacUrl);
      }
      return pacHandler.getProxyForUrl(url);
    }
 catch (    Exception e) {
      return null;
    }
  }
  if (proxyMode == 2) {
    if (config.getProxyHost() == null || config.getProxyHost().length() < 1) {
      return null;
    }
    if (config.getProxyPort() < 1) {
      return null;
    }
    return new WebProxy(config.getProxyHost(),config.getProxyPort());
  }
  if (proxyMode == 3) {
    if (config.getSocksHost() == null || config.getSocksHost().length() < 1) {
      return null;
    }
    if (config.getSocksPort() < 1) {
      return null;
    }
    WebProxy wp=new WebProxy(config.getSocksHost(),config.getSocksPort());
    wp.setSocks(true);
    return wp;
  }
  return null;
}
"
3461,"wrapSSL(Socket,String,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\SocketFactory.java,xdm,7,17,13,4,0.2381,0.09,0.666666667,5,2,"public static SSLSocket wrapSSL(Socket socket,String host,int port) throws NetworkException {
  try {
    SSLSocket sock2=(SSLSocket)(HttpContext.getInstance().getSSLContext().getSocketFactory()).createSocket(socket,host,port,true);
    sock2.startHandshake();
    return sock2;
  }
 catch (  IOException e) {
    throw new NetworkException(""Https connection failed: "" + host + "":""+ port);
  }
}
"
3462,"createSocket(String,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\SocketFactory.java,xdm,11,33,11,4,0.1948,0.2265,0.666666667,4,2,"public static Socket createSocket(String host,int port) throws HostUnreachableException {
  try {
    Socket sock=new Socket();
    sock.setSoTimeout(Config.getInstance().getNetworkTimeout() * 1000);
    sock.setTcpNoDelay(true);
    sock.setReceiveBufferSize(tcpBufSize);
    sock.setSoLinger(false,0);
    sock.connect(new InetSocketAddress(host,port));
    return sock;
  }
 catch (  IOException e) {
    throw new HostUnreachableException(""Unable to connect to: "" + host + "":""+ port);
  }
}
"
3465,encode(byte[]),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\Base64.java,xdm,28,209,40,3,0.1709,0.1719,0,6,5,"public static String encode(byte[] bytes){
  int length=bytes.length;
  if (length == 0)   return """";
  StringBuffer buffer=new StringBuffer((int)Math.ceil((double)length / 3d) * 4);
  int remainder=length % 3;
  length-=remainder;
  int block;
  int i=0;
  while (i < length) {
    block=((bytes[i++] & 0xff) << 16) | ((bytes[i++] & 0xff) << 8) | (bytes[i++] & 0xff);
    buffer.append(ALPHABET.charAt(block >>> 18));
    buffer.append(ALPHABET.charAt((block >>> 12) & 0x3f));
    buffer.append(ALPHABET.charAt((block >>> 6) & 0x3f));
    buffer.append(ALPHABET.charAt(block & 0x3f));
  }
  if (remainder == 0)   return buffer.toString();
  if (remainder == 1) {
    block=(bytes[i] & 0xff) << 4;
    buffer.append(ALPHABET.charAt(block >>> 6));
    buffer.append(ALPHABET.charAt(block & 0x3f));
    buffer.append(""=="");
    return buffer.toString();
  }
  block=(((bytes[i++] & 0xff) << 8) | ((bytes[i]) & 0xff)) << 2;
  buffer.append(ALPHABET.charAt(block >>> 12));
  buffer.append(ALPHABET.charAt((block >>> 6) & 0x3f));
  buffer.append(ALPHABET.charAt(block & 0x3f));
  buffer.append(""="");
  return buffer.toString();
}
"
3466,decode(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\Base64.java,xdm,16,83,46,3,0.1771,0.096,0,8,7,"public static byte[] decode(String string){
  int length=string.length();
  if (length == 0)   return new byte[0];
  int pad=(string.charAt(length - 2) == '=') ? 2 : (string.charAt(length - 1) == '=') ? 1 : 0;
  int size=length * 3 / 4 - pad;
  byte[] buffer=new byte[size];
  int block;
  int i=0;
  int index=0;
  while (i < length) {
    block=(ALPHABET.indexOf(string.charAt(i++)) & 0xff) << 18 | (ALPHABET.indexOf(string.charAt(i++)) & 0xff) << 12 | (ALPHABET.indexOf(string.charAt(i++)) & 0xff) << 6 | (ALPHABET.indexOf(string.charAt(i++)) & 0xff);
    buffer[index++]=(byte)(block >>> 16);
    if (index < size)     buffer[index++]=(byte)((block >>> 8) & 0xff);
    if (index < size)     buffer[index++]=(byte)(block & 0xff);
  }
  return buffer;
}
"
3467,launchFirefox(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\BrowserLauncher.java,xdm,13,66,54,2,0.1538,0.1204,0.666666667,6,7,"public static boolean launchFirefox(String args){
  int os=XDMUtils.detectOS();
  if (os == XDMUtils.WINDOWS) {
    File[] ffPaths={new File(System.getenv(""PROGRAMFILES""),""Mozilla Firefox\\firefox.exe""),new File(System.getenv(""PROGRAMFILES(X86)""),""Mozilla Firefox\\firefox.exe"")};
    for (int i=0; i < ffPaths.length; i++) {
      System.out.println(ffPaths[i]);
      if (ffPaths[i].exists()) {
        return XDMUtils.exec(""\"""" + ffPaths[i] + ""\"" ""+ args);
      }
    }
  }
  if (os == XDMUtils.MAC) {
    File[] ffPaths={new File(""/Applications/Firefox.app"")};
    for (int i=0; i < ffPaths.length; i++) {
      if (ffPaths[i].exists()) {
        return MacUtils.launchApp(ffPaths[i].getAbsolutePath(),args);
      }
    }
  }
  return false;
}
"
3468,launchChrome(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\BrowserLauncher.java,xdm,13,66,54,3,0.1538,0.1204,0.666666667,6,7,"public static boolean launchChrome(String args){
  int os=XDMUtils.detectOS();
  if (os == XDMUtils.WINDOWS) {
    File[] ffPaths={new File(System.getenv(""PROGRAMFILES""),""Google\\Chrome\\Application\\chrome.exe""),new File(System.getenv(""PROGRAMFILES(X86)""),""Google\\Chrome\\Application\\chrome.exe""),new File(System.getenv(""LOCALAPPDATA""),""Google\\Chrome\\Application\\chrome.exe"")};
    for (int i=0; i < ffPaths.length; i++) {
      if (ffPaths[i].exists()) {
        return XDMUtils.exec(""\"""" + ffPaths[i] + ""\"" ""+ args);
      }
    }
  }
  if (os == XDMUtils.MAC) {
    File[] ffPaths={new File(""/Applications/Google Chrome.app"")};
    for (int i=0; i < ffPaths.length; i++) {
      if (ffPaths[i].exists()) {
        return MacUtils.launchApp(ffPaths[i].getAbsolutePath(),args);
      }
    }
  }
  return false;
}
"
3474,addTimePart(long),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\DateTimeUtils.java,xdm,10,23,1,3,0.3333,0.3598,0,2,2,"public static Date addTimePart(long sec){
  if (sec < 0) {
    return null;
  }
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.HOUR_OF_DAY,0);
  cal.set(Calendar.MINUTE,0);
  cal.set(Calendar.SECOND,0);
  cal.set(Calendar.MILLISECOND,0);
  cal.add(Calendar.SECOND,(int)sec);
  return cal.getTime();
}
"
3477,FFmpegDownloader(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\FFmpegDownloader.java,xdm,12,50,34,5,0.2292,0.2462,0.333333333,0,6,"public FFmpegDownloader(){
  if (XDMUtils.detectOS() == XDMUtils.WINDOWS) {
    if (XDMUtils.below7()) {
      url+=""xp.zip.xz"";
    }
 else {
      url+=""win.zip.xz"";
    }
  }
 else   if (XDMUtils.detectOS() == XDMUtils.MAC) {
    url+=""mac.zip.xz"";
  }
 else   if (XDMUtils.detectOS() == XDMUtils.LINUX) {
    if (XDMUtils.getOsArch() == 32) {
      url+=""linux86.zip.xz"";
    }
 else {
      url+=""linux64.zip.xz"";
    }
  }
  tmpFile=UUID.randomUUID().toString();
}
"
3478,start(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\FFmpegDownloader.java,xdm,10,33,21,3,0.2,0.0782,0.666666667,1,1,"public void start(){
  HttpMetadata metadata=new HttpMetadata();
  metadata.setUrl(url);
  System.out.println(url);
  d=new HttpDownloader(metadata.getId(),Config.getInstance().getTemporaryFolder(),metadata);
  d.registerListener(this);
  d.start();
  wnd=new DownloadWindow(metadata.getId(),this);
  wnd.setVisible(true);
}
"
3488,deleteTmpFiles(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\FFmpegDownloader.java,xdm,15,70,35,4,0.225,0.1322,0.5,6,4,"private void deleteTmpFiles(String id){
  Logger.log(""Deleting metadata for "" + id);
  File mf=new File(Config.getInstance().getMetadataFolder(),id);
  boolean deleted=mf.delete();
  Logger.log(""Deleted manifest "" + id + "" ""+ deleted);
  File df=new File(Config.getInstance().getTemporaryFolder(),id);
  File[] files=df.listFiles();
  if (files != null && files.length > 0) {
    for (    File f : files) {
      deleted=f.delete();
      Logger.log(""Deleted tmp file "" + id + "" ""+ deleted);
    }
  }
  deleted=df.delete();
  Logger.log(""Deleted tmp folder "" + id + "" ""+ deleted);
}
"
3489,extractFFmpeg(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\FFmpegDownloader.java,xdm,28,329,280,5,0.0873,0.0626,0.6,10,8,"private void extractFFmpeg(){
  ZipInputStream zipIn=null;
  OutputStream out=null;
  wnd2=new FFmpegExtractorWnd(this);
  wnd2.setVisible(true);
  try {
    File input=new File(Config.getInstance().getTemporaryFolder(),tmpFile);
    zipIn=null;
    while (true) {
      ZipEntry ent=zipIn.getNextEntry();
      if (ent == null)       break;
      String name=ent.getName();
      File outFile=new File(Config.getInstance().getDataFolder(),name);
      out=new FileOutputStream(outFile);
      byte[] buf=new byte[8192];
      while (true) {
        int x=zipIn.read(buf);
        if (x == -1)         break;
        out.write(buf,0,x);
      }
      out.close();
      out=null;
      outFile.setExecutable(true);
    }
    input.delete();
    wnd2.dispose();
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    try {
      zipIn.close();
      if (out != null)       out.close();
    }
 catch (    Exception e) {
      Logger.log(e);
    }
  }
}
"
3491,formatDate(long),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\FormatUtilities.java,xdm,6,11,7,3,0.3333,0.1667,0,2,2,"public static String formatDate(long date){
  if (_format == null) {
    _format=new SimpleDateFormat(""yyyy-MM-dd"");
  }
  Date dt=new Date(date);
  return _format.format(dt);
}
"
3492,formatSize(double),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\FormatUtilities.java,xdm,7,6,0,2,0.5,0.3333,0,1,4,"public static String formatSize(double length){
  if (length < 0)   return ""---"";
  if (length > MB) {
    return String.format(""%.1f MB"",(float)length / MB);
  }
 else   if (length > KB) {
    return String.format(""%.1f KB"",(float)length / KB);
  }
 else {
    return String.format(""%d B"",(int)length);
  }
}
"
3495,hms(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\FormatUtilities.java,xdm,8,18,8,3,0.2917,0.1198,0,4,1,"public static String hms(int sec){
  int hrs=0, min=0;
  hrs=sec / 3600;
  min=(sec % 3600) / 60;
  sec=sec % 60;
  String str=String.format(""%02d:%02d:%02d"",hrs,min,sec);
  return str;
}
"
3496,parseHttpDate(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\HttpDateParser.java,xdm,9,28,20,4,0.2037,0.119,1,2,4,"public static Date parseHttpDate(String lastModified){
  if (StringUtils.isNullOrEmptyOrBlank(lastModified)) {
    return null;
  }
  if (fmt == null) {
    fmt=new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss z"",Locale.US);
    fmt.setTimeZone(TimeZone.getTimeZone(""GMT""));
  }
  try {
    return fmt.parse(lastModified);
  }
 catch (  ParseException e) {
    Logger.log(e);
  }
  return null;
}
"
3497,initShutdown(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\LinuxUtils.java,xdm,9,32,28,5,0.1667,0.0452,1,5,4,"public static void initShutdown(){
  for (int i=0; i < shutdownCmds.length; i++) {
    String cmd=shutdownCmds[0];
    try {
      Process proc=Runtime.getRuntime().exec(cmd);
      int ret=proc.waitFor();
      if (ret == 0)       break;
    }
 catch (    Exception e) {
      Logger.log(e);
    }
  }
}
"
3498,open(File),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\LinuxUtils.java,xdm,9,31,26,5,0.2222,0.0909,1,3,3,"public static void open(final File f) throws FileNotFoundException {
  if (!f.exists()) {
    throw new FileNotFoundException();
  }
  try {
    ProcessBuilder pb=new ProcessBuilder();
    pb.command(""xdg-open"",f.getAbsolutePath());
    pb.start();
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3500,addToStartup(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\LinuxUtils.java,xdm,13,65,52,5,0.1648,0.0985,1,5,4,"public static void addToStartup(){
  File dir=new File(System.getProperty(""user.home""),"".config/autostart"");
  dir.mkdirs();
  File f=new File(dir,""xdman.desktop"");
  FileOutputStream fs=null;
  try {
    fs=new FileOutputStream(f);
    fs.write(getDesktopFileString().getBytes());
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    try {
      if (fs != null)       fs.close();
    }
 catch (    Exception e2) {
    }
  }
  f.setExecutable(true);
}
"
3501,isAlreadyAutoStart(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\LinuxUtils.java,xdm,16,102,84,5,0.1307,0.0637,1,8,6,"public static boolean isAlreadyAutoStart(){
  File f=new File(System.getProperty(""user.home""),"".config/autostart/xdman.desktop"");
  if (!f.exists())   return false;
  FileInputStream in=null;
  byte[] buf=new byte[(int)f.length()];
  try {
    in=new FileInputStream(f);
    if (in.read(buf) != f.length()) {
      return false;
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    Exception e2) {
    }
  }
  String str=new String(buf);
  String s1=getProperPath(System.getProperty(""java.home""));
  String s2=XDMUtils.getJarFile().getAbsolutePath();
  return str.contains(s1) && str.contains(s2);
}
"
3505,browseURL(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\LinuxUtils.java,xdm,7,17,13,4,0.25,0.125,1,3,2,"public static void browseURL(final String url){
  try {
    ProcessBuilder pb=new ProcessBuilder();
    pb.command(""xdg-open"",url);
    pb.start();
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3508,log(Object),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\Logger.java,xdm,6,11,7,3,0.4167,0.1786,0,1,2,"public static void log(Object obj){
  if (obj instanceof Throwable) {
    getErrorStream().print(""[ "" + Thread.currentThread().getName() + "" ] "");
    ((Throwable)obj).printStackTrace(getErrorStream());
  }
 else {
    getLogStream().println(""[ "" + Thread.currentThread().getName() + "" ] ""+ obj);
  }
}
"
3509,open(File),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\MacUtils.java,xdm,9,31,26,5,0.2222,0.0909,1,3,4,"public static void open(final File f) throws FileNotFoundException {
  if (!f.exists()) {
    throw new FileNotFoundException();
  }
  try {
    ProcessBuilder pb=new ProcessBuilder();
    pb.command(""open"",f.getAbsolutePath());
    if (pb.start().waitFor() != 0) {
      throw new FileNotFoundException();
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3510,"openFolder(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\MacUtils.java,xdm,12,55,44,5,0.1806,0.0833,1,5,4,"public static void openFolder(String folder,String file) throws FileNotFoundException {
  File f=new File(folder,file);
  if (!f.exists()) {
    throw new FileNotFoundException();
  }
  try {
    ProcessBuilder pb=new ProcessBuilder();
    Logger.log(""Opening folder: "" + f.getAbsolutePath());
    pb.command(""open"",""-R"",f.getAbsolutePath());
    if (pb.start().waitFor() != 0) {
      throw new FileNotFoundException();
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3511,"launchApp(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\MacUtils.java,xdm,9,32,28,6,0.1778,0.0722,1,4,3,"public static boolean launchApp(String app,String args){
  try {
    ProcessBuilder pb=new ProcessBuilder();
    pb.command(""open"",""-n"",""-a"",app,""--args"",args);
    if (pb.start().waitFor() != 0) {
      throw new FileNotFoundException();
    }
    return true;
  }
 catch (  Exception e) {
    Logger.log(e);
    return false;
  }
}
"
3513,addToStartup(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\MacUtils.java,xdm,13,65,52,5,0.1648,0.0985,1,5,4,"public static void addToStartup(){
  File dir=new File(System.getProperty(""user.home""),""Library/LaunchAgents"");
  dir.mkdirs();
  File f=new File(dir,""org.sdg.xdman.plist"");
  FileOutputStream fs=null;
  try {
    fs=new FileOutputStream(f);
    fs.write(getStartupPlist().getBytes());
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    try {
      if (fs != null)       fs.close();
    }
 catch (    Exception e2) {
    }
  }
  f.setExecutable(true);
}
"
3514,isAlreadyAutoStart(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\MacUtils.java,xdm,16,102,84,5,0.1307,0.0637,1,8,6,"public static boolean isAlreadyAutoStart(){
  File f=new File(System.getProperty(""user.home""),""Library/LaunchAgents/org.sdg.xdman.plist"");
  if (!f.exists())   return false;
  FileInputStream in=null;
  byte[] buf=new byte[(int)f.length()];
  try {
    in=new FileInputStream(f);
    if (in.read(buf) != f.length()) {
      return false;
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    Exception e2) {
    }
  }
  String str=new String(buf);
  String s1=getProperPath(System.getProperty(""java.home""));
  String s2=XDMUtils.getJarFile().getAbsolutePath();
  return str.contains(s1) && str.contains(s2);
}
"
3518,browseURL(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\MacUtils.java,xdm,7,17,13,4,0.25,0.125,1,3,2,"public static void browseURL(final String url){
  try {
    ProcessBuilder pb=new ProcessBuilder();
    pb.command(""open"",url);
    pb.start();
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3520,readLine(InputStream),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\NetUtils.java,xdm,7,13,5,3,0.381,0.2083,0,3,5,"public static final String readLine(InputStream in) throws IOException {
  StringBuffer buf=new StringBuffer();
  while (true) {
    int x=in.read();
    if (x == -1)     throw new IOException(""Unexpected EOF while reading header line"");
    if (x == '\n')     return buf.toString();
    if (x != '\r')     buf.append((char)x);
  }
}
"
3525,"skipRemainingStream(InputStream,long)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\NetUtils.java,xdm,11,38,21,3,0.2338,0.1389,0,6,7,"public static void skipRemainingStream(InputStream inStream,long length) throws IOException {
  byte buf[]=new byte[8192];
  if (length > 0) {
    while (length > 0) {
      int r=(int)(length > buf.length ? buf.length : length);
      int x=inStream.read(buf,0,r);
      if (x == -1)       break;
      length-=x;
    }
  }
 else {
    while (true) {
      int x=inStream.read(buf);
      if (x == -1)       break;
    }
  }
}
"
3528,"sendParam(Map<String,String>)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\ParamUtils.java,xdm,28,320,262,5,0.0893,0.0725,1,13,6,"public static void sendParam(Map<String,String> params){
  StringBuffer sb=new StringBuffer();
  Iterator<String> paramIter=params.keySet().iterator();
  while (paramIter.hasNext()) {
    String key=paramIter.next();
    String value=params.get(key);
    sb.append(key + "":"" + value+ ""\n"");
  }
  InetAddress addr=InetAddress.getLoopbackAddress();
  StringBuffer reqBuf=new StringBuffer();
  reqBuf.append(""GET /cmd HTTP/1.1\r\n"");
  reqBuf.append(""Content-Length: "" + sb.length() + ""\r\n"");
  reqBuf.append(""Host: "" + addr.getHostName() + ""\r\n"");
  reqBuf.append(""Connection: close\r\n\r\n"");
  reqBuf.append(sb);
  String resp=null;
  Socket sock=null;
  try {
    sock=new Socket(InetAddress.getLoopbackAddress(),9614);
    InputStream in=sock.getInputStream();
    OutputStream out=sock.getOutputStream();
    out.write(reqBuf.toString().getBytes());
    resp=NetUtils.readLine(in);
    resp=resp.split("" "")[1];
  }
 catch (  Exception e) {
  }
 finally {
    if (sock != null) {
      try {
        sock.close();
      }
 catch (      Exception e2) {
      }
    }
  }
  if (!""200"".equals(resp)) {
    JOptionPane.showMessageDialog(null,""An older version of XDM is already running."");
  }
}
"
3535,isComponentUpdateAvailable(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\UpdateChecker.java,xdm,6,9,3,3,0.6667,0.4286,0,1,3,"private static int isComponentUpdateAvailable(){
  String componentVersion=getComponentVersion();
  System.out.println(""current component version: "" + componentVersion);
  if (componentVersion == null)   return -1;
  return isUpdateAvailable(false,componentVersion) ? 0 : 1;
}
"
3537,"isUpdateAvailable(boolean,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\UpdateChecker.java,xdm,12,49,32,3,0.1771,0.1374,0.6,6,5,"private static boolean isUpdateAvailable(boolean app,String version){
  JavaHttpClient client=null;
  try {
    client=new JavaHttpClient((app ? APP_UPDAT_URL : COMPONENTS_UPDATE_URL) + ""?ver="" + version);
    client.connect();
    int resp=client.getStatusCode();
    Logger.log(""manifest download response: "" + resp);
    if (resp == 200) {
      return true;
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    try {
      client.dispose();
    }
 catch (    Exception e) {
    }
  }
  return false;
}
"
3538,open(File),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\WinUtils.java,xdm,12,51,36,4,0.2167,0.1436,1,4,3,"public static void open(File f) throws FileNotFoundException {
  if (!f.exists()) {
    throw new FileNotFoundException();
  }
  try {
    ProcessBuilder builder=new ProcessBuilder();
    ArrayList<String> lst=new ArrayList<String>();
    lst.add(""rundll32"");
    lst.add(""url.dll,FileProtocolHandler"");
    lst.add(f.getAbsolutePath());
    builder.command(lst);
    builder.start();
  }
 catch (  IOException e) {
    Logger.log(e);
  }
}
"
3539,"openFolder(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\WinUtils.java,xdm,14,74,57,5,0.1633,0.1127,1,6,3,"public static void openFolder(String folder,String file) throws FileNotFoundException {
  try {
    File f=new File(folder,file);
    if (!f.exists()) {
      throw new FileNotFoundException();
    }
    ProcessBuilder builder=new ProcessBuilder();
    ArrayList<String> lst=new ArrayList<String>();
    lst.add(""explorer"");
    lst.add(""/select,"");
    lst.add(f.getAbsolutePath());
    builder.command(lst);
    builder.start();
  }
 catch (  IOException e) {
    Logger.log(e);
  }
}
"
3544,browseURL(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\WinUtils.java,xdm,11,41,27,4,0.2182,0.1636,1,4,2,"public static void browseURL(String url){
  try {
    ProcessBuilder builder=new ProcessBuilder();
    ArrayList<String> lst=new ArrayList<String>();
    lst.add(""rundll32"");
    lst.add(""url.dll,FileProtocolHandler"");
    lst.add(url);
    builder.command(lst);
    builder.start();
  }
 catch (  IOException e) {
    Logger.log(e);
  }
}
"
3545,decodeFileName(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,13,45,12,3,0.2692,0.2234,0,5,12,"public static String decodeFileName(String str){
  char ch[]=str.toCharArray();
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < ch.length; i++) {
    if (ch[i] == '/' || ch[i] == '\\' || ch[i] == '""' || ch[i] == '?' || ch[i] == '*' || ch[i] == '<' || ch[i] == '>' || ch[i] == ':')     continue;
    if (ch[i] == '%') {
      if (i + 2 < ch.length) {
        int c=Integer.parseInt(ch[i + 1] + """" + ch[i + 2],16);
        buf.append((char)c);
        i+=2;
        continue;
      }
    }
    buf.append(ch[i]);
  }
  return buf.toString();
}
"
3547,createSafeFileName(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,7,13,5,3,0.3571,0.1792,0,3,3,"private static String createSafeFileName(String str){
  String safe_name=str;
  for (int i=0; i < invalid_chars.length; i++) {
    if (safe_name.indexOf(invalid_chars[i]) != -1) {
      safe_name=safe_name.replace(invalid_chars[i],'_');
    }
  }
  return safe_name;
}
"
3548,validateURL(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,11,52,49,9,0.1169,0.0556,0,2,5,"public static boolean validateURL(String url){
  try {
    url=url.toLowerCase();
    if (url.startsWith(""http://"") || url.startsWith(""https://"") || url.startsWith(""ftp://"")) {
      new URL(url);
      return true;
    }
    return false;
  }
 catch (  Exception e) {
    return false;
  }
}
"
3549,findCategory(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,19,151,131,9,0.0965,0.0466,0,7,11,"public static int findCategory(String filename){
  String file=filename.toLowerCase();
  for (int i=0; i < doc.length; i++) {
    if (file.endsWith(doc[i])) {
      return XDMConstants.DOCUMENTS;
    }
  }
  for (int i=0; i < cmp.length; i++) {
    if (file.endsWith(cmp[i])) {
      return XDMConstants.COMPRESSED;
    }
  }
  for (int i=0; i < music.length; i++) {
    if (file.endsWith(music[i])) {
      return XDMConstants.MUSIC;
    }
  }
  for (int i=0; i < prog.length; i++) {
    if (file.endsWith(prog[i])) {
      return XDMConstants.PROGRAMS;
    }
  }
  for (int i=0; i < vid.length; i++) {
    if (file.endsWith(vid[i])) {
      return XDMConstants.VIDEO;
    }
  }
  return XDMConstants.OTHER;
}
"
3550,appendArray2Str(String[]),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,10,35,25,4,0.25,0.178,0,4,3,"public static String appendArray2Str(String[] arr){
  boolean first=true;
  StringBuffer buf=new StringBuffer();
  for (  String s : arr) {
    if (!first) {
      buf.append("","");
    }
    buf.append(s);
    first=false;
  }
  return buf.toString();
}
"
3551,appendStr2Array(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,10,30,15,3,0.25,0.1307,0,5,3,"public static String[] appendStr2Array(String str){
  String[] arr=str.split("","");
  ArrayList<String> arrList=new ArrayList<String>();
  for (  String s : arr) {
    String txt=s.trim();
    if (txt.length() > 0) {
      arrList.add(txt);
    }
  }
  arr=new String[arrList.size()];
  return arrList.toArray(arr);
}
"
3554,"copyStream(InputStream,OutputStream,long)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,14,70,49,5,0.1494,0.089,0,7,8,"public static void copyStream(InputStream instream,OutputStream outstream,long size) throws Exception {
  byte[] b=new byte[8192];
  long rem=size;
  while (true) {
    int bs=(int)(size > 0 ? (rem > b.length ? b.length : rem) : b.length);
    int x=instream.read(b,0,bs);
    if (x == -1) {
      if (size > 0) {
        throw new EOFException(""Unexpected EOF"");
      }
 else {
        break;
      }
    }
    outstream.write(b,0,x);
    rem-=x;
    if (size > 0) {
      if (rem <= 0)       break;
    }
  }
}
"
3555,detectOS(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,7,20,19,6,0.1786,0.05,0,1,7,"public static final int detectOS(){
  String os=System.getProperty(""os.name"").toLowerCase(Locale.ENGLISH);
  if (os.contains(""mac"") || os.contains(""darwin"") || os.contains(""os x"")|| os.contains(""os x"")) {
    return MAC;
  }
 else   if (os.contains(""linux"")) {
    return LINUX;
  }
 else   if (os.contains(""windows"")) {
    return WINDOWS;
  }
 else {
    return -1;
  }
}
"
3557,"openFile(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,12,56,46,4,0.1167,0.05,1,4,4,"public static void openFile(String file,String folder) throws Exception {
  int os=detectOS();
  File f=new File(folder,file);
switch (os) {
case WINDOWS:
    WinUtils.open(f);
  break;
case LINUX:
LinuxUtils.open(f);
break;
case MAC:
MacUtils.open(f);
break;
default :
Desktop.getDesktop().open(f);
}
}
"
3558,"openFolder(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,13,70,62,4,0.1189,0.0347,1,5,4,"public static void openFolder(String file,String folder) throws Exception {
  int os=detectOS();
switch (os) {
case WINDOWS:
    WinUtils.openFolder(folder,file);
  break;
case LINUX:
File f=new File(folder);
LinuxUtils.open(f);
break;
case MAC:
MacUtils.openFolder(folder,file);
break;
default :
File ff=new File(folder);
Desktop.getDesktop().open(ff);
}
}
"
3560,exec(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,6,12,9,3,0.2917,0.0833,1,2,2,"public static boolean exec(String args){
  try {
    Logger.log(""Launching: "" + args);
    Runtime.getRuntime().exec(args);
  }
 catch (  IOException e) {
    Logger.log(e);
    return false;
  }
  return true;
}
"
3562,keepAwakePing(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,10,41,37,7,0.15,0.0455,1,2,5,"public static void keepAwakePing(){
  try {
    int os=detectOS();
    if (os == LINUX) {
      LinuxUtils.keepAwakePing();
    }
 else     if (os == WINDOWS) {
      WinUtils.keepAwakePing();
    }
 else     if (os == MAC) {
      MacUtils.keepAwakePing();
    }
  }
 catch (  Throwable e) {
    Logger.log(e);
  }
}
"
3563,isAlreadyAutoStart(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,10,41,37,7,0.15,0.0455,1,2,5,"public static boolean isAlreadyAutoStart(){
  try {
    int os=detectOS();
    if (os == LINUX) {
      return LinuxUtils.isAlreadyAutoStart();
    }
 else     if (os == WINDOWS) {
      return WinUtils.isAlreadyAutoStart();
    }
 else     if (os == MAC) {
      return MacUtils.isAlreadyAutoStart();
    }
    return false;
  }
 catch (  Throwable e) {
    Logger.log(e);
  }
  return false;
}
"
3564,addToStartup(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,10,41,37,7,0.15,0.0455,1,2,5,"public static void addToStartup(){
  try {
    int os=detectOS();
    if (os == LINUX) {
      LinuxUtils.addToStartup();
    }
 else     if (os == WINDOWS) {
      WinUtils.addToStartup();
    }
 else     if (os == MAC) {
      MacUtils.addToStartup();
    }
  }
 catch (  Throwable e) {
    Logger.log(e);
  }
}
"
3565,removeFromStartup(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,10,41,37,7,0.15,0.0455,1,2,5,"public static void removeFromStartup(){
  try {
    int os=detectOS();
    if (os == LINUX) {
      LinuxUtils.removeFromStartup();
    }
 else     if (os == WINDOWS) {
      WinUtils.removeFromStartup();
    }
 else     if (os == MAC) {
      MacUtils.removeFromStartup();
    }
  }
 catch (  Throwable e) {
    Logger.log(e);
  }
}
"
3569,browseURL(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\util\XDMUtils.java,xdm,8,22,16,4,0.2143,0.0926,1,2,4,"public static void browseURL(String url){
  int os=detectOS();
  if (os == WINDOWS) {
    WinUtils.browseURL(url);
  }
 else   if (os == LINUX) {
    LinuxUtils.browseURL(url);
  }
 else   if (os == MAC) {
    MacUtils.browseURL(url);
  }
}
"
3578,"createFormat(String,String,String,String,String,int,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\videoparser\YdlResponse.java,xdm,44,836,726,21,0.0653,0.0666,0,8,12,"public static String createFormat(String ext,String fmt1,String fmt2,String acodec,String vcodec,int width,int height){
  StringBuffer sb=new StringBuffer();
  ext=nvl(ext);
  if (ext.length() > 0) {
    sb.append(ext.toUpperCase());
  }
  if (width > 0 && height > 0) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(width + ""x"" + height);
  }
  acodec=nvl(acodec);
  if (acodec.contains(""none"")) {
    acodec="""";
  }
  vcodec=nvl(vcodec);
  if (vcodec.contains(""none"")) {
    vcodec="""";
  }
  if (acodec.length() > 0) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(acodec);
  }
  if (vcodec.length() > 0) {
    if (sb.length() > 0) {
      if (acodec.length() > 0) {
        sb.append(""+"");
      }
 else {
        sb.append("" "");
      }
    }
    sb.append(vcodec);
  }
  return sb.toString();
}
"
3581,start(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\videoparser\YoutubeDLHandler.java,xdm,30,401,367,10,0.0684,0.0368,1,10,5,"public void start(){
  try {
    ByteArrayOutputStream bout=new ByteArrayOutputStream(8192);
    List<String> args=new ArrayList<String>();
    args.add(ydlLocation);
    args.add(""--no-warnings"");
    args.add(""-J"");
    args.add(url);
    ProcessBuilder pb=new ProcessBuilder(args);
    pb.redirectErrorStream(true);
    proc=pb.start();
    InputStream in=proc.getInputStream();
    byte[] buf=new byte[8192];
    while (true) {
      int x=in.read(buf);
      if (x == -1)       break;
      bout.write(buf,0,x);
    }
    String json=new String(bout.toByteArray());
    System.out.println(""----json: "" + json);
    System.out.println(""----json end ----"");
    exitCode=proc.waitFor();
    if (exitCode == 0) {
      StringBuilder title=new StringBuilder();
      videos.addAll(YdlResponse.parse(new ByteArrayInputStream(bout.toByteArray())));
      this.title=title.toString();
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3589,NativeMethods(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\win32\NativeMethods.java,xdm,6,13,11,4,0.2778,0.1071,1,2,2,"private NativeMethods(){
  String dllPath=new File(XDMUtils.getJarFile().getParentFile(),""xdm_native.dll"").getAbsolutePath();
  try {
    System.load(dllPath);
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3596,"DashDownloader(String,String,DashMetadata)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,9,34,32,7,0.1313,0.0167,0.333333333,10,1,"public DashDownloader(String id,String folder,DashMetadata dm){
  this.id=id;
  this.folder=new File(folder,id).getAbsolutePath();
  this.length=-1;
  this.MAX_COUNT=Config.getInstance().getMaxSegments();
  this.MIN_CHUNK_SIZE=Config.getInstance().getMinSegmentSize();
  this.metadata=dm;
  this.eta=""---"";
}
"
3597,start(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,24,218,160,7,0.1042,0.1074,0.5,7,2,"public void start(){
  Logger.log(""creating folder "" + folder);
  new File(folder).mkdirs();
  this.lastDownloaded=downloaded;
  this.prevTime=System.currentTimeMillis();
  chunks=new ArrayList<Segment>();
  try {
    Segment c1=new SegmentImpl(this,folder);
    c1.setTag(""T1"");
    c1.setLength(-1);
    c1.setStartOffset(0);
    c1.setDownloaded(0);
    chunks.add(c1);
    Segment c2=new SegmentImpl(this,folder);
    c2.setTag(""T2"");
    c2.setLength(-1);
    c2.setStartOffset(0);
    c2.setDownloaded(0);
    chunks.add(c2);
    c1.download(this);
    c2.download(this);
  }
 catch (  IOException e) {
    this.errorCode=XDMConstants.RESUME_FAILED;
    this.listener.downloadFailed(id);
  }
}
"
3599,chunkInitiated(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,20,114,38,6,0.1857,0.2558,0.75,10,13,"@Override public synchronized void chunkInitiated(String id) throws IOException {
  if (stopFlag)   return;
  Segment c=getById(id);
  if (c == null) {
    Logger.log(id + "" is no longer valid chunk"");
  }
  if (isFirstChunk(c)) {
    super.getLastModifiedDate(c);
    if (c.getTag().equals(""T1"")) {
      this.len1=c.getLength();
    }
 else     if (c.getTag().equals(""T2"")) {
      this.len2=c.getLength();
    }
    saveState();
  }
  if (this.length < 1 && this.len1 > 0 && this.len2 > 0) {
    this.length=len1 + len2;
  }
  if (c.getTag().equals(""T1"") && this.len1 > 0) {
    createChunk((String)c.getTag());
  }
  if (c.getTag().equals(""T2"") && this.len2 > 0) {
    createChunk((String)c.getTag());
  }
}
"
3600,onComplete(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,29,354,302,9,0.1034,0.0701,0.4,7,5,"private synchronized boolean onComplete(String id) throws IOException {
  if (allFinished()) {
    finished=true;
    updateStatus();
    try {
      assembleFinished=false;
      initAssemble();
      assembleFinished=true;
      Logger.log(""********Download finished*********"");
      updateStatus();
      listener.downloadFinished(this.id);
    }
 catch (    Exception e) {
      if (!stopFlag) {
        Logger.log(e);
        this.errorCode=XDMConstants.ERR_ASM_FAILED;
        listener.downloadFailed(this.id);
      }
    }
    listener=null;
    return true;
  }
  Segment chunk=getById(id);
  Logger.log(""Complete: "" + chunk + "" ""+ chunk.getDownloaded()+ "" ""+ chunk.getLength());
  Segment nextNeedyChunk=findNextNeedyChunk(chunk);
  if (nextNeedyChunk != null) {
    Logger.log(""****************Needy chunk found!!!"");
    Logger.log(""Stopping: "" + nextNeedyChunk);
    nextNeedyChunk.stop();
    chunks.remove(nextNeedyChunk);
    nextNeedyChunk.dispose();
    mergeChunk(chunk,nextNeedyChunk);
    createChunk((String)chunk.getTag());
    return false;
  }
  createChunk((String)chunk.getTag());
  return true;
}
"
3602,chunkUpdated(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,18,133,113,9,0.125,0.0754,0.666666667,5,6,"@Override public void chunkUpdated(String id){
  if (stopFlag)   return;
  long now=System.currentTimeMillis();
  if (now - lastSaved > 5000) {
synchronized (this) {
      saveState();
    }
    lastSaved=now;
  }
  if (now - lastUpdated > 1000) {
    updateStatus();
    lastUpdated=now;
synchronized (this) {
      int activeCount=getActiveChunkCount();
      if (activeCount < MAX_COUNT) {
        int rem=MAX_COUNT - activeCount;
        try {
          retryFailedChunks(rem);
        }
 catch (        IOException e) {
          Logger.log(e);
        }
      }
    }
  }
}
"
3605,updateStatus(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,46,901,767,7,0.0708,0.0493,0.375,17,15,"private void updateStatus(){
  try {
    long now=System.currentTimeMillis();
    if (converting) {
      progress=this.convertPrg;
    }
 else     if (assembling) {
      long len=length > 0 ? length : downloaded;
      progress=(int)((totalAssembled * 100) / len);
    }
 else {
      long downloaded2=0;
      if (length > 0) {
        if (segDet == null) {
          segDet=new SegmentDetails();
        }
        if (segDet.getCapacity() < chunks.size()) {
          segDet.extend(chunks.size() - segDet.getCapacity());
        }
        segDet.setChunkCount(chunks.size());
      }
      downloadSpeed=0;
      for (int i=0; i < chunks.size(); i++) {
        Segment s=chunks.get(i);
        downloaded2+=s.getDownloaded();
        if (length > 0) {
          long off=0;
          if (s.getTag().equals(""T2"")) {
            off=len1;
          }
          SegmentInfo info=segDet.getChunkUpdates().get(i);
          info.setDownloaded(s.getDownloaded());
          info.setStart(s.getStartOffset() + off);
          info.setLength(s.getLength());
        }
        downloadSpeed+=s.getTransferRate();
      }
      this.downloaded=downloaded2;
      this.downloaded=downloaded2;
      if (length > 0) {
        progress=(int)((downloaded * 100) / length);
        long diff=downloaded - lastDownloaded;
        long timeSpend=now - prevTime;
        if (timeSpend > 0) {
          float rate=((float)diff / timeSpend) * 1000;
          if (rate > downloadSpeed) {
            downloadSpeed=rate;
          }
          this.eta=FormatUtilities.getETA(length - downloaded,rate);
          if (this.eta == null) {
            this.eta=""---"";
          }
          lastDownloaded=downloaded;
          prevTime=now;
        }
      }
    }
    listener.downloadUpdated(id);
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3606,"assemble(String,ArrayList<Segment>)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,47,991,901,13,0.0536,0.0413,0.75,14,18,"private void assemble(String file,ArrayList<Segment> list) throws IOException {
  InputStream in=null;
  OutputStream out=null;
  totalAssembled=0L;
  assembling=true;
  Logger.log(""Combining "" + file + "" ""+ list.size());
  try {
    if (stopFlag)     return;
    byte buf[]=new byte[8192 * 8];
    Logger.log(""assembling... "" + stopFlag);
    Collections.sort(list,new SegmentComparator());
    out=new FileOutputStream(new File(folder,file));
    for (int i=0; i < list.size(); i++) {
      Logger.log(""chunk "" + i + "" ""+ stopFlag);
      Segment c=list.get(i);
      in=new FileInputStream(new File(folder,c.getId()));
      long rem=c.getLength();
      while (true) {
        int x=(int)(rem > 0 ? (rem > buf.length ? buf.length : rem) : buf.length);
        int r=in.read(buf,0,x);
        if (stopFlag) {
          return;
        }
        if (r == -1) {
          if (length > 0) {
            in.close();
            out.close();
            throw new IllegalArgumentException(""Assemble EOF"");
          }
 else {
            break;
          }
        }
        out.write(buf,0,r);
        if (stopFlag) {
          return;
        }
        if (length > 0) {
          rem-=r;
          if (rem == 0)           break;
        }
        totalAssembled+=r;
        long now=System.currentTimeMillis();
        if (now - lastUpdated > 1000) {
          updateStatus();
          lastUpdated=now;
        }
      }
      in.close();
    }
    out.close();
  }
 catch (  Exception e) {
    Logger.log(e);
    throw new IOException(e);
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e2) {
      }
    }
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception e2) {
      }
    }
  }
}
"
3607,isFirstChunk(Segment),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,7,17,13,4,0.2857,0.175,1,3,3,"private boolean isFirstChunk(Segment s){
  int c=0;
  for (  Segment ss : chunks) {
    if (ss.getTag().equals(s.getTag())) {
      c++;
    }
  }
  return c == 1;
}
"
3608,stop(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,10,42,39,7,0.1571,0.0476,1,3,3,"@Override public void stop(){
  stopFlag=true;
  saveState();
  for (int i=0; i < chunks.size(); i++) {
    chunks.get(i).stop();
  }
  if (this.ffmpeg != null) {
    this.ffmpeg.stop();
  }
  listener.downloadStopped(id);
  listener=null;
}
"
3609,resume(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,38,631,559,13,0.0743,0.0596,0.571428571,13,18,"@Override public void resume(){
  try {
    stopFlag=false;
    Logger.log(""Resuming"");
    if (!restoreState()) {
      Logger.log(""Starting from beginning"");
      start();
      return;
    }
    Logger.log(""Restore success"");
    this.lastDownloaded=downloaded;
    this.prevTime=System.currentTimeMillis();
    if (allFinished()) {
      assembleAsync();
      return;
    }
    Segment c1=null;
    for (int i=0; i < chunks.size(); i++) {
      Segment c=chunks.get(i);
      if (c.isFinished() || c.isActive())       continue;
      if (c.getTag().equals(""T1"")) {
        c1=c;
        break;
      }
    }
    Segment c2=null;
    for (int i=0; i < chunks.size(); i++) {
      Segment c=chunks.get(i);
      if (c.isFinished() || c.isActive())       continue;
      if (c.getTag().equals(""T2"")) {
        c2=c;
        break;
      }
    }
    if (c1 != null) {
      try {
        c1.download(this);
      }
 catch (      IOException e) {
        Logger.log(e);
      }
    }
    if (c2 != null) {
      try {
        c2.download(this);
      }
 catch (      IOException e) {
        Logger.log(e);
      }
    }
    if (c1 == null && c2 == null) {
      Logger.log(""Internal error: no inactive/incomplete chunk found while resuming!"");
    }
  }
 catch (  Exception e) {
    Logger.log(e);
    this.errorCode=XDMConstants.RESUME_FAILED;
    listener.downloadFailed(this.id);
    return;
  }
}
"
3614,saveState(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,26,224,123,3,0.1106,0.1333,0.428571429,11,5,"private void saveState(){
  if (chunks.size() < 0)   return;
  StringBuffer sb=new StringBuffer();
  sb.append(this.length + ""\n"");
  sb.append(downloaded + ""\n"");
  sb.append(this.len1 + ""\n"");
  sb.append(this.len2 + ""\n"");
  sb.append(chunks.size() + ""\n"");
  for (int i=0; i < chunks.size(); i++) {
    Segment seg=chunks.get(i);
    sb.append(seg.getId() + ""\n"");
    sb.append(seg.getLength() + ""\n"");
    sb.append(seg.getStartOffset() + ""\n"");
    sb.append(seg.getDownloaded() + ""\n"");
    sb.append(seg.getTag() + ""\n"");
  }
  if (!StringUtils.isNullOrEmptyOrBlank(lastModified)) {
    sb.append(this.lastModified + ""\n"");
  }
  try {
    File tmp=new File(folder,System.currentTimeMillis() + "".tmp"");
    File out=new File(folder,""state.txt"");
    FileOutputStream fs=new FileOutputStream(tmp);
    fs.write(sb.toString().getBytes());
    fs.close();
    out.delete();
    tmp.renameTo(out);
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3615,restoreState(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,31,329,193,3,0.0884,0.1048,0.5,17,7,"private boolean restoreState(){
  BufferedReader br=null;
  chunks=new ArrayList<Segment>();
  File file=new File(folder,""state.txt"");
  if (!file.exists()) {
    file=getBackupFile(folder);
    if (file == null) {
      return false;
    }
  }
  try {
    br=new BufferedReader(new FileReader(file));
    this.length=Long.parseLong(br.readLine());
    this.downloaded=Long.parseLong(br.readLine());
    this.len1=Long.parseLong(br.readLine());
    this.len2=Long.parseLong(br.readLine());
    int chunkCount=Integer.parseInt(br.readLine());
    for (int i=0; i < chunkCount; i++) {
      String cid=br.readLine();
      long len=Long.parseLong(br.readLine());
      long off=Long.parseLong(br.readLine());
      long dwn=Long.parseLong(br.readLine());
      String tag=br.readLine();
      Segment seg=new SegmentImpl(folder,cid,off,len,dwn);
      seg.setTag(tag);
      Logger.log(""id: "" + seg.getId() + ""\nlength: ""+ seg.getLength()+ ""\noffset: ""+ seg.getStartOffset()+ ""\ndownload: ""+ seg.getDownloaded());
      chunks.add(seg);
    }
    this.lastModified=br.readLine();
    return true;
  }
 catch (  Exception e) {
    Logger.log(""Failed to load saved state"");
    Logger.log(e);
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return false;
}
"
3618,createChunk(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,14,67,43,3,0.1786,0.1111,0.75,5,5,"private synchronized void createChunk(String tag) throws IOException {
  if (stopFlag)   return;
  int activeCount=getActiveChunkCount();
  Logger.log(""active count:"" + activeCount);
  if (activeCount == MAX_COUNT) {
    return;
  }
  int rem=MAX_COUNT - activeCount;
  rem-=retryFailedChunks(rem);
  if (rem > 0) {
    Segment c1=findMaxChunk();
    Segment c=splitChunk(c1);
    if (c != null) {
      Logger.log(""creating chunk "" + c);
      chunks.add(c);
      c.download(this);
    }
  }
}
"
3619,findMaxChunk(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,12,45,24,2,0.2381,0.1394,0.4,5,6,"private Segment findMaxChunk(){
  if (stopFlag)   return null;
  long size=-1;
  String id=null;
  for (int i=0; i < chunks.size(); i++) {
    Segment c=chunks.get(i);
    if (c.isActive()) {
      long rem=c.getLength() - c.getDownloaded();
      if (rem > size) {
        id=c.getId();
        size=rem;
      }
    }
  }
  if (size < MIN_CHUNK_SIZE)   return null;
  return getById(id);
}
"
3621,splitChunk(Segment),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,12,35,4,2,0.2396,0.1944,0.333333333,5,3,"private Segment splitChunk(Segment c) throws IOException {
  if (c == null || stopFlag)   return null;
  long rem=c.getLength() - c.getDownloaded();
  long offset=c.getStartOffset() + c.getLength() - rem / 2;
  long len=rem / 2;
  Logger.log(""Changing length from: "" + c.getLength() + "" to ""+ (c.getLength() - rem / 2));
  c.setLength(c.getLength() - rem / 2);
  Segment c2=new SegmentImpl(this,folder);
  c2.setTag(c.getTag());
  c2.setLength(len);
  c2.setStartOffset(offset);
  return c2;
}
"
3622,findNextNeedyChunk(Segment),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,8,16,4,2,0.325,0.2333,0.2,4,7,"private Segment findNextNeedyChunk(Segment chunk){
  if (stopFlag)   return null;
  long offset=chunk.getStartOffset() + chunk.getLength();
  for (int i=0; i < chunks.size(); i++) {
    Segment c=chunks.get(i);
    if (c.getDownloaded() == 0) {
      if (!c.isFinished()) {
        if (c.getStartOffset() == offset && chunk.getTag().equals(c.getTag())) {
          return c;
        }
      }
    }
  }
  return null;
}
"
3623,progress(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\dash\DashDownloader.java,xdm,7,18,15,5,0.2143,0.1111,0,3,2,"@Override public void progress(int progress){
  this.convertPrg=progress;
  long now=System.currentTimeMillis();
  if (now - lastUpdated > 1000) {
    updateStatus();
    lastUpdated=now;
  }
}
"
3624,"HdsDownloader(String,String,HdsMetadata)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,10,44,43,9,0.1083,0.0057,0.5,9,1,"public HdsDownloader(String id,String folder,HdsMetadata metadata){
  this.id=id;
  this.folder=new File(folder,id).getAbsolutePath();
  this.length=-1;
  this.metadata=metadata;
  this.MAX_COUNT=Config.getInstance().getMaxSegments();
  urlList=new ArrayList<String>();
  chunks=new ArrayList<Segment>();
  this.eta=""---"";
}
"
3625,start(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,16,94,68,7,0.1146,0.1312,0.5,5,2,"public void start(){
  Logger.log(""creating folder "" + folder);
  new File(folder).mkdirs();
  this.lastDownloaded=downloaded;
  this.prevTime=System.currentTimeMillis();
  try {
    manifestSegment=new SegmentImpl(this,folder);
    manifestSegment.setTag(""MF"");
    manifestSegment.setLength(-1);
    manifestSegment.setStartOffset(0);
    manifestSegment.setDownloaded(0);
    manifestSegment.setTag(""HLS"");
    manifestSegment.download(this);
  }
 catch (  IOException e) {
    this.errorCode=XDMConstants.RESUME_FAILED;
    this.listener.downloadFailed(id);
  }
}
"
3626,chunkInitiated(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,6,12,9,4,0.2778,0.1111,0.666666667,1,2,"@Override public void chunkInitiated(String id){
  if (!id.equals(manifestSegment.getId())) {
    processSegments();
  }
 else {
    isJavaClientRequired=((HttpChannel)manifestSegment.getChannel()).isJavaClientRequired();
    super.getLastModifiedDate(manifestSegment);
  }
}
"
3627,chunkComplete(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,33,445,362,11,0.0956,0.0796,0.4,12,12,"@Override public boolean chunkComplete(String id){
  if (finished) {
    return true;
  }
  if (stopFlag) {
    return true;
  }
  if (id.equals(manifestSegment.getId())) {
    if (initOrUpdateSegments()) {
      listener.downloadConfirmed(this.id);
    }
 else {
      if (!stopFlag) {
        this.errorCode=XDMConstants.ERR_INVALID_RESP;
        listener.downloadFailed(this.id);
        return true;
      }
    }
  }
 else {
    Segment s=getById(id);
    if (s.getLength() < 0) {
      s.setLength(s.getDownloaded());
    }
    if (allFinished()) {
      finished=true;
      long len=0L;
      for (      Segment ss : chunks) {
        len+=ss.getLength();
      }
      if (len > 0) {
        this.length=len;
      }
      saveState();
      updateStatus();
      try {
        assembleFinished=false;
        assemble();
        Logger.log(""********Download finished*********"");
        updateStatus();
        assembleFinished=true;
        listener.downloadFinished(this.id);
      }
 catch (      Exception e) {
        if (!stopFlag) {
          Logger.log(e);
          this.errorCode=XDMConstants.ERR_ASM_FAILED;
          listener.downloadFailed(this.id);
        }
      }
      listener=null;
      return true;
    }
  }
  processSegments();
  return true;
}
"
3628,chunkUpdated(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,13,68,58,9,0.1795,0.1267,0,2,4,"@Override public void chunkUpdated(String id){
  if (stopFlag)   return;
  long now=System.currentTimeMillis();
  if (now - lastSaved > 5000) {
synchronized (this) {
      saveState();
    }
    lastSaved=now;
  }
  if (now - lastUpdated > 1000) {
    updateStatus();
    lastUpdated=now;
synchronized (this) {
      processSegments();
    }
  }
}
"
3629,createChannel(Segment),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,10,32,19,4,0.225,0.0939,0.571428571,3,3,"@Override public AbstractChannel createChannel(Segment segment){
  for (int i=0; i < chunks.size(); i++) {
    if (segment == chunks.get(i)) {
      HdsMetadata md=new HdsMetadata();
      md.setUrl(urlList.get(i));
      md.setHeaders(metadata.getHeaders());
      return new HttpChannel(segment,md.getUrl(),md.getHeaders(),-1,isJavaClientRequired);
    }
  }
  Logger.log(""Create manifest channel"");
  return new HttpChannel(segment,metadata.getUrl(),metadata.getHeaders(),-1,isJavaClientRequired);
}
"
3631,initOrUpdateSegments(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,30,341,247,2,0.1,0.0865,0.583333333,9,11,"private boolean initOrUpdateSegments(){
  try {
    F4MManifest mf=new F4MManifest(metadata.getUrl(),new File(folder,manifestSegment.getId()).getAbsolutePath());
    mf.setSelectedBitRate(metadata.getBitRate());
    this.totalDuration=mf.getDuration();
    Logger.log(""Total duration "" + totalDuration);
    ArrayList<String> urls=mf.getMediaUrls();
    if (urls.size() < 1) {
      Logger.log(""Manifest contains no media"");
      return false;
    }
    if (urlList.size() > 0 && urlList.size() != urls.size()) {
      Logger.log(""Manifest media count mismatch- expected: "" + urlList.size() + "" got: ""+ urls.size());
      return false;
    }
    if (urlList.size() > 0) {
      urlList.clear();
    }
    urlList.addAll(urls);
    String newExtension=null;
    if (chunks.size() < 1) {
      for (int i=0; i < urlList.size(); i++) {
        if (newExtension == null && outputFormat == 0) {
          newExtension=findExtension(urlList.get(i));
          Logger.log(""HDS: found new extension: "" + newExtension);
          if (newExtension != null) {
            this.newFileName=getOutputFileName(false).replace("".flv"",newExtension);
          }
 else {
            newExtension="".flv"";
          }
        }
        Logger.log(""HDS: Newfile name: "" + this.newFileName);
        Segment s2=new SegmentImpl(this,folder);
        s2.setTag(""HLS"");
        s2.setLength(-1);
        Logger.log(""Adding chunk: "" + s2);
        chunks.add(s2);
      }
    }
    return true;
  }
 catch (  Exception e) {
    Logger.log(e);
    return false;
  }
}
"
3632,processSegments(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,9,27,18,3,0.2444,0.1167,0.666666667,3,3,"private synchronized void processSegments(){
  int activeCount=getActiveChunkCount();
  Logger.log(""active: "" + activeCount);
  if (activeCount < MAX_COUNT) {
    int rem=MAX_COUNT - activeCount;
    try {
      retryFailedChunks(rem);
    }
 catch (    IOException e) {
      Logger.log(e);
    }
  }
}
"
3633,updateStatus(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,50,1066,907,7,0.0618,0.0458,0.4,20,16,"private void updateStatus(){
  try {
    long now=System.currentTimeMillis();
    if (this.eta == null) {
      this.eta=""---"";
    }
    if (converting) {
      progress=this.convertPrg;
    }
 else     if (assembling) {
      long len=length > 0 ? length : downloaded;
      progress=(int)((totalAssembled * 100) / len);
    }
 else {
      long downloaded2=0;
      int processedSegments=0;
      int partPrg=0;
      downloadSpeed=0;
      for (int i=0; i < chunks.size(); i++) {
        Segment s=chunks.get(i);
        downloaded2+=s.getDownloaded();
        downloadSpeed+=s.getTransferRate();
        if (s.isFinished()) {
          processedSegments++;
        }
 else         if (s.getDownloaded() > 0 && s.getLength() > 0) {
          int prg2=(int)((s.getDownloaded() * 100) / s.getLength());
          partPrg+=prg2;
        }
      }
      this.downloaded=downloaded2;
      if (chunks.size() > 0) {
        progress=(int)((processedSegments * 100) / chunks.size());
        progress+=(partPrg / chunks.size());
        if (segDet == null) {
          segDet=new SegmentDetails();
          if (segDet.getCapacity() < chunks.size()) {
            segDet.extend(chunks.size() - segDet.getCapacity());
          }
          segDet.setChunkCount(chunks.size());
        }
        SegmentInfo info=segDet.getChunkUpdates().get(0);
        info.setDownloaded(progress);
        info.setLength(100);
        info.setStart(0);
        long diff=downloaded - lastDownloaded;
        long timeSpend=now - prevTime;
        if (timeSpend > 0) {
          float rate=((float)diff / timeSpend) * 1000;
          if (rate > downloadSpeed) {
            downloadSpeed=rate;
          }
          int prgDiff=progress - lastProgress;
          if (prgDiff > 0) {
            long eta=(timeSpend * (100 - progress) / 1000 * prgDiff);
            lastProgress=progress;
            this.eta=FormatUtilities.hms((int)eta);
          }
          prevTime=now;
          lastDownloaded=downloaded;
        }
      }
    }
    listener.downloadUpdated(id);
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3634,stop(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,10,42,39,7,0.1571,0.0476,1,3,3,"@Override public void stop(){
  stopFlag=true;
  saveState();
  for (int i=0; i < chunks.size(); i++) {
    chunks.get(i).stop();
  }
  if (this.ffmpeg != null) {
    this.ffmpeg.stop();
  }
  listener.downloadStopped(id);
  listener=null;
}
"
3635,resume(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,19,160,149,13,0.0766,0.0567,1,7,4,"@Override public void resume(){
  try {
    stopFlag=false;
    Logger.log(""Resuming"");
    if (!restoreState()) {
      Logger.log(""Starting from beginning"");
      start();
      return;
    }
    Logger.log(""Restore success"");
    this.lastDownloaded=downloaded;
    this.lastProgress=this.progress;
    this.prevTime=System.currentTimeMillis();
    if (allFinished()) {
      assembleAsync();
    }
 else {
      Logger.log(""Starting"");
      start();
    }
  }
 catch (  Exception e) {
    Logger.log(e);
    this.errorCode=XDMConstants.RESUME_FAILED;
    listener.downloadFailed(this.id);
    return;
  }
}
"
3640,saveState(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,32,341,186,3,0.099,0.1393,0.428571429,12,7,"private void saveState(){
  if (chunks.size() < 0)   return;
  StringBuffer sb=new StringBuffer();
  sb.append(this.length + ""\n"");
  sb.append(downloaded + ""\n"");
  sb.append(((long)this.totalDuration) + ""\n"");
  sb.append(urlList.size() + ""\n"");
  for (int i=0; i < urlList.size(); i++) {
    String url=urlList.get(i);
    sb.append(url + ""\n"");
  }
  sb.append(chunks.size() + ""\n"");
  for (int i=0; i < chunks.size(); i++) {
    Segment seg=chunks.get(i);
    sb.append(seg.getId() + ""\n"");
    if (seg.isFinished()) {
      sb.append(seg.getLength() + ""\n"");
      sb.append(seg.getStartOffset() + ""\n"");
      sb.append(seg.getDownloaded() + ""\n"");
    }
 else {
      sb.append(""-1\n"");
      sb.append(seg.getStartOffset() + ""\n"");
      sb.append(seg.getDownloaded() + ""\n"");
    }
  }
  if (!StringUtils.isNullOrEmptyOrBlank(lastModified)) {
    sb.append(this.lastModified + ""\n"");
  }
  try {
    File tmp=new File(folder,System.currentTimeMillis() + "".tmp"");
    File out=new File(folder,""state.txt"");
    FileOutputStream fs=new FileOutputStream(tmp);
    fs.write(sb.toString().getBytes());
    fs.close();
    out.delete();
    tmp.renameTo(out);
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3641,restoreState(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,33,391,254,3,0.08,0.0906,0.5,18,8,"private boolean restoreState(){
  BufferedReader br=null;
  chunks=new ArrayList<Segment>();
  File file=new File(folder,""state.txt"");
  if (!file.exists()) {
    file=getBackupFile(folder);
    if (file == null) {
      return false;
    }
  }
  try {
    br=new BufferedReader(new FileReader(file));
    this.length=Long.parseLong(br.readLine());
    this.downloaded=Long.parseLong(br.readLine());
    this.totalDuration=Long.parseLong(br.readLine());
    int urlCount=Integer.parseInt(br.readLine());
    for (int i=0; i < urlCount; i++) {
      String url=br.readLine();
      urlList.add(url);
    }
    int chunkCount=Integer.parseInt(br.readLine());
    for (int i=0; i < chunkCount; i++) {
      String cid=br.readLine();
      long len=Long.parseLong(br.readLine());
      long off=Long.parseLong(br.readLine());
      long dwn=Long.parseLong(br.readLine());
      Segment seg=new SegmentImpl(folder,cid,off,len,dwn);
      seg.setTag(""HLS"");
      Logger.log(""id: "" + seg.getId() + ""\nlength: ""+ seg.getLength()+ ""\noffset: ""+ seg.getStartOffset()+ ""\ndownload: ""+ seg.getDownloaded());
      chunks.add(seg);
    }
    this.lastModified=br.readLine();
    return true;
  }
 catch (  Exception e) {
    Logger.log(""Failed to load saved state"");
    Logger.log(e);
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return false;
}
"
3644,findExtension(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,13,53,28,4,0.2308,0.1563,0.75,4,6,"private String findExtension(String urlStr){
  String newExtension=null;
  String fileName=XDMUtils.getFileName(urlStr);
  if (!StringUtils.isNullOrEmptyOrBlank(fileName)) {
    String ext=XDMUtils.getExtension(fileName);
    if ((!StringUtils.isNullOrEmptyOrBlank(ext)) && ext.length() > 1) {
      if (!ext.toLowerCase().contains(""ts"")) {
        newExtension=ext;
        if (newExtension.contains(""m4s"")) {
          Logger.log(""HLS extension: MP4"");
          newExtension="".mp4"";
        }
      }
    }
  }
  return newExtension;
}
"
3645,assemble(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,50,1108,991,10,0.0513,0.0434,0.75,16,16,"private void assemble() throws IOException {
  InputStream in=null;
  OutputStream out=null;
  totalAssembled=0L;
  assembling=true;
  assembleFinished=false;
  File outFile=new File(outputFormat == 0 ? getOutputFolder() : folder,getOutputFileName(true));
  try {
    if (stopFlag)     return;
    Logger.log(""assembling... "");
    out=new FileOutputStream(outFile);
    out.write(flv_sig);
    for (    Segment s : chunks) {
      File inFile=new File(folder,s.getId());
      in=new FileInputStream(inFile);
      long streamPos=0, streamLen=inFile.length();
      while (streamPos < streamLen) {
        if (stopFlag) {
          return;
        }
        long boxsize=readInt32(in);
        streamPos+=4;
        String box_type=readStringBytes(in,4);
        streamPos+=4;
        if (boxsize == 1) {
          boxsize=readInt64(in) - 16;
          streamPos+=8;
        }
 else {
          boxsize-=8;
        }
        if (box_type.equals(""mdat"")) {
          long boxsz=boxsize;
          while (boxsz > 0) {
            if (stopFlag)             return;
            int c=(int)(boxsz > b.length ? b.length : boxsz);
            int x=in.read(b,0,c);
            if (x == -1)             throw new IOException(""Unexpected EOF"");
            out.write(b,0,x);
            boxsz-=x;
            totalAssembled+=x;
            long now=System.currentTimeMillis();
            if (now - lastUpdated > 1000) {
              updateStatus();
              lastUpdated=now;
            }
          }
        }
 else {
          in.skip(boxsize);
        }
        streamPos+=boxsize;
      }
      in.close();
    }
    Logger.log(""Output format: "" + outputFormat);
    assembleFinished=true;
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    try {
      out.close();
    }
 catch (    Exception e2) {
    }
    try {
      in.close();
    }
 catch (    Exception e2) {
    }
  }
}
"
3646,"copyBytes(InputStream,OutputStream,long)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,8,20,12,3,0.2321,0.0975,0,5,5,"private void copyBytes(InputStream src,OutputStream dest,long len) throws IOException {
  while (len > 0) {
    if (stopFlag)     return;
    int c=(int)(len > b.length ? b.length : len);
    int x=src.read(b,0,c);
    if (x == -1)     throw new IOException(""Unexpected EOF"");
    dest.write(b,0,x);
    len-=x;
  }
}
"
3647,progress(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,7,18,15,5,0.2143,0.1111,0,3,2,"@Override public void progress(int progress){
  this.convertPrg=progress;
  long now=System.currentTimeMillis();
  if (now - lastUpdated > 1000) {
    updateStatus();
    lastUpdated=now;
  }
}
"
3648,readInt32(InputStream),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,9,27,18,4,0.2444,0.101,0,5,2,"private long readInt32(InputStream s) throws IOException {
  byte[] bytesData=new byte[4];
  if (s.read(bytesData,0,bytesData.length) != bytesData.length) {
    throw new IOException(""Invalid F4F box"");
  }
  long iValLo=(long)((bytesData[3] & 0xff) + ((long)(bytesData[2] & 0xff) * 256));
  long iValHi=(long)((bytesData[1] & 0xff) + ((long)(bytesData[0] & 0xff) * 256));
  long iVal=iValLo + (iValHi * 65536);
  return iVal;
}
"
3649,readInt64(InputStream),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,6,11,7,3,0.3333,0.0833,0,4,1,"private long readInt64(InputStream s) throws IOException {
  long iValHi=readInt32(s);
  long iValLo=readInt32(s);
  long iVal=iValLo + (iValHi * 4294967296L);
  return iVal;
}
"
3650,"readStringBytes(InputStream,long)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hds\HdsDownloader.java,xdm,6,12,9,4,0.25,0.1429,0,4,2,"private String readStringBytes(InputStream s,long len) throws IOException {
  StringBuilder resultValue=new StringBuilder(4);
  for (int i=0; i < len; i++) {
    resultValue.append((char)s.read());
  }
  return resultValue.toString();
}
"
3651,"HlsDownloader(String,String,HlsMetadata)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,10,44,43,9,0.1083,0.0057,0.5,9,1,"public HlsDownloader(String id,String folder,HlsMetadata metadata){
  this.id=id;
  this.folder=new File(folder,id).getAbsolutePath();
  this.length=-1;
  this.metadata=metadata;
  this.MAX_COUNT=Config.getInstance().getMaxSegments();
  urlList=new ArrayList<String>();
  chunks=new ArrayList<Segment>();
  this.eta=""---"";
}
"
3652,start(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,16,94,68,7,0.1146,0.1312,0.5,5,2,"public void start(){
  Logger.log(""creating folder "" + folder);
  new File(folder).mkdirs();
  this.lastDownloaded=downloaded;
  this.prevTime=System.currentTimeMillis();
  try {
    manifestSegment=new SegmentImpl(this,folder);
    manifestSegment.setTag(""MF"");
    manifestSegment.setLength(-1);
    manifestSegment.setStartOffset(0);
    manifestSegment.setDownloaded(0);
    manifestSegment.setTag(""HLS"");
    manifestSegment.download(this);
  }
 catch (  IOException e) {
    this.errorCode=XDMConstants.RESUME_FAILED;
    this.listener.downloadFailed(id);
  }
}
"
3653,chunkInitiated(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,6,12,9,4,0.2778,0.1111,0.666666667,1,2,"@Override public void chunkInitiated(String id){
  if (!id.equals(manifestSegment.getId())) {
    processSegments();
  }
 else {
    isJavaClientRequired=((HttpChannel)manifestSegment.getChannel()).isJavaClientRequired();
    super.getLastModifiedDate(manifestSegment);
  }
}
"
3654,chunkComplete(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,28,313,248,11,0.1179,0.0934,0.4,9,10,"@Override public boolean chunkComplete(String id){
  if (finished) {
    return true;
  }
  if (stopFlag) {
    return true;
  }
  if (id.equals(manifestSegment.getId())) {
    if (initOrUpdateSegments()) {
      listener.downloadConfirmed(this.id);
    }
 else {
      if (!stopFlag) {
        this.errorCode=XDMConstants.ERR_INVALID_RESP;
        listener.downloadFailed(this.id);
        return true;
      }
    }
  }
 else {
    Segment s=getById(id);
    if (s.getLength() < 0) {
      s.setLength(s.getDownloaded());
    }
    if (allFinished()) {
      saveState();
      finished=true;
      updateStatus();
      try {
        assembleFinished=false;
        assemble();
        Logger.log(""********Download finished*********"");
        updateStatus();
        assembleFinished=true;
        listener.downloadFinished(this.id);
      }
 catch (      Exception e) {
        if (!stopFlag) {
          Logger.log(e);
          this.errorCode=XDMConstants.ERR_ASM_FAILED;
          listener.downloadFailed(this.id);
        }
      }
      listener=null;
      return true;
    }
  }
  processSegments();
  return true;
}
"
3655,chunkUpdated(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,13,68,58,9,0.1795,0.1267,0,2,4,"@Override public void chunkUpdated(String id){
  if (stopFlag)   return;
  long now=System.currentTimeMillis();
  if (now - lastSaved > 5000) {
synchronized (this) {
      saveState();
    }
    lastSaved=now;
  }
  if (now - lastUpdated > 1000) {
    updateStatus();
    lastUpdated=now;
synchronized (this) {
      processSegments();
    }
  }
}
"
3656,createChannel(Segment),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,10,32,19,4,0.225,0.0939,0.571428571,3,3,"@Override public AbstractChannel createChannel(Segment segment){
  for (int i=0; i < chunks.size(); i++) {
    if (segment == chunks.get(i)) {
      HlsMetadata md=new HlsMetadata();
      md.setUrl(urlList.get(i));
      md.setHeaders(metadata.getHeaders());
      return new HttpChannel(segment,md.getUrl(),md.getHeaders(),-1,isJavaClientRequired);
    }
  }
  Logger.log(""Create manifest channel"");
  return new HttpChannel(segment,metadata.getUrl(),metadata.getHeaders(),-1,isJavaClientRequired);
}
"
3658,initOrUpdateSegments(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,29,316,226,2,0.1034,0.0927,0.6,9,11,"private boolean initOrUpdateSegments(){
  try {
    M3U8Manifest mf=new M3U8Manifest(new File(folder,manifestSegment.getId()).getAbsolutePath(),metadata.getUrl());
    this.totalDuration=mf.getDuration();
    Logger.log(""Total duration"");
    ArrayList<String> urls=mf.getMediaUrls();
    if (urls.size() < 1) {
      Logger.log(""Manifest contains no media"");
      return false;
    }
    if (urlList.size() > 0 && urlList.size() != urls.size()) {
      Logger.log(""Manifest media count mismatch- expected: "" + urlList.size() + "" got: ""+ urls.size());
      return false;
    }
    if (urlList.size() > 0) {
      urlList.clear();
    }
    urlList.addAll(urls);
    String newExtension=null;
    if (chunks.size() < 1) {
      for (int i=0; i < urlList.size(); i++) {
        if (newExtension == null && outputFormat == 0) {
          newExtension=findExtension(urlList.get(i));
          Logger.log(""HLS: found new extension: "" + newExtension);
          if (newExtension != null) {
            this.newFileName=getOutputFileName(true).replace("".ts"",newExtension);
          }
 else {
            newExtension="".ts"";
          }
        }
        Logger.log(""HLS: Newfile name: "" + this.newFileName);
        Segment s2=new SegmentImpl(this,folder);
        s2.setTag(""HLS"");
        s2.setLength(-1);
        Logger.log(""Adding chunk: "" + s2);
        chunks.add(s2);
      }
    }
    return true;
  }
 catch (  Exception e) {
    Logger.log(e);
    return false;
  }
}
"
3659,processSegments(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,9,27,18,3,0.2444,0.1167,0.666666667,3,3,"private synchronized void processSegments(){
  int activeCount=getActiveChunkCount();
  Logger.log(""active: "" + activeCount);
  if (activeCount < MAX_COUNT) {
    int rem=MAX_COUNT - activeCount;
    try {
      retryFailedChunks(rem);
    }
 catch (    IOException e) {
      Logger.log(e);
    }
  }
}
"
3660,updateStatus(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,50,1066,907,7,0.0618,0.0458,0.4,20,16,"private void updateStatus(){
  try {
    long now=System.currentTimeMillis();
    if (this.eta == null) {
      this.eta=""---"";
    }
    if (converting) {
      progress=this.convertPrg;
    }
 else     if (assembling) {
      long len=length > 0 ? length : downloaded;
      progress=(int)((totalAssembled * 100) / len);
    }
 else {
      long downloaded2=0;
      int processedSegments=0;
      int partPrg=0;
      downloadSpeed=0;
      for (int i=0; i < chunks.size(); i++) {
        Segment s=chunks.get(i);
        downloaded2+=s.getDownloaded();
        downloadSpeed+=s.getTransferRate();
        if (s.isFinished()) {
          processedSegments++;
        }
 else         if (s.getDownloaded() > 0 && s.getLength() > 0) {
          int prg2=(int)((s.getDownloaded() * 100) / s.getLength());
          partPrg+=prg2;
        }
      }
      this.downloaded=downloaded2;
      if (chunks.size() > 0) {
        progress=(int)((processedSegments * 100) / chunks.size());
        progress+=(partPrg / chunks.size());
        if (segDet == null) {
          segDet=new SegmentDetails();
          if (segDet.getCapacity() < chunks.size()) {
            segDet.extend(chunks.size() - segDet.getCapacity());
          }
          segDet.setChunkCount(chunks.size());
        }
        SegmentInfo info=segDet.getChunkUpdates().get(0);
        info.setDownloaded(progress);
        info.setLength(100);
        info.setStart(0);
        long diff=downloaded - lastDownloaded;
        long timeSpend=now - prevTime;
        if (timeSpend > 0) {
          float rate=((float)diff / timeSpend) * 1000;
          if (rate > downloadSpeed) {
            downloadSpeed=rate;
          }
          int prgDiff=progress - lastProgress;
          if (prgDiff > 0) {
            long eta=(timeSpend * (100 - progress) / 1000 * prgDiff);
            lastProgress=progress;
            this.eta=FormatUtilities.hms((int)eta);
          }
          prevTime=now;
          lastDownloaded=downloaded;
        }
      }
    }
    listener.downloadUpdated(id);
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3661,stop(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,10,42,39,7,0.1571,0.0476,1,3,3,"@Override public void stop(){
  stopFlag=true;
  saveState();
  for (int i=0; i < chunks.size(); i++) {
    chunks.get(i).stop();
  }
  if (this.ffmpeg != null) {
    this.ffmpeg.stop();
  }
  listener.downloadStopped(id);
  listener=null;
}
"
3662,resume(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,19,160,149,13,0.0766,0.0567,1,7,4,"@Override public void resume(){
  try {
    stopFlag=false;
    Logger.log(""Resuming"");
    if (!restoreState()) {
      Logger.log(""Starting from beginning"");
      start();
      return;
    }
    Logger.log(""Restore success"");
    this.lastDownloaded=downloaded;
    this.lastProgress=this.progress;
    this.prevTime=System.currentTimeMillis();
    if (allFinished()) {
      assembleAsync();
    }
 else {
      Logger.log(""Starting"");
      start();
    }
  }
 catch (  Exception e) {
    Logger.log(e);
    this.errorCode=XDMConstants.RESUME_FAILED;
    listener.downloadFailed(this.id);
    return;
  }
}
"
3667,saveState(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,32,341,186,3,0.099,0.1393,0.428571429,12,7,"private void saveState(){
  if (chunks.size() < 0)   return;
  StringBuffer sb=new StringBuffer();
  sb.append(this.length + ""\n"");
  sb.append(downloaded + ""\n"");
  sb.append(((long)this.totalDuration) + ""\n"");
  sb.append(urlList.size() + ""\n"");
  for (int i=0; i < urlList.size(); i++) {
    String url=urlList.get(i);
    sb.append(url + ""\n"");
  }
  sb.append(chunks.size() + ""\n"");
  for (int i=0; i < chunks.size(); i++) {
    Segment seg=chunks.get(i);
    sb.append(seg.getId() + ""\n"");
    if (seg.isFinished()) {
      sb.append(seg.getLength() + ""\n"");
      sb.append(seg.getStartOffset() + ""\n"");
      sb.append(seg.getDownloaded() + ""\n"");
    }
 else {
      sb.append(""-1\n"");
      sb.append(seg.getStartOffset() + ""\n"");
      sb.append(seg.getDownloaded() + ""\n"");
    }
  }
  if (!StringUtils.isNullOrEmptyOrBlank(lastModified)) {
    sb.append(this.lastModified + ""\n"");
  }
  try {
    File tmp=new File(folder,System.currentTimeMillis() + "".tmp"");
    File out=new File(folder,""state.txt"");
    FileOutputStream fs=new FileOutputStream(tmp);
    fs.write(sb.toString().getBytes());
    fs.close();
    out.delete();
    tmp.renameTo(out);
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3668,restoreState(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,33,391,254,3,0.08,0.0906,0.5,18,8,"private boolean restoreState(){
  BufferedReader br=null;
  chunks=new ArrayList<Segment>();
  File file=new File(folder,""state.txt"");
  if (!file.exists()) {
    file=getBackupFile(folder);
    if (file == null) {
      return false;
    }
  }
  try {
    br=new BufferedReader(new FileReader(file));
    this.length=Long.parseLong(br.readLine());
    this.downloaded=Long.parseLong(br.readLine());
    this.totalDuration=Long.parseLong(br.readLine());
    int urlCount=Integer.parseInt(br.readLine());
    for (int i=0; i < urlCount; i++) {
      String url=br.readLine();
      urlList.add(url);
    }
    int chunkCount=Integer.parseInt(br.readLine());
    for (int i=0; i < chunkCount; i++) {
      String cid=br.readLine();
      long len=Long.parseLong(br.readLine());
      long off=Long.parseLong(br.readLine());
      long dwn=Long.parseLong(br.readLine());
      Segment seg=new SegmentImpl(folder,cid,off,len,dwn);
      seg.setTag(""HLS"");
      Logger.log(""id: "" + seg.getId() + ""\nlength: ""+ seg.getLength()+ ""\noffset: ""+ seg.getStartOffset()+ ""\ndownload: ""+ seg.getDownloaded());
      chunks.add(seg);
    }
    this.lastModified=br.readLine();
    return true;
  }
 catch (  Exception e) {
    Logger.log(""Failed to load saved state"");
    Logger.log(e);
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return false;
}
"
3671,findExtension(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,13,53,28,4,0.2308,0.1563,0.75,4,6,"private String findExtension(String urlStr){
  String newExtension=null;
  String fileName=XDMUtils.getFileName(urlStr);
  if (!StringUtils.isNullOrEmptyOrBlank(fileName)) {
    String ext=XDMUtils.getExtension(fileName);
    if ((!StringUtils.isNullOrEmptyOrBlank(ext)) && ext.length() > 1) {
      if (!ext.toLowerCase().contains(""ts"")) {
        newExtension=ext;
        if (newExtension.contains(""m4s"")) {
          Logger.log(""HLS extension: MP4"");
          newExtension="".mp4"";
        }
      }
    }
  }
  return newExtension;
}
"
3672,assemble(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,25,264,228,6,0.0821,0.0513,0.555555556,12,6,"private void assemble() throws IOException {
  StringBuffer sb=new StringBuffer();
  for (  Segment s : chunks) {
    sb.append(""file '"" + new File(folder,s.getId()) + ""'\r\n"");
  }
  OutputStream outFile=null;
  File hlsFile=new File(folder,id + ""-hls.txt"");
  try {
    outFile=new FileOutputStream(hlsFile);
    outFile.write(sb.toString().getBytes());
    outFile.close();
  }
 catch (  Exception e) {
    try {
      outFile.close();
    }
 catch (    Exception e2) {
    }
  }
  this.converting=true;
  List<String> inputFiles=new ArrayList<String>();
  inputFiles.add(hlsFile.getAbsolutePath());
  this.ffmpeg=new FFmpeg(inputFiles,new File(getOutputFolder(),getOutputFileName(true)).getAbsolutePath(),this,MediaFormats.getSupportedFormats()[outputFormat],outputFormat == 0);
  ffmpeg.setHls(true);
  ffmpeg.setHLSDuration(totalDuration);
  int ret=ffmpeg.convert();
  Logger.log(""FFmpeg exit code: "" + ret);
  if (ret != 0) {
    throw new IOException(""FFmpeg failed"");
  }
 else {
    long length=new File(getOutputFolder(),getOutputFileName(false)).length();
    if (length > 0) {
      this.length=length;
    }
  }
}
"
3673,progress(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\hls\HlsDownloader.java,xdm,7,18,15,5,0.2143,0.1111,0,3,2,"@Override public void progress(int progress){
  this.convertPrg=progress;
  long now=System.currentTimeMillis();
  if (now - lastUpdated > 1000) {
    updateStatus();
    lastUpdated=now;
  }
}
"
3674,"HttpChannel(Segment,String,HeaderCollection,long,boolean)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\http\HttpChannel.java,xdm,7,20,19,6,0.1587,0.0238,0,9,1,"public HttpChannel(Segment chunk,String url,HeaderCollection headers,long totalLength,boolean javaClientRequired){
  super(chunk);
  this.url=url;
  this.headers=headers;
  this.totalLength=totalLength;
  this.javaClientRequired=javaClientRequired;
}
"
3675,connectImpl(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\http\HttpChannel.java,xdm,128,7400,6672,13,0.0382,0.0422,0.416666667,22,51,"@Override protected boolean connectImpl(){
  int sleepInterval=0;
  boolean isRedirect=false;
  if (stop) {
    closeImpl();
    return false;
  }
  if (!""HLS"".equals(chunk.getTag())) {
    if (chunk.getLength() < 0 && chunk.getDownloaded() > 0) {
      errorCode=XDMConstants.ERR_NO_RESUME;
      closeImpl();
      Logger.log(""server does not support resuming"");
      return false;
    }
    try {
      chunk.reopenStream();
    }
 catch (    IOException e) {
      Logger.log(e);
      closeImpl();
      errorCode=XDMConstants.ERR_NO_RESUME;
      return false;
    }
  }
 else {
    try {
      chunk.reopenStream();
      chunk.resetStream();
      chunk.setDownloaded(0);
    }
 catch (    IOException e) {
      Logger.log(""Stream rest failed"");
      Logger.log(e);
    }
  }
  while (!stop) {
    isRedirect=false;
    try {
      Logger.log(""Connecting to: "" + url + "" ""+ chunk.getTag());
      WebProxy wp=ProxyResolver.resolve(url);
      if (wp != null) {
        javaClientRequired=true;
      }
      if (javaClientRequired) {
        hc=new JavaHttpClient(url);
      }
 else {
        hc=new XDMHttpClient(url);
      }
      if (headers != null) {
        Iterator<HttpHeader> headerIt=headers.getAll();
        while (headerIt.hasNext()) {
          HttpHeader header=headerIt.next();
          hc.setHeader(header.getName(),header.getValue());
        }
      }
      long length=chunk.getLength();
      long startOff=chunk.getStartOffset() + chunk.getDownloaded();
      long endOff=startOff + length - chunk.getDownloaded();
      long expectedLength=endOff - startOff;
      if (length > 0 && expectedLength > 0) {
        Logger.log(chunk + "" requesting:- "" + ""Range:""+ ""bytes=""+ startOff+ ""-""+ (endOff - 1));
        hc.setHeader(""Range"",""bytes="" + startOff + ""-""+ (endOff - 1));
      }
 else {
        hc.setHeader(""Range"",""bytes=0-"");
      }
      hc.connect();
      if (stop) {
        closeImpl();
        return false;
      }
      int code=hc.getStatusCode();
      Logger.log(chunk + "": "" + code);
      if (code >= 300 && code < 400) {
        closeImpl();
        if (totalLength > 0) {
          errorCode=XDMConstants.ERR_INVALID_RESP;
          Logger.log(chunk + "" Redirecting twice"");
          return false;
        }
 else {
          url=hc.getResponseHeader(""location"");
          Logger.log(chunk + "" location: "" + url);
          if (!url.startsWith(""http"")) {
            if (!url.startsWith(""/"")) {
              url=""/"" + url;
            }
            url=""http://"" + hc.getHost() + url;
          }
          url=url.replace("" "",""%20"");
          isRedirect=true;
          redirected=true;
          redirectUrl=url;
          throw new Exception(""Redirecting to: "" + url);
        }
      }
      if (code != 200 && code != 206 && code != 416 && code != 413 && code != 401 && code != 408 && code != 407 && code != 503) {
        errorCode=XDMConstants.ERR_INVALID_RESP;
        closeImpl();
        return false;
      }
      if (code == 407 || code == 401) {
        if (javaClientRequired) {
          Logger.log(""asking for password"");
          boolean proxy=code == 407;
          if (!chunk.promptCredential(hc.getHost(),proxy)) {
            errorCode=XDMConstants.ERR_INVALID_RESP;
            closeImpl();
            return false;
          }
        }
        throw new JavaClientRequiredException();
      }
      if (""T1"".equals(chunk.getTag()) || ""T2"".equals(chunk.getTag())) {
        if (""text/plain"".equals(hc.getResponseHeader(""content-type""))) {
          ByteArrayOutputStream bout=new ByteArrayOutputStream();
          InputStream inStr=hc.getInputStream();
          System.out.println(inStr);
          long len=hc.getContentLength();
          int read=0;
          System.out.println(""reading url of length: "" + len);
          while (true) {
            if (len > 0 && read == len)             break;
            int x=inStr.read();
            if (x == -1) {
              if (len > 0) {
                throw new IOException(""Unable to read url: unexpected EOF"");
              }
 else {
                break;
              }
            }
            read++;
            System.out.print((char)x);
            bout.write(x);
          }
          byte[] buf=bout.toByteArray();
          url=new String(buf,Charset.forName(""ASCII""));
          isRedirect=true;
          throw new Exception(""Youtube text redirect to: "" + url);
        }
      }
      if (((chunk.getDownloaded() + chunk.getStartOffset()) > 0) && code != 206) {
        closeImpl();
        errorCode=XDMConstants.ERR_NO_RESUME;
        return false;
      }
      if (""HLS"".equals(chunk.getTag())) {
        firstLength=-1;
      }
 else {
        firstLength=hc.getContentLength();
      }
      if (length > 0) {
        if (firstLength != expectedLength) {
          Logger.log(chunk + "" length mismatch: expected: "" + expectedLength+ "" got: ""+ firstLength);
          errorCode=XDMConstants.ERR_NO_RESUME;
          closeImpl();
          return false;
        }
      }
      if (hc.getContentLength() > 0 && XDMUtils.getFreeSpace(null) < hc.getContentLength()) {
        Logger.log(""Disk is full"");
        errorCode=XDMConstants.DISK_FAIURE;
        closeImpl();
        return false;
      }
      in=hc.getInputStream();
      Logger.log(""Connection success"");
      return true;
    }
 catch (    JavaClientRequiredException e) {
      Logger.log(""java client required"");
      javaClientRequired=true;
      sleepInterval=0;
    }
catch (    Exception e) {
      Logger.log(chunk);
      Logger.log(e);
      if (isRedirect) {
        closeImpl();
        continue;
      }
      sleepInterval=5000;
    }
    closeImpl();
    try {
      Thread.sleep(sleepInterval);
    }
 catch (    Exception e) {
    }
  }
  Logger.log(""return as "" + errorCode);
  return false;
}
"
3689,chunkConfirmed(Segment),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\http\HttpDownloader.java,xdm,27,253,155,3,0.1282,0.128,0.545454545,10,10,"@Override protected void chunkConfirmed(Segment c){
  HttpChannel hc=(HttpChannel)c.getChannel();
  this.isJavaClientRequired=hc.isJavaClientRequired();
  super.getLastModifiedDate(c);
  if (hc.isRedirected()) {
    metadata.setUrl(hc.getRedirectUrl());
    metadata.save();
    if (outputFormat == 0) {
      newFileName=XDMUtils.getFileName(metadata.getUrl());
      Logger.log(""set new filename: "" + newFileName);
      Logger.log(""new file name: "" + newFileName);
    }
  }
  String contentDispositionHeader=hc.getHeader(""content-disposition"");
  if (contentDispositionHeader != null) {
    if (outputFormat == 0) {
      String name=NetUtils.getNameFromContentDisposition(contentDispositionHeader);
      if (name != null) {
        this.newFileName=name;
        Logger.log(""set new filename: "" + newFileName);
      }
    }
  }
  if ((hc.getHeader(""content-type"") + """").contains(""/html"")) {
    if (this.newFileName != null) {
      String upperStr=this.newFileName.toUpperCase();
      if (!(upperStr.endsWith("".HTML"") || upperStr.endsWith("".HTM""))) {
        outputFormat=0;
        this.newFileName+="".html"";
        Logger.log(""set new filename: "" + newFileName);
      }
    }
  }
  Logger.log(""new filename: "" + newFileName);
}
"
3691,derive(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\DashMetadata.java,xdm,11,27,0,4,0.4545,0.4074,0.4,1,1,"@Override public HttpMetadata derive(){
  Logger.log(""derive dash metadata"");
  DashMetadata md=new DashMetadata();
  md.setHeaders(this.getHeaders());
  md.setHeaders2(this.getHeaders2());
  md.setUrl(this.getUrl());
  md.setUrl2(this.getUrl2());
  md.setLen1(this.getLen1());
  md.setLen2(this.getLen2());
  return md;
}
"
3706,derive(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\HdsMetadata.java,xdm,8,18,8,4,0.2813,0.2099,0.4,1,1,"@Override public HttpMetadata derive(){
  Logger.log(""derive hds metadata"");
  HdsMetadata md=new HdsMetadata();
  md.setHeaders(this.getHeaders());
  md.setUrl(this.getUrl());
  md.setBitRate(bitRate);
  return md;
}
"
3712,derive(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\HlsMetadata.java,xdm,7,15,9,4,0.3333,0.2,0.4,1,1,"@Override public HttpMetadata derive(){
  Logger.log(""derive hls metadata"");
  HlsMetadata md=new HlsMetadata();
  md.setHeaders(this.getHeaders());
  md.setUrl(this.getUrl());
  return md;
}
"
3713,derive(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\HttpMetadata.java,xdm,8,18,8,4,0.3333,0.2593,1,1,1,"public HttpMetadata derive(){
  Logger.log(""derive normal metadata"");
  HttpMetadata md=new HttpMetadata();
  md.setHeaders(this.getHeaders());
  md.setUrl(this.getUrl());
  md.setSize(getSize());
  return md;
}
"
3722,load(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\HttpMetadata.java,xdm,63,1477,1001,3,0.0645,0.1009,0.5,16,25,"public static HttpMetadata load(String id){
  Logger.log(""loading metadata: "" + id);
  BufferedReader br=null;
  HttpMetadata metadata=null;
  int type;
  try {
    br=new BufferedReader(new FileReader(new File(Config.getInstance().getMetadataFolder(),id)));
    String ln=br.readLine();
    if (ln == null) {
      Logger.log(""invalid metadata, file is empty"");
      return null;
    }
    int index=ln.indexOf("":"");
    if (index < 0) {
      Logger.log(""invalid metadata file starting with: "" + ln);
      return null;
    }
    String key=ln.substring(0,index).trim().toLowerCase();
    String val=ln.substring(index + 1).trim();
    if (key.equals(""type"")) {
      type=Integer.parseInt(val);
      if (type == XDMConstants.HTTP) {
        metadata=new HttpMetadata(id);
      }
 else       if (type == XDMConstants.HLS) {
        metadata=new HlsMetadata(id);
      }
 else       if (type == XDMConstants.HDS) {
        metadata=new HdsMetadata(id);
      }
 else       if (type == XDMConstants.DASH) {
        metadata=new DashMetadata(id);
      }
    }
 else {
      Logger.log(""invalid metadata file starting with: "" + ln);
      return null;
    }
    while (true) {
      ln=br.readLine();
      if (ln == null)       break;
      index=ln.indexOf("":"");
      if (index < 0)       continue;
      key=ln.substring(0,index).trim().toLowerCase();
      val=ln.substring(index + 1).trim();
      if (key.equals(""url"")) {
        metadata.setUrl(val);
      }
      if (key.equals(""size"")) {
        metadata.setSize(Long.parseLong(val));
      }
      if (key.equals(""header"")) {
        int index2=val.indexOf("":"");
        if (index2 < 0) {
          continue;
        }
        String key1=val.substring(0,index2).trim();
        String val1=val.substring(index2 + 1).trim();
        metadata.headers.addHeader(key1,val1);
      }
      if (key.equals(""header2"")) {
        int index2=val.indexOf("":"");
        if (index2 < 0) {
          continue;
        }
        String key1=val.substring(0,index2).trim();
        String val1=val.substring(index2 + 1).trim();
        ((DashMetadata)metadata).getHeaders2().addHeader(key1,val1);
      }
      if (key.equals(""url2"")) {
        ((DashMetadata)metadata).setUrl2(val);
      }
      if (key.equals(""len1"")) {
        ((DashMetadata)metadata).setLen1(Long.parseLong(val));
      }
      if (key.equals(""len2"")) {
        ((DashMetadata)metadata).setLen2(Long.parseLong(val));
      }
      if (key.equals(""bitrate"")) {
        ((HdsMetadata)metadata).setBitRate(Integer.parseInt(val));
      }
      if (key.equals(""ydlurl"")) {
        Logger.log(""ydurl: "" + val);
        metadata.ydlUrl=val;
      }
    }
    br.close();
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  return metadata;
}
"
3723,save(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\HttpMetadata.java,xdm,38,594,485,5,0.0748,0.0757,0.583333333,10,13,"public void save(){
  FileOutputStream fw=null;
  try {
    StringBuilder sb=new StringBuilder();
    if (url == null)     throw new NullPointerException(""url is null"");
    sb.append(""type: "" + getType() + ""\n"");
    sb.append(""url: "" + url + ""\n"");
    sb.append(""size: "" + size + ""\n"");
    if (headers != null) {
      Iterator<HttpHeader> headerIterator=headers.getAll();
      while (headerIterator.hasNext()) {
        HttpHeader header=headerIterator.next();
        sb.append(""header: "" + header.getName() + "":""+ header.getValue()+ ""\n"");
      }
    }
    if (getType() == XDMConstants.HDS) {
      sb.append(""bitrate: "" + ((HdsMetadata)this).getBitRate() + ""\n"");
    }
    if (getType() == XDMConstants.DASH) {
      sb.append(""url2: "" + ((DashMetadata)this).getUrl2() + ""\n"");
      sb.append(""len1: "" + ((DashMetadata)this).getLen1() + ""\n"");
      sb.append(""len2: "" + ((DashMetadata)this).getLen2() + ""\n"");
      if (((DashMetadata)this).getHeaders2() != null) {
        Iterator<HttpHeader> headerIterator=((DashMetadata)this).getHeaders2().getAll();
        while (headerIterator.hasNext()) {
          HttpHeader header=headerIterator.next();
          sb.append(""header2: "" + header.getName() + "":""+ header.getValue()+ ""\n"");
        }
      }
    }
    if (!StringUtils.isNullOrEmptyOrBlank(ydlUrl)) {
      sb.append(""ydlUrl: "" + ydlUrl);
    }
    File metadataFolder=new File(Config.getInstance().getMetadataFolder());
    if (!metadataFolder.exists()) {
      metadataFolder.mkdirs();
    }
    File file=new File(metadataFolder,id);
    fw=new FileOutputStream(file);
    fw.write(sb.toString().getBytes());
    fw.close();
  }
 catch (  Exception e) {
    Logger.log(e);
    if (fw != null) {
      try {
        fw.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}
"
3728,ChunkedInputStream(InputStream),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\ChunkedInputStream.java,xdm,7,20,19,6,0.1667,0.05,0,5,2,"/** 
 * Wraps session input stream and reads chunk coded input.
 * @param inThe session input buffer
 */
public ChunkedInputStream(final InputStream in){
  super();
  if (in == null) {
    throw new IllegalArgumentException(""Session input buffer may not be null"");
  }
  this.in=in;
  this.pos=0;
  this.buffer=new StringBuffer(16);
  this.state=CHUNK_LEN;
}
"
3729,read(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\ChunkedInputStream.java,xdm,14,80,69,7,0.1349,0.0569,0,1,1,"/** 
 * Read some bytes from the stream.
 * @param bThe byte array that will hold the contents from the stream.
 * @return The number of bytes returned or -1 if the end of stream has been
 * reached.
 * @throws IOExceptionin case of an I/O error
 */
public int read(byte[] b) throws IOException {
  return read(b,0,b.length);
}
"
3732,nextChunk(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\ChunkedInputStream.java,xdm,10,42,39,8,0.14,0.0769,0,0,3,"/** 
 * Read the next chunk.
 * @throws IOExceptionin case of an I/O error
 */
private void nextChunk() throws IOException {
  chunkSize=getChunkSize();
  if (chunkSize < 0) {
    throw new IllegalArgumentException(""Negative chunk size"");
  }
  state=CHUNK_DATA;
  pos=0;
  if (chunkSize == 0) {
    eof=true;
    parseTrailerHeaders();
  }
}
"
3734,parseTrailerHeaders(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\ChunkedInputStream.java,xdm,6,11,7,3,0.3333,0.1429,0,2,4,"/** 
 * Reads and stores the Trailer headers.
 * @throws IOExceptionin case of an I/O error
 */
private void parseTrailerHeaders() throws IOException {
  while (true) {
    StringBuffer buf=new StringBuffer();
    int i=readLine(in,buf);
    if (i == -1)     break;
    if (buf.length() < 1) {
      break;
    }
  }
}
"
3735,close(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\ChunkedInputStream.java,xdm,9,31,26,5,0.2593,0.1061,0,1,4,"/** 
 * Upon close, this reads the remainder of the chunked message, leaving the
 * underlying socket at a position to start reading the next response
 * without scanning.
 * @throws IOExceptionin case of an I/O error
 */
public void close() throws IOException {
  if (!closed) {
    try {
      if (!eof) {
        byte buffer[]=new byte[BUFFER_SIZE];
        while (read(buffer) >= 0) {
        }
      }
    }
  finally {
      eof=true;
      closed=true;
    }
  }
}
"
3736,"readLine(InputStream,StringBuffer)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\ChunkedInputStream.java,xdm,12,43,20,3,0.2917,0.2026,0,4,8,"public static final int readLine(InputStream in,StringBuffer buf) throws IOException {
  boolean gotCR=false;
  while (true) {
    int x=in.read();
    if (x == -1)     return (buf.length() > 0 ? buf.length() : -1);
    if (x == '\n') {
      if (gotCR) {
        return buf.length();
      }
    }
    if (x == '\r') {
      gotCR=true;
    }
 else {
      gotCR=false;
    }
    if (x != '\r')     buf.append((char)x);
  }
}
"
3748,loadFromStream(InputStream),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\HeaderCollection.java,xdm,10,29,13,3,0.2111,0.1205,1,6,4,"public void loadFromStream(InputStream inStream) throws IOException {
  while (true) {
    String ln=NetUtils.readLine(inStream);
    if (ln.length() < 1)     break;
    int index=ln.indexOf("":"");
    if (index > 0) {
      String key=ln.substring(0,index).trim();
      String value=ln.substring(index + 1).trim();
      HttpHeader header=new HttpHeader(key,value);
      headers.add(header);
    }
  }
}
"
3765,init(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\HttpContext.java,xdm,53,1363,1348,44,0.0425,0.0157,0.5,20,4,"public void init(){
  if (!init) {
    Logger.log(""Context initialized"");
    System.setProperty(""http.auth.preference"",""ntlm"");
    try {
      try {
        sslContext=SSLContext.getInstance(""TLS"");
      }
 catch (      Exception e) {
        e.printStackTrace();
        sslContext=SSLContext.getInstance(""SSL"");
      }
      TrustManager[] trustAllCerts=new TrustManager[]{new X509ExtendedTrustManager(){
        @Override public void checkClientTrusted(        X509Certificate[] chain,        String authType) throws CertificateException {
        }
        @Override public void checkServerTrusted(        X509Certificate[] chain,        String authType) throws CertificateException {
        }
        @Override public X509Certificate[] getAcceptedIssuers(){
          return null;
        }
        @Override public void checkClientTrusted(        X509Certificate[] chain,        String authType,        Socket socket) throws CertificateException {
        }
        @Override public void checkClientTrusted(        X509Certificate[] chain,        String authType,        SSLEngine engine) throws CertificateException {
        }
        @Override public void checkServerTrusted(        X509Certificate[] chain,        String authType,        Socket socket) throws CertificateException {
        }
        @Override public void checkServerTrusted(        X509Certificate[] chain,        String authType,        SSLEngine engine) throws CertificateException {
        }
      }
};
      sslContext.init(null,trustAllCerts,new SecureRandom());
      HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());
    }
 catch (    Exception e) {
      Logger.log(e);
    }
    Authenticator.setDefault(new Authenticator(){
      protected PasswordAuthentication getPasswordAuthentication(){
        System.out.println(""Called on "" + getRequestorType() + "" scheme: ""+ getRequestingScheme()+ "" host: ""+ getRequestingHost()+ "" url: ""+ getRequestingURL()+ "" prompt: ""+ getRequestingPrompt());
        if (getRequestorType() == RequestorType.SERVER) {
          PasswordAuthentication pauth=CredentialManager.getInstance().getCredentialForHost(getRequestingHost());
          return pauth;
        }
 else {
          return CredentialManager.getInstance().getCredentialForProxy();
        }
      }
    }
);
    init=true;
  }
}
"
3767,parse(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\HttpHeader.java,xdm,7,13,5,3,0.3429,0.155,0,4,2,"public static HttpHeader parse(String str){
  int index=str.indexOf("":"");
  if (index < 0)   return null;
  String key=str.substring(0,index);
  String val=str.substring(index + 1);
  return new HttpHeader(key,val);
}
"
3774,JavaHttpClient(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\JavaHttpClient.java,xdm,6,14,13,5,0.1905,0.0222,1,4,1,"public JavaHttpClient(String url){
  super();
  this._url=url;
  this.requestHeaders=new HeaderCollection();
  this.responseHeaders=new HeaderCollection();
}
"
3775,connect(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\JavaHttpClient.java,xdm,29,355,304,5,0.0733,0.0443,0.454545455,16,7,"public void connect() throws IOException {
  HttpContext.getInstance().init();
  WebProxy webproxy=ProxyResolver.resolve(_url);
  URL url=new URL(_url);
  this.realURL=url;
  if (webproxy != null) {
    Proxy proxy=new Proxy(webproxy.isSocks() ? Proxy.Type.SOCKS : Proxy.Type.HTTP,new InetSocketAddress(webproxy.getHost(),webproxy.getPort()));
    hc=(HttpURLConnection)url.openConnection(proxy);
  }
 else {
    hc=(HttpURLConnection)url.openConnection();
  }
  Iterator<HttpHeader> headers=requestHeaders.getAll();
  while (headers.hasNext()) {
    HttpHeader header=headers.next();
    hc.addRequestProperty(header.getName(),header.getValue());
  }
  hc.setInstanceFollowRedirects(false);
  this.statusCode=hc.getResponseCode();
  this.statusMessage=hc.getResponseMessage();
  Map<String,List<String>> responseHeaderMap=hc.getHeaderFields();
  Iterator<String> headerIterator=responseHeaderMap.keySet().iterator();
  while (headerIterator.hasNext()) {
    String key=headerIterator.next();
    if (key == null)     continue;
    List<String> headerValues=responseHeaderMap.get(key);
    Iterator<String> headerValueIterator=headerValues.iterator();
    while (headerValueIterator.hasNext()) {
      String value=headerValueIterator.next();
      HttpHeader header=new HttpHeader(key,value);
      this.responseHeaders.addHeader(header);
    }
  }
}
"
3780,"WebProxy(String,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\WebProxy.java,xdm,6,15,15,6,0.1667,0,0,4,1,"public WebProxy(String host,int port){
  super();
  this.host=host;
  this.port=port;
}
"
3789,dispose(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\XDMHttpClient.java,xdm,8,26,24,6,0.1667,0.0741,1,3,6,"@Override public void dispose(){
  if (closed)   return;
  closed=true;
  try {
    if (in.isStreamFinished() && keepAliveSupported) {
      releaseSocket();
      return;
    }
  }
 catch (  Exception e) {
  }
  try {
    this.socket.close();
  }
 catch (  Exception e) {
  }
}
"
3791,connect(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\XDMHttpClient.java,xdm,48,1035,942,9,0.0551,0.0387,0.5,17,9,"@Override public void connect() throws IOException {
  try {
    int port=_url.getPort();
    String portStr=(port == 80 || port == 443) ? """" : "":"" + port;
    requestHeaders.setValue(""host"",_url.getHost() + portStr);
    Socket sock=KeepAliveConnectionCache.getInstance().getReusableSocket(_url.getHost(),_url.getPort());
    boolean reusing=false;
    if (sock == null) {
      Logger.log(""Creating new socket"");
      this.socket=createSocket();
    }
 else {
      reusing=true;
      Logger.log(""Reusing existing socket"");
      this.socket=sock;
    }
    OutputStream sockOut=socket.getOutputStream();
    InputStream sockIn=socket.getInputStream();
    String reqLine=""GET "" + _url.getPathAndQuery() + "" HTTP/1.1"";
    StringBuffer reqBuf=new StringBuffer();
    reqBuf.append(reqLine + ""\r\n"");
    requestHeaders.appendToBuffer(reqBuf);
    reqBuf.append(""\r\n"");
    Logger.log(""Sending request:\n"" + reqBuf);
    sockOut.write(StringUtils.getBytes(reqBuf));
    sockOut.flush();
    statusLine=NetUtils.readLine(sockIn);
    String[] arr=statusLine.split("" "");
    this.statusCode=Integer.parseInt(arr[1].trim());
    if (arr.length > 2) {
      this.statusMessage=arr[2].trim();
    }
 else {
      this.statusMessage="""";
    }
    Logger.log(statusLine);
    responseHeaders.loadFromStream(sockIn);
    length=NetUtils.getContentLength(responseHeaders);
    in=new FixedRangeInputStream(NetUtils.getInputStream(responseHeaders,socket.getInputStream()),length);
    StringBuffer b2=new StringBuffer();
    responseHeaders.appendToBuffer(b2);
    if (reusing) {
      Logger.log(""Socket reuse successfull"");
    }
    Logger.log(b2);
    keepAliveSupported=!""close"".equals(responseHeaders.getValue(""connection""));
  }
 catch (  HostUnreachableException e) {
    e.printStackTrace();
    throw new NetworkException(""Unable to connect to server"");
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new NetworkException(e.getMessage());
  }
}
"
3793,createSocket(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\XDMHttpClient.java,xdm,6,10,5,3,0.4444,0.1667,0.4,1,2,"private Socket createSocket() throws IOException {
  Socket socket=SocketFactory.createSocket(_url.getHost(),_url.getPort());
  if (_url.getProtocol().equalsIgnoreCase(""https"")) {
    socket=SocketFactory.wrapSSL(socket,_url.getHost(),_url.getPort());
  }
  return socket;
}
"
3796,AboutPage(XDMFrame),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\AboutPage.java,xdm,32,360,224,2,0.1138,0.1398,0.666666667,7,1,"public AboutPage(XDMFrame xframe){
  super(StringResource.get(""TITLE_ABOUT""),350,xframe);
  int y=0;
  int h=0;
  JPanel panel=new JPanel();
  panel.setLayout(null);
  panel.setOpaque(false);
  y+=10;
  h=50;
  JLabel lblTitle=new JLabel(StringResource.get(""FULL_NAME""));
  lblTitle.setFont(FontResource.getBiggerFont());
  lblTitle.setForeground(Color.WHITE);
  lblTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblTitle);
  y+=h;
  y+=20;
  String details=String.format(StringResource.get(""ABOUT_DETAILS""),XDMApp.APP_VERSION,System.getProperty(""java.version""),System.getProperty(""os.name""),""http://xdman.sourceforge.net"");
  h=250;
  JTextArea lblDetails=new JTextArea();
  lblDetails.setOpaque(false);
  lblDetails.setWrapStyleWord(true);
  lblDetails.setLineWrap(true);
  lblDetails.setEditable(false);
  lblDetails.setForeground(Color.WHITE);
  lblDetails.setText(details);
  lblDetails.setFont(FontResource.getBigFont());
  lblDetails.setBounds(15,y,350 - 30,h);
  panel.add(lblDetails);
  y+=h;
  panel.setPreferredSize(new Dimension(350,y));
  panel.setBounds(0,0,350,y);
  jsp.setViewportView(panel);
}
"
3800,paint(Graphics),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\CircleProgressBar.java,xdm,24,202,128,9,0.0855,0.1009,1,8,3,"@Override public void paint(Graphics g){
  Graphics2D g2=(Graphics2D)g;
  if (g2 == null) {
    return;
  }
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  int sweep_angle=(int)(((float)value * 360) / 100);
  g2.setColor(Color.GRAY);
  g2.setStroke(stroke);
  g2.drawArc(padding,padding,getWidth() - 2 * padding,getHeight() - 2 * padding,90,-360);
  if (value > 0) {
    g2.setColor(foreColor);
    g2.drawArc(padding,padding,getWidth() - 2 * padding,getHeight() - 2 * padding,90,-sweep_angle);
  }
  g2.setFont(FontResource.getItemFont());
  FontMetrics fm=g2.getFontMetrics();
  String str=value + ""%"";
  int w=(int)fm.getStringBounds(str,g2).getWidth();
  LineMetrics lm=fm.getLineMetrics(str,g2);
  int h=(int)(lm.getAscent() + lm.getDescent());
  g2.drawString(str,(getWidth() - w) / 2,((getHeight() + h) / 2) - lm.getDescent());
}
"
3806,init(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\CustomButton.java,xdm,6,14,13,4,0.2,0.0238,0.5,0,1,"private void init(){
  rolloverBackground=ColorResource.getSelectionColor();
  rolloverForeground=Color.WHITE;
  pressedBackground=ColorResource.getDarkBgColor();
  pressedForeground=Color.WHITE;
}
"
3821,"initUI(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadCompleteWnd.java,xdm,89,3599,3282,10,0.0449,0.0411,0.875,13,3,"private void initUI(String file,String folder){
  setUndecorated(true);
  try {
    if (GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().isWindowTranslucencySupported(WindowTranslucency.TRANSLUCENT)) {
      setOpacity(0.85f);
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  setIconImage(ImageResource.get(""icon.png"").getImage());
  setSize(350,210);
  setLocationRelativeTo(null);
  setAlwaysOnTop(true);
  getContentPane().setLayout(null);
  getContentPane().setBackground(ColorResource.getDarkestBgColor());
  JPanel titlePanel=new TitlePanel(null,this);
  titlePanel.setOpaque(false);
  titlePanel.setBounds(0,0,350,50);
  add(titlePanel);
  JButton closeBtn=new CustomButton();
  closeBtn.setBounds(310,5,30,30);
  closeBtn.setBackground(ColorResource.getDarkestBgColor());
  closeBtn.setBorderPainted(false);
  closeBtn.setFocusPainted(false);
  closeBtn.setName(""CLOSE"");
  closeBtn.setIcon(ImageResource.get(""close_btn.png""));
  closeBtn.addActionListener(this);
  titlePanel.add(closeBtn);
  JLabel titleLbl=new JLabel(StringResource.get(""CD_TITLE""));
  titleLbl.setFont(FontResource.getBiggerFont());
  titleLbl.setForeground(ColorResource.getSelectionColor());
  titleLbl.setBounds(25,15,200,30);
  titlePanel.add(titleLbl);
  JLabel lineLbl=new JLabel();
  lineLbl.setBackground(ColorResource.getSelectionColor());
  lineLbl.setBounds(0,55,350,1);
  lineLbl.setOpaque(true);
  add(lineLbl);
  JLabel lblFile=new JLabel(StringResource.get(""ND_FILE""),JLabel.RIGHT);
  lblFile.setBounds(0,75,70,20);
  lblFile.setForeground(Color.WHITE);
  add(lblFile);
  JLabel lblSave=new JLabel(StringResource.get(""CD_LOC""),JLabel.RIGHT);
  lblSave.setBounds(0,100,70,20);
  lblSave.setForeground(Color.WHITE);
  add(lblSave);
  txtFile=new JTextField();
  txtFile.setText(file);
  txtFile.setEditable(false);
  txtFile.setBorder(new LineBorder(ColorResource.getSelectionColor(),1));
  txtFile.setBackground(ColorResource.getDarkestBgColor());
  txtFile.setForeground(Color.WHITE);
  txtFile.setBounds(80,75,220,20);
  txtFile.setCaretColor(ColorResource.getSelectionColor());
  add(txtFile);
  txtFolder=new JTextField();
  txtFolder.setText(folder);
  txtFolder.setEditable(false);
  txtFolder.setBorder(new LineBorder(ColorResource.getSelectionColor(),1));
  txtFolder.setBackground(ColorResource.getDarkestBgColor());
  txtFolder.setForeground(Color.WHITE);
  txtFolder.setBounds(80,100,220,20);
  txtFolder.setCaretColor(ColorResource.getSelectionColor());
  add(txtFolder);
  chkDontShow=new JCheckBox(StringResource.get(""MSG_DONT_SHOW_AGAIN""));
  chkDontShow.setBackground(ColorResource.getDarkestBgColor());
  chkDontShow.setName(""MSG_DONT_SHOW_AGAIN"");
  chkDontShow.setForeground(Color.WHITE);
  chkDontShow.setFocusPainted(false);
  chkDontShow.setBounds(75,125,200,20);
  chkDontShow.setIcon(ImageResource.get(""unchecked.png""));
  chkDontShow.setSelectedIcon(ImageResource.get(""checked.png""));
  chkDontShow.addActionListener(this);
  add(chkDontShow);
  JPanel panel=new JPanel(null);
  panel.setBounds(0,155,400,55);
  panel.setBackground(Color.DARK_GRAY);
  add(panel);
  CustomButton btnMore=new CustomButton(StringResource.get(""CD_OPEN_FILE"")), btnDN=new CustomButton(StringResource.get(""CD_OPEN_FOLDER"")), btnCN=new CustomButton(StringResource.get(""ND_CANCEL""));
  btnMore.setBounds(0,1,100,55);
  btnMore.setName(""CTX_OPEN_FILE"");
  styleButton(btnMore);
  panel.add(btnMore);
  btnDN.setBounds(101,1,148,55);
  btnDN.setName(""CTX_OPEN_FOLDER"");
  styleButton(btnDN);
  panel.add(btnDN);
  btnCN.setBounds(250,1,100,55);
  btnCN.setName(""CLOSE"");
  styleButton(btnCN);
  panel.add(btnCN);
}
"
3822,styleButton(CustomButton),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadCompleteWnd.java,xdm,10,17,0,3,0.26,0.3295,0.75,1,1,"private void styleButton(CustomButton btn){
  btn.setBackground(ColorResource.getDarkestBgColor());
  btn.setPressedBackground(ColorResource.getDarkerBgColor());
  btn.setForeground(Color.WHITE);
  btn.setFont(FontResource.getBigFont());
  btn.setBorderPainted(false);
  btn.setMargin(new Insets(0,0,0,0));
  btn.setFocusPainted(false);
  btn.addActionListener(this);
}
"
3823,actionPerformed(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadCompleteWnd.java,xdm,16,107,94,7,0.1458,0.0864,0.6,4,8,"@Override public void actionPerformed(ActionEvent e){
  if (e.getSource() instanceof JComponent) {
    String name=((JComponent)e.getSource()).getName();
    if (name.startsWith(""MSG_DONT_SHOW_AGAIN"")) {
      Config.getInstance().setShowDownloadCompleteWindow(!chkDontShow.isSelected());
    }
 else     if (name.equals(""CLOSE"")) {
      dispose();
    }
 else     if (name.equals(""CTX_OPEN_FILE"")) {
      try {
        XDMUtils.openFile(txtFile.getText(),txtFolder.getText());
        dispose();
      }
 catch (      Exception e1) {
        Logger.log(e1);
      }
    }
 else     if (name.equals(""CTX_OPEN_FOLDER"")) {
      try {
        XDMUtils.openFolder(txtFile.getText(),txtFolder.getText());
        dispose();
      }
 catch (      Exception e1) {
        Logger.log(e1);
      }
    }
  }
}
"
3824,DownloadListView(JPanel),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadListView.java,xdm,33,485,442,21,0.0697,0.0647,0.75,2,1,"public DownloadListView(JPanel container){
  model=new DownloadTableModel();
  XDMApp.getInstance().addListener(model);
  table=new JTable(model);
  table.setTableHeader(null);
  table.setDefaultRenderer(DownloadEntry.class,new XDMTableCellRenderer());
  table.setRowHeight(70);
  table.setShowGrid(false);
  table.setFillsViewportHeight(true);
  table.setBorder(new EmptyBorder(0,0,0,0));
  table.setDragEnabled(true);
  JScrollPane jsp=new JScrollPane(table);
  jsp.setBorder(new EmptyBorder(0,0,0,0));
  container.add(jsp);
}
"
3828,"compare(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadSorter.java,xdm,14,60,29,4,0.2347,0.1795,0.333333333,5,8,"@Override public int compare(String id1,String id2){
  DownloadEntry o1=XDMApp.getInstance().getEntry(id1);
  DownloadEntry o2=XDMApp.getInstance().getEntry(id2);
  int res=0;
switch (Config.getInstance().getSortField()) {
case 0:
    res=o1.getDate() > o2.getDate() ? 1 : -1;
  break;
case 1:
res=o1.getSize() > o2.getSize() ? 1 : -1;
break;
case 2:
res=o1.getFile().compareTo(o2.getFile());
break;
case 3:
res=o1.getCategory() - o2.getCategory();
break;
default :
break;
}
if (Config.getInstance().getSortAsc()) {
return res;
}
 else {
return -res;
}
}
"
3834,listChanged(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadTableModel.java,xdm,7,21,21,7,0.1429,0,0.428571429,0,1,"@Override public void listChanged(){
  Logger.log(""List changed"");
  idList=XDMApp.getInstance().getDownloadList(Config.getInstance().getCategoryFilter(),Config.getInstance().getStateFilter(),Config.getInstance().getSearchText());
  sort();
  refreshIdMap();
  fireTableDataChanged();
}
"
3835,listItemUpdated(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadTableModel.java,xdm,6,12,9,4,0.25,0.119,1,2,2,"@Override public void listItemUpdated(String id){
  Logger.log(""List updated"");
  Integer index=idIndexMap.get(id);
  if (index != null) {
    fireTableRowsUpdated(index,index);
  }
}
"
3843,"update(Downloader,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadWindow.java,xdm,16,103,86,9,0.1058,0.0473,0.416666667,4,9,"public void update(Downloader d,String file){
  titleLbl.setText(file);
  lblStat.setText(d.isAssembling() ? StringResource.get(""STAT_ASSEMBLING"") : StringResource.get(""DWN_TITLE""));
  lblDet.setText((d.isAssembling() ? StringResource.get(""STAT_ASSEMBLING"") : StringResource.get(""DWN_DOWNLOAD"")) + "" "" + FormatUtilities.formatSize(d.getDownloaded())+ "" ""+ ((d.getType() == XDMConstants.HTTP || d.getType() == XDMConstants.DASH) ? ""/ "" + FormatUtilities.formatSize(d.getSize()) : ""( "" + d.getProgress() + "" % )""));
  lblSpeed.setText(FormatUtilities.formatSize(d.getDownloadSpeed()) + ""/s"");
  lblETA.setText(""ETA "" + d.getEta());
  prgCircle.setValue(d.getProgress());
  SegmentDetails segDet=d.getSegmentDetails();
  long sz=((d.getType() == XDMConstants.HTTP || d.getType() == XDMConstants.DASH) ? d.getSize() : 100);
  segProgress.setValues(segDet,sz);
}
"
3844,createP2(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadWindow.java,xdm,39,655,569,6,0.0554,0.0597,1,6,1,"private void createP2(){
  remove(prgCircle);
  remove(lblSpeed);
  remove(lblStat);
  remove(segProgress);
  remove(lblDet);
  remove(lblETA);
  remove(this.panel);
  titlePanel.remove(closeBtn);
  titlePanel.remove(minBtn);
  JPanel p2=new JPanel(null);
  p2.setBounds(0,60,350,190);
  p2.setBackground(ColorResource.getDarkestBgColor());
  txtError=new JTextArea(this.errMsg);
  txtError.setFont(FontResource.getBigFont());
  txtError.setEditable(false);
  txtError.setCaretPosition(0);
  txtError.setWrapStyleWord(true);
  txtError.setLineWrap(true);
  txtError.setBackground(ColorResource.getDarkestBgColor());
  txtError.setForeground(Color.WHITE);
  JScrollPane jsp=new JScrollPane(txtError);
  jsp.setBounds(25,20,300,100);
  jsp.setBorder(null);
  CustomButton exitBtn=new CustomButton();
  exitBtn.setText(StringResource.get(""MSG_OK""));
  applyStyle(exitBtn);
  exitBtn.setBounds(0,1,350,50);
  exitBtn.setName(""EXIT"");
  JPanel panel2=new JPanel(null);
  panel2.setBounds(0,140,350,50);
  panel2.setBackground(Color.DARK_GRAY);
  panel2.add(exitBtn);
  p2.add(jsp);
  p2.add(panel2);
  add(p2);
  titleLbl.setText(StringResource.get(""MSG_FAILED""));
  invalidate();
  repaint();
}
"
3845,init(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadWindow.java,xdm,88,3608,3388,15,0.0389,0.0312,0.818181818,4,3,"private void init(){
  setUndecorated(true);
  try {
    if (GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().isWindowTranslucencySupported(WindowTranslucency.TRANSLUCENT)) {
      setOpacity(0.85f);
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  setTitle(""Downloading..."");
  setIconImage(ImageResource.get(""icon.png"").getImage());
  setSize(350,250);
  setLocationRelativeTo(null);
  setResizable(false);
  getContentPane().setLayout(null);
  getContentPane().setBackground(ColorResource.getDarkestBgColor());
  titlePanel=new TitlePanel(null,this);
  titlePanel.setOpaque(false);
  titlePanel.setBounds(0,0,350,50);
  closeBtn=new CustomButton();
  closeBtn.setBounds(320,5,24,24);
  closeBtn.setIcon(ImageResource.get(""close_btn.png""));
  closeBtn.setBackground(ColorResource.getDarkestBgColor());
  closeBtn.setBorderPainted(false);
  closeBtn.setFocusPainted(false);
  closeBtn.setName(""PAUSE"");
  closeBtn.addActionListener(this);
  minBtn=new CustomButton();
  minBtn.setBounds(296,5,24,24);
  minBtn.setIcon(ImageResource.get(""min_btn.png""));
  minBtn.setBackground(ColorResource.getDarkestBgColor());
  minBtn.setBorderPainted(false);
  minBtn.setFocusPainted(false);
  minBtn.setName(""MIN"");
  minBtn.addActionListener(this);
  titleLbl=new JLabel(StringResource.get(""DWN_TITLE""));
  titleLbl.setFont(FontResource.getBiggerFont());
  titleLbl.setForeground(ColorResource.getSelectionColor());
  titleLbl.setBounds(25,15,250,30);
  JLabel lineLbl=new JLabel();
  lineLbl.setBackground(ColorResource.getSelectionColor());
  lineLbl.setBounds(0,55,400,2);
  lineLbl.setOpaque(true);
  prgCircle=new CircleProgressBar();
  prgCircle.setValue(0);
  prgCircle.setBounds(20,80,72,72);
  titlePanel.add(titleLbl);
  titlePanel.add(minBtn);
  titlePanel.add(closeBtn);
  lblSpeed=new JLabel(""---"");
  lblSpeed.setHorizontalAlignment(JLabel.CENTER);
  lblSpeed.setBounds(15,160,80,25);
  lblSpeed.setForeground(Color.WHITE);
  lblStat=new JLabel(StringResource.get(""DWN_TITLE""));
  lblStat.setBounds(120,85,200,25);
  lblStat.setForeground(Color.WHITE);
  segProgress=new SegmentPanel();
  segProgress.setBounds(120,115,200,5);
  lblDet=new JLabel(StringResource.get(""DWN_PLACEHOLDER""));
  lblDet.setBounds(120,125,200,25);
  lblDet.setForeground(Color.WHITE);
  lblETA=new JLabel(""---"");
  lblETA.setBounds(120,150,200,25);
  lblETA.setForeground(Color.WHITE);
  panel=new JPanel(null);
  panel.setBounds(0,200,350,50);
  panel.setBackground(Color.DARK_GRAY);
  CustomButton btnMore=new CustomButton(StringResource.get(""DWN_HIDE""));
  CustomButton btnCN=new CustomButton(StringResource.get(""MENU_PAUSE""));
  btnMore.setBounds(0,1,175,50);
  btnMore.setName(""BACKGROUND"");
  applyStyle(btnMore);
  btnCN.setBounds(176,1,175,50);
  btnCN.setName(""PAUSE"");
  applyStyle(btnCN);
  add(titlePanel);
  add(lineLbl);
  add(prgCircle);
  add(lblSpeed);
  add(lblStat);
  add(segProgress);
  add(lblDet);
  add(lblETA);
  panel.add(btnMore);
  panel.add(btnCN);
  add(panel);
}
"
3846,applyStyle(CustomButton),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadWindow.java,xdm,11,19,0,3,0.2545,0.3704,0.75,1,1,"void applyStyle(CustomButton btn){
  btn.addActionListener(this);
  btn.setBackground(ColorResource.getDarkestBgColor());
  btn.setForeground(Color.WHITE);
  btn.setPressedBackground(ColorResource.getDarkerBgColor());
  btn.setFont(FontResource.getBigFont());
  btn.setBorderPainted(false);
  btn.setMargin(new Insets(0,0,0,0));
  btn.setFocusPainted(false);
  btn.setFocusPainted(false);
}
"
3847,actionPerformed(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadWindow.java,xdm,13,63,48,8,0.2051,0.1984,0,2,6,"@Override public void actionPerformed(ActionEvent e){
  String name=((JComponent)e.getSource()).getName();
  if (""PAUSE"".equals(name)) {
    pause();
  }
 else   if (""BACKGROUND"".equals(name)) {
    hideWnd();
  }
 else   if (""PREVIEW"".equals(name)) {
    openPreviewFolder();
  }
 else   if (""MIN"".equals(name)) {
    this.setExtendedState(this.getExtendedState() | JFrame.ICONIFIED);
  }
 else   if (""EXIT"".equals(name)) {
    dispose();
  }
}
"
3851,showErrorMsg(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\DownloadWindow.java,xdm,18,125,97,4,0.4444,0.2593,1,1,8,"private void showErrorMsg(int code){
switch (code) {
case XDMConstants.ERR_CONN_FAILED:
    txtError.setText(StringResource.get(""ERR_CONN_FAILED""));
  return;
case XDMConstants.ERR_SESSION_FAILED:
txtError.setText(StringResource.get(""ERR_SESSION_FAILED""));
return;
case XDMConstants.ERR_NO_RESUME:
txtError.setText(StringResource.get(""ERR_NO_RESUME""));
return;
case XDMConstants.ERR_INVALID_RESP:
txtError.setText(StringResource.get(""ERR_INVALID_RESP""));
return;
case XDMConstants.ERR_ASM_FAILED:
txtError.setText(StringResource.get(""ERR_ASM_FAILED""));
return;
case XDMConstants.RESUME_FAILED:
txtError.setText(StringResource.get(""RESUME_FAILED""));
return;
case XDMConstants.DISK_FAIURE:
txtError.setText(StringResource.get(""ERR_DISK_FAILED""));
return;
default :
txtError.setText(StringResource.get(""ERR_INTERNAL""));
return;
}
}
"
3853,progress(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\FFmpegExtractorWnd.java,xdm,13,64,50,4,0.1692,0.0779,1,5,5,"public void progress(int progress){
  if (progress >= prg.getMinimum() && progress <= prg.getMaximum()) {
    prg.setValue(progress);
  }
  int prgDiff=progress - lastProgress;
  long now=System.currentTimeMillis();
  long timeSpend=now - prevTime;
  if (timeSpend > 0) {
    if (prgDiff > 0) {
      long eta=(timeSpend * (100 - progress) / 1000 * prgDiff);
      lastProgress=progress;
      statLbl.setText(""ETA: "" + FormatUtilities.hms((int)eta));
    }
    prevTime=now;
  }
}
"
3854,actionPerformed(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\FFmpegExtractorWnd.java,xdm,9,26,16,5,0.3704,0.2424,0,2,5,"@Override public void actionPerformed(ActionEvent e){
  if (e.getSource() instanceof JComponent) {
    String name=((JComponent)e.getSource()).getName();
    if (name == null) {
      return;
    }
    if (name.equals(""CLOSE"")) {
      stop();
    }
    if (name.equals(""MIN"")) {
      this.setExtendedState(this.getExtendedState() | JFrame.ICONIFIED);
    }
  }
}
"
3855,init(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\FFmpegExtractorWnd.java,xdm,61,1664,1498,10,0.0516,0.0455,0.875,2,3,"private void init(){
  setUndecorated(true);
  try {
    if (GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().isWindowTranslucencySupported(WindowTranslucency.TRANSLUCENT)) {
      setOpacity(0.85f);
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  setIconImage(ImageResource.get(""icon.png"").getImage());
  setSize(350,200);
  setLocationRelativeTo(null);
  setResizable(false);
  getContentPane().setLayout(null);
  getContentPane().setBackground(ColorResource.getDarkestBgColor());
  titlePanel=new TitlePanel(null,this);
  titlePanel.setOpaque(false);
  titlePanel.setBounds(0,0,350,50);
  closeBtn=new CustomButton();
  closeBtn.setBounds(320,5,24,24);
  closeBtn.setIcon(ImageResource.get(""close_btn.png""));
  closeBtn.setBackground(ColorResource.getDarkestBgColor());
  closeBtn.setBorderPainted(false);
  closeBtn.setFocusPainted(false);
  closeBtn.setName(""CLOSE"");
  closeBtn.addActionListener(this);
  minBtn=new CustomButton();
  minBtn.setBounds(296,5,24,24);
  minBtn.setIcon(ImageResource.get(""min_btn.png""));
  minBtn.setBackground(ColorResource.getDarkestBgColor());
  minBtn.setBorderPainted(false);
  minBtn.setFocusPainted(false);
  minBtn.setName(""MIN"");
  minBtn.addActionListener(this);
  titleLbl=new JLabel(StringResource.get(""TITLE_CONVERT""));
  titleLbl.setFont(FontResource.getBiggerFont());
  titleLbl.setForeground(ColorResource.getSelectionColor());
  titleLbl.setBounds(25,15,250,30);
  JLabel lineLbl=new JLabel();
  lineLbl.setBackground(ColorResource.getSelectionColor());
  lineLbl.setBounds(0,55,400,2);
  lineLbl.setOpaque(true);
  prg=new JProgressBar();
  prg.setBounds(20,85,350 - 40,5);
  statLbl=new JLabel();
  statLbl.setForeground(Color.WHITE);
  statLbl.setBounds(20,100,350 - 40,25);
  titlePanel.add(titleLbl);
  titlePanel.add(minBtn);
  titlePanel.add(closeBtn);
  add(lineLbl);
  add(titlePanel);
  add(prg);
  add(statLbl);
  panel=new JPanel(null);
  panel.setBounds(0,150,350,50);
  panel.setBackground(Color.DARK_GRAY);
  btnCN=new CustomButton(StringResource.get(""MENU_PAUSE""));
  btnCN.setBounds(0,1,350,50);
  btnCN.setName(""CLOSE"");
  applyStyle(btnCN);
  panel.add(btnCN);
  add(panel);
}
"
3856,applyStyle(CustomButton),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\FFmpegExtractorWnd.java,xdm,11,19,0,3,0.2545,0.3704,0.75,1,1,"private void applyStyle(CustomButton btn){
  btn.addActionListener(this);
  btn.setBackground(ColorResource.getDarkestBgColor());
  btn.setForeground(Color.WHITE);
  btn.setPressedBackground(ColorResource.getDarkerBgColor());
  btn.setFont(FontResource.getBigFont());
  btn.setBorderPainted(false);
  btn.setMargin(new Insets(0,0,0,0));
  btn.setFocusPainted(false);
  btn.setFocusPainted(false);
}
"
3858,stop(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\FFmpegExtractorWnd.java,xdm,8,24,20,5,0.25,0.14,1,1,3,"private void stop(){
  try {
    if (callback != null) {
      callback.stop();
      callback=null;
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  dispose();
}
"
3859,LayeredPanel(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\LayeredPanel.java,xdm,9,33,30,7,0.1556,0.0769,0,2,1,"public LayeredPanel(int opacity){
  bgColor=new Color(0,0,0,opacity);
  setOpaque(false);
  setLayout(null);
  MouseInputAdapter ma=new MouseInputAdapter(){
  }
;
  addMouseListener(ma);
  addMouseMotionListener(ma);
}
"
3861,MainWindow(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,8,28,28,8,0.125,0,0.6,0,2,"public MainWindow(){
  setTitle(StringResource.get(""WINDOW_TITLE""));
  setWindowSizeAndPosition();
  initWindow();
  if (Config.getInstance().isFirstRun()) {
    SettingsPage.getInstance().showPanel(this,""BTN_MONITORING"");
  }
  showNotification();
}
"
3863,updateSidePanel(JLabel),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,9,35,34,5,0.1333,0.0167,1,2,3,"private void updateSidePanel(JLabel lbl){
  for (int i=0; i < lblCatArr.length; i++) {
    if (lbl == lblCatArr[i]) {
      lblCatArr[i].setBackground(ColorResource.getActiveTabColor());
      lblCatArr[i].setOpaque(true);
    }
 else {
      lblCatArr[i].setOpaque(false);
    }
  }
  lv.refresh();
  sp.repaint();
}
"
3865,createToolbar(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,27,224,97,6,0.1254,0.2067,0.833333333,4,2,"private JPanel createToolbar(){
  JPanel p=new JPanel(new BorderLayout());
  Box toolBox=Box.createHorizontalBox();
  toolBox.add(Box.createRigidArea(new Dimension(20,60)));
  toolBox.setBackground(ColorResource.getTitleColor());
  toolBox.setOpaque(true);
  toolBox.add(createToolButton(""ADD_URL"",""tool_add.png""));
  toolBox.add(Box.createRigidArea(new Dimension(10,10)));
  toolBox.add(createToolButton(""DELETE"",""tool_del.png""));
  toolBox.add(Box.createRigidArea(new Dimension(10,10)));
  toolBox.add(createToolButton(""PAUSE"",""tool_pause.png""));
  toolBox.add(Box.createRigidArea(new Dimension(10,10)));
  toolBox.add(createToolButton(""RESUME"",""tool_resume.png""));
  toolBox.add(Box.createRigidArea(new Dimension(10,10)));
  toolBox.add(createToolButton(""OPTIONS"",""tool_settings.png""));
  toolBox.add(Box.createHorizontalGlue());
  JLabel btnMonitoring=new JLabel(ImageResource.get(""on.png""));
  btnMonitoring.setIconTextGap(15);
  btnMonitoring.putClientProperty(""xdmbutton.norollover"",""true"");
  btnMonitoring.setName(""BROWSER_MONITORING"");
  btnMonitoring.setText(StringResource.get(""BROWSER_MONITORING""));
  btnMonitoring.setHorizontalTextPosition(JButton.LEADING);
  btnMonitoring.setFont(FontResource.getBigFont());
  btnMonitoring.setIcon(Config.getInstance().isBrowserMonitoringEnabled() ? ImageResource.get(""on.png"") : ImageResource.get(""off.png""));
  btnMonitoring.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      toggleMonitoring((JLabel)e.getSource());
    }
  }
);
  toolBox.add(btnMonitoring);
  toolBox.add(Box.createRigidArea(new Dimension(25,10)));
  p.add(toolBox);
  return p;
}
"
3867,"createToolButton(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,11,19,0,3,0.2545,0.3704,0.5,3,1,"private JButton createToolButton(String name,String icon){
  CustomButton btn=new CustomButton(ImageResource.get(icon));
  btn.setPressedBackground(ColorResource.getDarkPressedColor());
  btn.setRolloverBackground(Color.DARK_GRAY);
  btn.setBorderPainted(false);
  btn.addActionListener(this);
  btn.setName(name);
  btn.setBackground(ColorResource.getTitleColor());
  btn.setMargin(new Insets(0,0,0,0));
  return btn;
}
"
3868,createSidePanel(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,23,247,241,9,0.0683,0.0225,1,3,2,"private SidePanel createSidePanel(){
  sp=new SidePanel();
  sp.setLayout(null);
  sp.setPreferredSize(new Dimension(150,250));
  lblCatArr=new JLabel[6];
  lblCatArr[0]=createCategoryLabel(""CAT_ALL"");
  lblCatArr[1]=createCategoryLabel(""CAT_DOCUMENTS"");
  lblCatArr[2]=createCategoryLabel(""CAT_COMPRESSED"");
  lblCatArr[3]=createCategoryLabel(""CAT_MUSIC"");
  lblCatArr[4]=createCategoryLabel(""CAT_VIDEOS"");
  lblCatArr[5]=createCategoryLabel(""CAT_PROGRAMS"");
  lblCatArr[0].setBackground(ColorResource.getActiveTabColor());
  lblCatArr[0].setOpaque(true);
  for (int i=0; i < 6; i++) {
    lblCatArr[i].setBounds(0,20 + (i * 35),149,27);
    final int c=i;
    lblCatArr[i].addMouseListener(new MouseAdapter(){
      public void mouseReleased(      MouseEvent e){
        actionPerformed(new ActionEvent(lblCatArr[c],0,""""));
      }
    }
);
    sp.add(lblCatArr[i]);
  }
  return sp;
}
"
3871,createMainMenu(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,58,1477,1301,16,0.0822,0.0692,0.75,11,1,"private void createMainMenu(){
  JMenuBar bar=new JMenuBar();
  bar.setBorderPainted(false);
  bar.setForeground(ColorResource.getWhite());
  bar.setMaximumSize(new Dimension(bar.getMaximumSize().width,30));
  bar.setBackground(ColorResource.getTitleColor());
  JMenu file=createMenu(StringResource.get(""MENU_FILE""));
  addMenuItem(""MENU_ADD_URL"",file);
  addMenuItem(""MENU_VIDEO_DWN"",file);
  addMenuItem(""MENU_DELETE_DWN"",file);
  addMenuItem(""MENU_DELETE_COMPLETED"",file);
  addMenuItem(""MENU_EXPORT"",file);
  addMenuItem(""MENU_IMPORT"",file);
  addMenuItem(""MENU_EXIT"",file);
  JMenu dwn=createMenu(StringResource.get(""MENU_DOWNLOAD""));
  addMenuItem(""MENU_PAUSE"",dwn);
  addMenuItem(""MENU_RESUME"",dwn);
  addMenuItem(""MENU_RESTART"",dwn);
  addMenuItem(""DESC_Q_TITLE"",dwn);
  PopupMenuListener popupListener=new PopupMenuListener(){
    @Override public void popupMenuWillBecomeVisible(    PopupMenuEvent e){
      loadQueueMenu(startQMenu);
      loadQueueMenu(stopQMenu);
    }
    @Override public void popupMenuWillBecomeInvisible(    PopupMenuEvent e){
    }
    @Override public void popupMenuCanceled(    PopupMenuEvent e){
    }
  }
;
  startQMenu=addSubMenu(""MENU_START_Q"",dwn,popupListener);
  stopQMenu=addSubMenu(""MENU_STOP_Q"",dwn,popupListener);
  JMenu tools=createMenu(StringResource.get(""MENU_TOOLS""));
  addMenuItem(""MENU_OPTIONS"",tools);
  addMenuItem(""MENU_REFRESH_LINK"",tools);
  addMenuItem(""MENU_PROPERTIES"",tools);
  addMenuItem(""MENU_SPEED_LIMITER"",tools);
  addMenuItem(""MENU_LANG"",tools);
  addMenuItem(""MENU_BROWSER_INT"",tools);
  JMenu help=createMenu(StringResource.get(""MENU_HELP""));
  addMenuItem(""MENU_CONTENTS"",help);
  addMenuItem(""MENU_HOME_PAGE"",help);
  addMenuItem(""MENU_UPDATE"",help);
  addMenuItem(""OPT_UPDATE_FFMPEG"",help);
  addMenuItem(""MENU_ABOUT"",help);
  bar.add(file);
  bar.add(dwn);
  bar.add(tools);
  bar.add(help);
  Box menuBox=Box.createHorizontalBox();
  menuBox.add(Box.createHorizontalGlue());
  menuBox.add(bar);
  menuBox.add(Box.createHorizontalStrut(30));
  getTitlePanel().add(menuBox);
}
"
3872,createMenu(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,8,18,8,4,0.25,0.2,1,2,1,"private JMenu createMenu(String title){
  JMenu menu=new JMenu(title);
  menu.setFont(FontResource.getBoldFont());
  menu.setBorderPainted(false);
  menu.setBorder(new EmptyBorder(5,5,5,5));
  return menu;
}
"
3873,"addMenuItem(String,JComponent)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,8,18,8,4,0.225,0.16,1,3,1,"private void addMenuItem(String id,JComponent menu){
  JMenuItem mitem=new JMenuItem(StringResource.get(id));
  mitem.setName(id);
  mitem.setFont(FontResource.getNormalFont());
  mitem.addActionListener(this);
  menu.add(mitem);
}
"
3874,"addSubMenu(String,JMenu,PopupMenuListener)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,12,38,10,5,0.1806,0.2306,1,4,1,"private JMenu addSubMenu(String id,JMenu parentMenu,PopupMenuListener popupListener){
  JMenu menu=new JMenu(StringResource.get(id));
  menu.setName(id);
  menu.setFont(FontResource.getNormalFont());
  menu.addActionListener(this);
  menu.setBorderPainted(false);
  menu.getPopupMenu().addPopupMenuListener(popupListener);
  parentMenu.add(menu);
  return menu;
}
"
3875,createCategoryLabel(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,8,13,0,3,0.2813,0.3148,1,2,1,"private JLabel createCategoryLabel(String name){
  JLabel lblCat=new JLabel(StringResource.get(name));
  lblCat.setName(name);
  lblCat.setFont(FontResource.getBigFont());
  lblCat.setForeground(Color.BLACK);
  lblCat.setBorder(new EmptyBorder(5,20,5,5));
  return lblCat;
}
"
3876,createSearchPane(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,63,1713,1473,2,0.0628,0.0658,0.625,7,3,"private Component createSearchPane(){
  btnSort=new CustomButton(""Newest on top"");
  btnSort.setBackground(ColorResource.getActiveTabColor());
  btnSort.setBorderPainted(false);
  btnSort.setFocusPainted(false);
  btnSort.setContentAreaFilled(false);
  btnSort.setFont(FontResource.getNormalFont());
  txtSearch=new JTextField();
  txtSearch.setBackground(Color.WHITE);
  txtSearch.setForeground(Color.BLACK);
  txtSearch.setBorder(null);
  txtSearch.setName(""BTN_SEARCH"");
  txtSearch.addActionListener(this);
  final CustomButton btnSearch=new CustomButton();
  btnSearch.setName(""BTN_SEARCH"");
  btnSearch.setRolloverBackground(Color.WHITE);
  btnSearch.setPressedBackground(Color.WHITE);
  btnSearch.addActionListener(this);
  btnSearch.setPreferredSize(new Dimension(20,20));
  btnSearch.setBackground(Color.WHITE);
  btnSearch.setIcon(ImageResource.get(""search16.png""));
  btnSearch.setBorderPainted(false);
  btnSearch.setFocusPainted(false);
  txtSearch.addActionListener(this);
  Box b=Box.createHorizontalBox();
  b.setOpaque(true);
  b.setBackground(Color.WHITE);
  b.setPreferredSize(new Dimension(130,20));
  b.setMaximumSize(new Dimension(130,20));
  txtSearch.setPreferredSize(new Dimension(70,20));
  txtSearch.setMaximumSize(new Dimension(txtSearch.getMaximumSize().width,20));
  b.add(txtSearch);
  b.add(btnSearch);
  b.setBorder(new LineBorder(Color.LIGHT_GRAY,1));
  Box bp=Box.createHorizontalBox();
  bp.setOpaque(false);
  bp.setBorder(new EmptyBorder(3,3,3,10));
  bp.add(Box.createHorizontalGlue());
  bp.add(btnSort);
  bp.add(Box.createHorizontalStrut(10));
  bp.add(b);
  bp.add(Box.createHorizontalStrut(10));
  sortItems=new JMenuItem[6];
  sortItems[0]=new JMenuItem(StringResource.get(""SORT_DATE""));
  sortItems[0].setName(""0"");
  sortItems[1]=new JMenuItem(StringResource.get(""SORT_SIZE""));
  sortItems[1].setName(""1"");
  sortItems[2]=new JMenuItem(StringResource.get(""SORT_NAME""));
  sortItems[2].setName(""2"");
  sortItems[3]=new JMenuItem(StringResource.get(""SORT_TYPE""));
  sortItems[3].setName(""3"");
  sortItems[4]=new JMenuItem(StringResource.get(""SORT_ASC""));
  sortItems[4].setName(""4"");
  sortItems[5]=new JMenuItem(StringResource.get(""SORT_DESC""));
  sortItems[5].setName(""5"");
  final JPopupMenu popSort=new JPopupMenu();
  for (int i=0; i < sortItems.length; i++) {
    popSort.add(sortItems[i]);
    if (i > 3) {
      sortItems[i].putClientProperty(""bgColor"",ColorResource.getDarkBgColor());
    }
    sortItems[i].addActionListener(this);
  }
  updateSortMenu();
  popSort.setInvoker(btnSort);
  btnSort.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      popSort.show(btnSort,0,btnSort.getHeight());
    }
  }
);
  return bp;
}
"
3878,updateSortMenu(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,12,43,20,2,0.3333,0.1919,0.428571429,1,9,"private void updateSortMenu(){
  for (int i=0; i < sortItems.length; i++) {
    if (i >= 0 && i <= 3) {
      if (i == Config.getInstance().getSortField()) {
        sortItems[i].setFont(FontResource.getBoldFont());
        sortItems[i].setForeground(ColorResource.getLightFontColor());
      }
 else {
        sortItems[i].setFont(FontResource.getNormalFont());
        sortItems[i].setForeground(ColorResource.getDeepFontColor());
      }
    }
  }
  sortItems[4].setFont(Config.getInstance().getSortAsc() ? FontResource.getBoldFont() : FontResource.getNormalFont());
  sortItems[4].setForeground(Config.getInstance().getSortAsc() ? ColorResource.getLightFontColor() : ColorResource.getDeepFontColor());
  sortItems[5].setFont((!Config.getInstance().getSortAsc()) ? FontResource.getBoldFont() : FontResource.getNormalFont());
  sortItems[5].setForeground((!Config.getInstance().getSortAsc()) ? ColorResource.getLightFontColor() : ColorResource.getDeepFontColor());
}
"
3879,createTabs(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,33,443,358,3,0.0909,0.0721,0.625,7,2,"private void createTabs(){
  CustomButton btnAllTab=new CustomButton(StringResource.get(""ALL_DOWNLOADS"")), btnIncompleteTab=new CustomButton(StringResource.get(""ALL_UNFINISHED"")), btnCompletedTab=new CustomButton(StringResource.get(""ALL_FINISHED""));
  btnTabArr=new CustomButton[3];
  btnTabArr[0]=btnAllTab;
  btnTabArr[0].setName(""ALL_DOWNLOADS"");
  btnTabArr[1]=btnIncompleteTab;
  btnTabArr[1].setName(""ALL_UNFINISHED"");
  btnTabArr[2]=btnCompletedTab;
  btnTabArr[2].setName(""ALL_FINISHED"");
  for (int i=0; i < 3; i++) {
    btnTabArr[i].setFont(FontResource.getBigBoldFont());
    btnTabArr[i].setBorderPainted(false);
    btnTabArr[i].setFocusPainted(false);
    btnTabArr[i].addActionListener(this);
  }
  btnAllTab.setBackground(ColorResource.getActiveTabColor());
  btnAllTab.setForeground(ColorResource.getDarkBgColor());
  btnIncompleteTab.setBackground(ColorResource.getTitleColor());
  btnIncompleteTab.setForeground(ColorResource.getDeepFontColor());
  btnCompletedTab.setBackground(ColorResource.getTitleColor());
  btnCompletedTab.setForeground(ColorResource.getDeepFontColor());
  JPanel pp=new JPanel(new BorderLayout());
  pp.setOpaque(false);
  JPanel p=new JPanel(new GridLayout(1,3,5,0));
  p.setOpaque(false);
  Dimension d=new Dimension(380,30);
  p.setPreferredSize(d);
  p.setMaximumSize(d);
  p.setMinimumSize(d);
  p.setBackground(Color.WHITE);
  p.add(btnAllTab);
  p.add(btnIncompleteTab);
  p.add(btnCompletedTab);
  pp.add(p,BorderLayout.EAST);
  getTitlePanel().add(pp,BorderLayout.SOUTH);
}
"
3880,tabClicked(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,8,21,14,3,0.2917,0.2407,0.25,2,3,"private void tabClicked(ActionEvent e){
  for (int i=0; i < 3; i++) {
    if (btnTabArr[i] == e.getSource()) {
      btnTabArr[i].setBackground(ColorResource.getActiveTabColor());
      btnTabArr[i].setForeground(ColorResource.getDarkBgColor());
    }
 else {
      btnTabArr[i].setBackground(ColorResource.getTitleColor());
      btnTabArr[i].setForeground(ColorResource.getDeepFontColor());
    }
  }
}
"
3881,initWindow(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,36,550,470,10,0.0741,0.0784,0.777777778,4,1,"private void initWindow(){
  setIconImage(ImageResource.get(""icon.png"").getImage());
  JLabel lblTitle=new JLabel(StringResource.get(""WINDOW_TITLE""));
  lblTitle.setBorder(new EmptyBorder(20,20,0,0));
  lblTitle.setFont(FontResource.getBiggestFont());
  lblTitle.setForeground(ColorResource.getWhite());
  getTitlePanel().add(lblTitle,BorderLayout.WEST);
  createTabs();
  createMainMenu();
  BarPanel bp=new BarPanel();
  bp.setLayout(new BorderLayout());
  bp.add(Box.createRigidArea(new Dimension(0,30)));
  bp.add(createSearchPane(),BorderLayout.EAST);
  JPanel panCenter=new JPanel(new BorderLayout());
  panCenter.setBackground(Color.WHITE);
  panCenter.add(bp,BorderLayout.NORTH);
  JPanel pClient=new JPanel(new BorderLayout());
  pClient.add(panCenter);
  pClient.add(createSidePanel(),BorderLayout.WEST);
  toolbar=createToolbar();
  pClient.add(toolbar,BorderLayout.SOUTH);
  add(pClient);
  sortStatusText=new String[4][2];
  sortStatusText[0][0]=StringResource.get(""SORT_DATE_DESC"");
  sortStatusText[0][1]=StringResource.get(""SORT_DATE_ASC"");
  sortStatusText[1][0]=StringResource.get(""SORT_SIZE_DESC"");
  sortStatusText[1][1]=StringResource.get(""SORT_SIZE_ASC"");
  sortStatusText[2][0]=StringResource.get(""SORT_NAME_DESC"");
  sortStatusText[2][1]=StringResource.get(""SORT_NAME_ASC"");
  sortStatusText[3][0]=StringResource.get(""SORT_TYPE_DESC"");
  sortStatusText[3][1]=StringResource.get(""SORT_TYPE_ASC"");
  setMenuActionListener(this);
  lv=new DownloadListView(panCenter);
  filter();
  createPopupMenu();
}
"
3883,stopQueue(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,9,30,24,3,0.2222,0.101,0.666666667,4,3,"private void stopQueue(String name){
  String queueId="""";
  String[] arr=name.split("":"");
  if (arr.length > 1) {
    queueId=arr[1].trim();
  }
  DownloadQueue q=XDMApp.getInstance().getQueueById(queueId);
  if (q != null) {
    q.stop();
  }
}
"
3884,startQueue(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,9,30,24,3,0.2222,0.101,0.666666667,4,3,"private void startQueue(String name){
  String queueId="""";
  String[] arr=name.split("":"");
  if (arr.length > 1) {
    queueId=arr[1].trim();
  }
  DownloadQueue q=XDMApp.getInstance().getQueueById(queueId);
  if (q != null) {
    q.start();
  }
}
"
3885,loadQueueMenu(JMenu),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,6,9,3,3,0.6667,0.4286,0,1,3,"private void loadQueueMenu(JMenu menu){
  if (menu.getName().equals(""MENU_START_Q"")) {
    loadStartQueueMenu(menu);
  }
 else   if (menu.getName().equals(""MENU_STOP_Q"")) {
    loadStopQueueMenu(menu);
  }
}
"
3886,loadStopQueueMenu(JMenu),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,12,49,32,3,0.1875,0.1051,0.5,5,3,"private void loadStopQueueMenu(JMenu menu){
  menu.removeAll();
  ArrayList<DownloadQueue> queues=XDMApp.getInstance().getQueueList();
  for (int i=0; i < queues.size(); i++) {
    DownloadQueue q=queues.get(i);
    if (q.isRunning()) {
      JMenuItem mitem=new JMenuItem(q.getName());
      mitem.setForeground(ColorResource.getLightFontColor());
      mitem.setName(""STOP:"" + q.getQueueId());
      mitem.addActionListener(this);
      menu.add(mitem);
    }
  }
}
"
3887,loadStartQueueMenu(JMenu),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,12,49,32,3,0.1875,0.1051,0.5,5,3,"private void loadStartQueueMenu(JMenu menu){
  menu.removeAll();
  ArrayList<DownloadQueue> queues=XDMApp.getInstance().getQueueList();
  for (int i=0; i < queues.size(); i++) {
    DownloadQueue q=queues.get(i);
    if (!q.isRunning()) {
      JMenuItem mitem=new JMenuItem(q.getName());
      mitem.setForeground(ColorResource.getLightFontColor());
      mitem.setName(""START:"" + q.getQueueId());
      mitem.addActionListener(this);
      menu.add(mitem);
    }
  }
}
"
3888,createPopupMenu(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,25,203,106,3,0.1077,0.2267,1,9,5,"private void createPopupMenu(){
  popupCtx=new JPopupMenu();
  addMenuItem(""CTX_OPEN_FILE"",popupCtx);
  addMenuItem(""CTX_OPEN_FOLDER"",popupCtx);
  addMenuItem(""CTX_SAVE_AS"",popupCtx);
  addMenuItem(""MENU_PAUSE"",popupCtx);
  addMenuItem(""MENU_RESUME"",popupCtx);
  addMenuItem(""MENU_DELETE_DWN"",popupCtx);
  addMenuItem(""MENU_REFRESH_LINK"",popupCtx);
  addMenuItem(""CTX_COPY_URL"",popupCtx);
  addMenuItem(""CTX_COPY_FILE"",popupCtx);
  convertMenu=createMenu(StringResource.get(""OPT_CONVERT""));
  convertMenu.setBorder(new EmptyBorder(5,10,5,5));
  convertMenu.setFont(FontResource.getNormalFont());
  MediaFormat[] fmts=MediaFormats.getSupportedFormats();
  for (int i=1; i < fmts.length; i++) {
    MediaFormat fmt=fmts[i];
    JMenuItem mitem=new JMenuItem(fmt.toString());
    mitem.setName(""FORMAT="" + i);
    mitem.addActionListener(this);
    convertMenu.add(mitem);
  }
  popupCtx.add(convertMenu);
  addMenuItem(""MENU_PROPERTIES"",popupCtx);
  popupCtx.setInvoker(lv.getTable());
  lv.getTable().addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent me){
      if (me.getButton() == MouseEvent.BUTTON3 || SwingUtilities.isRightMouseButton(me) || me.isPopupTrigger() || isMacPopupTrigger(me)) {
        Point p=me.getPoint();
        JTable tbl=lv.getTable();
        if (tbl.getRowCount() < 1)         return;
        if (tbl.getSelectedRow() < 0) {
          int row=tbl.rowAtPoint(p);
          if (row >= 0) {
            tbl.setRowSelectionInterval(row,row);
          }
        }
        if (tbl.getSelectedRows().length > 0) {
          popupCtx.show(lv.getTable(),me.getX(),me.getY());
        }
      }
    }
  }
);
}
"
3891,showProperties(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,26,265,205,3,0.1058,0.075,0.5,11,9,"private void showProperties(){
  String[] ids=lv.getSelectedIds();
  if (ids.length > 0) {
    String id=ids[0];
    DownloadEntry ent=XDMApp.getInstance().getEntry(id);
    if (id != null) {
      PropertiesPage propPage=PropertiesPage.getPage(this);
      HttpMetadata md=HttpMetadata.load(id);
      HeaderCollection headers=md.getHeaders();
      String referer="""";
      StringBuilder cookies=new StringBuilder();
      Iterator<HttpHeader> cookieIt=headers.getAll();
      while (cookieIt.hasNext()) {
        HttpHeader header=cookieIt.next();
        if (""referer"".equalsIgnoreCase(header.getName())) {
          referer=header.getValue();
        }
        if (""cookie"".equalsIgnoreCase(header.getName())) {
          cookies.append(header.getValue() + ""\n"");
        }
      }
      String type=""HTTP"";
      if (md instanceof DashMetadata) {
        type=""DASH"";
      }
 else       if (md instanceof HlsMetadata) {
        type=""HLS"";
      }
 else       if (md instanceof HdsMetadata) {
        type=""HDS"";
      }
      propPage.setDetails(ent.getFile(),ent.getFolder(),ent.getSize(),md.getUrl(),referer,ent.getDateStr(),cookies.toString(),type);
      propPage.showPanel();
    }
  }
}
"
3892,openRefreshPage(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,14,79,67,4,0.125,0.0541,0.666666667,6,6,"public void openRefreshPage(){
  String[] ids=lv.getSelectedIds();
  if (ids.length > 0) {
    String id=ids[0];
    DownloadEntry ent=XDMApp.getInstance().getEntry(id);
    if (ent == null) {
      return;
    }
    if (!(ent.getState() == XDMConstants.PAUSED || ent.getState() == XDMConstants.FAILED)) {
      return;
    }
    try {
      HttpMetadata md=HttpMetadata.load(id);
      RefreshUrlPage rp=RefreshUrlPage.getPage(this);
      rp.setDetails(md);
      rp.showPanel();
    }
 catch (    Exception e2) {
      Logger.log(e2);
    }
  }
}
"
3893,openFile(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,11,43,31,5,0.1616,0.1281,0.666666667,4,5,"public void openFile(String id){
  DownloadEntry ent=XDMApp.getInstance().getEntry(id);
  if (ent != null) {
    if (ent.getState() == XDMConstants.FINISHED) {
      try {
        XDMUtils.openFile(ent.getFile(),ent.getFolder());
      }
 catch (      FileNotFoundException e) {
        Logger.log(e);
        MessageBox.show(this,StringResource.get(""ERR_MSG_FILE_NOT_FOUND""),StringResource.get(""ERR_MSG_FILE_NOT_FOUND_MSG""),MessageBox.OK,MessageBox.OK);
      }
catch (      Exception e) {
        Logger.log(e);
      }
    }
  }
}
"
3894,openFolder(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,11,43,31,5,0.1616,0.1281,0.666666667,4,5,"public void openFolder(String id){
  DownloadEntry ent=XDMApp.getInstance().getEntry(id);
  if (ent != null) {
    if (ent.getState() == XDMConstants.FINISHED) {
      try {
        XDMUtils.openFolder(ent.getFile(),ent.getFolder());
      }
 catch (      FileNotFoundException e) {
        Logger.log(e);
        MessageBox.show(this,StringResource.get(""ERR_MSG_FILE_NOT_FOUND""),StringResource.get(""ERR_MSG_FILE_NOT_FOUND_MSG""),MessageBox.OK,MessageBox.OK);
      }
catch (      Exception e) {
        Logger.log(e);
      }
    }
  }
}
"
3895,convert(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,25,264,228,6,0.0863,0.0416,0.666666667,13,6,"private void convert(String name){
  try {
    File inputFile=null, outputFile=null;
    String[] ids=lv.getSelectedIds();
    if (ids.length > 0) {
      String id=ids[0];
      DownloadEntry ent=XDMApp.getInstance().getEntry(id);
      if (ent.getState() != XDMConstants.FINISHED) {
        return;
      }
      inputFile=new File(ent.getFolder(),ent.getFile());
      if (!inputFile.exists()) {
        System.out.println(""Input file does not exists"");
      }
      int index=Integer.parseInt(name.split(""="")[1]);
      MediaFormat fmt=MediaFormats.getSupportedFormats()[index];
      String ext=fmt.getFormat();
      String newFileName=XDMUtils.getFileNameWithoutExtension(ent.getFile()) + ""."" + ext;
      JFileChooser jfc=new JFileChooser();
      jfc.setSelectedFile(new File(ent.getFolder(),newFileName));
      if (jfc.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
        return;
      }
      outputFile=jfc.getSelectedFile();
      System.out.println(outputFile);
      MediaConversionWnd wnd=new MediaConversionWnd(inputFile,outputFile,fmt,-1);
      wnd.setVisible(true);
      wnd.convert();
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
}
"
3897,changeFile(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,11,36,17,3,0.2159,0.1488,0.285714286,4,4,"private void changeFile(String id){
  DownloadEntry ent=XDMApp.getInstance().getEntry(id);
  if (ent == null)   return;
  if (ent.getState() == XDMConstants.FINISHED) {
    return;
  }
  JFileChooser jfc=new JFileChooser();
  jfc.setSelectedFile(new File(XDMApp.getInstance().getOutputFolder(id),XDMApp.getInstance().getOutputFile(id,false)));
  if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
    File f=jfc.getSelectedFile();
    ent.setFolder(f.getParent());
    ent.setFile(f.getName());
  }
}
"
3900,showNotification(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,11,46,37,6,0.1818,0.0852,0.5,1,3,"public void showNotification(){
  int mode=XDMApp.getInstance().getNotification();
  if (mode == -1) {
    clearNotification();
    return;
  }
  if (updateNotifyPanel == null) {
    updateNotifyPanel=new UpdateNotifyPanel();
    toolbar.add(updateNotifyPanel,BorderLayout.SOUTH);
  }
  updateNotifyPanel.setDetails(mode);
  revalidate();
  repaint();
}
"
3901,clearNotification(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MainWindow.java,xdm,7,15,9,4,0.3571,0.25,0,0,2,"private void clearNotification(){
  if (updateNotifyPanel == null)   return;
  updateNotifyPanel.setVisible(false);
  toolbar.remove(updateNotifyPanel);
  updateNotifyPanel=null;
  invalidate();
  repaint();
}
"
3902,"MediaConversionWnd(File,File,MediaFormat,long)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaConversionWnd.java,xdm,7,21,21,7,0.1429,0,0,8,1,"public MediaConversionWnd(File input,File output,MediaFormat format,long sourceDuration){
  this.input=input;
  this.output=output;
  this.format=format;
  this.sourceDuration=sourceDuration;
  init();
}
"
3904,progress(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaConversionWnd.java,xdm,13,64,50,4,0.1692,0.0779,1,5,5,"@Override public void progress(int progress){
  if (progress >= prg.getMinimum() && progress <= prg.getMaximum()) {
    prg.setValue(progress);
  }
  int prgDiff=progress - lastProgress;
  long now=System.currentTimeMillis();
  long timeSpend=now - prevTime;
  if (timeSpend > 0) {
    if (prgDiff > 0) {
      long eta=(timeSpend * (100 - progress) / 1000 * prgDiff);
      lastProgress=progress;
      statLbl.setText(""ETA: "" + FormatUtilities.hms((int)eta));
    }
    prevTime=now;
  }
}
"
3905,actionPerformed(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaConversionWnd.java,xdm,9,26,16,5,0.3704,0.2424,0,2,5,"@Override public void actionPerformed(ActionEvent e){
  if (e.getSource() instanceof JComponent) {
    String name=((JComponent)e.getSource()).getName();
    if (name == null) {
      return;
    }
    if (name.equals(""CLOSE"")) {
      stop();
    }
    if (name.equals(""MIN"")) {
      this.setExtendedState(this.getExtendedState() | JFrame.ICONIFIED);
    }
  }
}
"
3906,init(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaConversionWnd.java,xdm,61,1664,1498,10,0.0516,0.0455,0.875,2,3,"private void init(){
  setUndecorated(true);
  try {
    if (GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().isWindowTranslucencySupported(WindowTranslucency.TRANSLUCENT)) {
      setOpacity(0.85f);
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  setIconImage(ImageResource.get(""icon.png"").getImage());
  setSize(350,200);
  setLocationRelativeTo(null);
  setResizable(false);
  getContentPane().setLayout(null);
  getContentPane().setBackground(ColorResource.getDarkestBgColor());
  titlePanel=new TitlePanel(null,this);
  titlePanel.setOpaque(false);
  titlePanel.setBounds(0,0,350,50);
  closeBtn=new CustomButton();
  closeBtn.setBounds(320,5,24,24);
  closeBtn.setIcon(ImageResource.get(""close_btn.png""));
  closeBtn.setBackground(ColorResource.getDarkestBgColor());
  closeBtn.setBorderPainted(false);
  closeBtn.setFocusPainted(false);
  closeBtn.setName(""CLOSE"");
  closeBtn.addActionListener(this);
  minBtn=new CustomButton();
  minBtn.setBounds(296,5,24,24);
  minBtn.setIcon(ImageResource.get(""min_btn.png""));
  minBtn.setBackground(ColorResource.getDarkestBgColor());
  minBtn.setBorderPainted(false);
  minBtn.setFocusPainted(false);
  minBtn.setName(""MIN"");
  minBtn.addActionListener(this);
  titleLbl=new JLabel(StringResource.get(""TITLE_CONVERT""));
  titleLbl.setFont(FontResource.getBiggerFont());
  titleLbl.setForeground(ColorResource.getSelectionColor());
  titleLbl.setBounds(25,15,250,30);
  JLabel lineLbl=new JLabel();
  lineLbl.setBackground(ColorResource.getSelectionColor());
  lineLbl.setBounds(0,55,400,2);
  lineLbl.setOpaque(true);
  prg=new JProgressBar();
  prg.setBounds(20,85,350 - 40,5);
  statLbl=new JLabel();
  statLbl.setForeground(Color.WHITE);
  statLbl.setBounds(20,100,350 - 40,25);
  titlePanel.add(titleLbl);
  titlePanel.add(minBtn);
  titlePanel.add(closeBtn);
  add(lineLbl);
  add(titlePanel);
  add(prg);
  add(statLbl);
  panel=new JPanel(null);
  panel.setBounds(0,150,350,50);
  panel.setBackground(Color.DARK_GRAY);
  btnCN=new CustomButton(StringResource.get(""MENU_PAUSE""));
  btnCN.setBounds(0,1,350,50);
  btnCN.setName(""CLOSE"");
  applyStyle(btnCN);
  panel.add(btnCN);
  add(panel);
}
"
3907,applyStyle(CustomButton),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaConversionWnd.java,xdm,11,19,0,3,0.2545,0.3704,0.75,1,1,"private void applyStyle(CustomButton btn){
  btn.addActionListener(this);
  btn.setBackground(ColorResource.getDarkestBgColor());
  btn.setForeground(Color.WHITE);
  btn.setPressedBackground(ColorResource.getDarkerBgColor());
  btn.setFont(FontResource.getBigFont());
  btn.setBorderPainted(false);
  btn.setMargin(new Insets(0,0,0,0));
  btn.setFocusPainted(false);
  btn.setFocusPainted(false);
}
"
3908,finished(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaConversionWnd.java,xdm,7,20,19,6,0.1714,0.0185,1,1,2,"private void finished(int ret){
  if (ret == 0) {
    dispose();
  }
 else {
    prg.setVisible(false);
    statLbl.setText(StringResource.get(""LBL_CONV_FAILED""));
    btnCN.setText(StringResource.get(""LBL_CLOSE""));
  }
}
"
3909,stop(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaConversionWnd.java,xdm,8,24,20,5,0.25,0.14,1,1,3,"private void stop(){
  try {
    if (ffmpeg != null) {
      ffmpeg.stop();
      ffmpeg=null;
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  dispose();
}
"
3912,initUI(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaDownloaderWnd.java,xdm,101,4724,4398,15,0.0321,0.0347,0.866666667,10,3,"private void initUI(){
  setUndecorated(true);
  try {
    if (GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().isWindowTranslucencySupported(WindowTranslucency.TRANSLUCENT)) {
      setOpacity(0.85f);
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  setIconImage(ImageResource.get(""icon.png"").getImage());
  setSize(500,420);
  setLocationRelativeTo(null);
  getContentPane().setLayout(null);
  getContentPane().setBackground(ColorResource.getDarkestBgColor());
  JPanel titlePanel=new TitlePanel(null,this);
  titlePanel.setOpaque(false);
  titlePanel.setBounds(0,0,getWidth(),50);
  JButton closeBtn=new CustomButton();
  closeBtn.setBounds(getWidth() - 35,5,30,30);
  closeBtn.setBackground(ColorResource.getDarkestBgColor());
  closeBtn.setBorderPainted(false);
  closeBtn.setFocusPainted(false);
  closeBtn.setName(""CLOSE"");
  closeBtn.setIcon(ImageResource.get(""close_btn.png""));
  closeBtn.addActionListener(this);
  titlePanel.add(closeBtn);
  JLabel titleLbl=new JLabel(StringResource.get(""TITLE_DOWN_VID""));
  titleLbl.setFont(FontResource.getBiggerFont());
  titleLbl.setForeground(ColorResource.getSelectionColor());
  titleLbl.setBounds(25,15,200,30);
  titlePanel.add(titleLbl);
  JLabel lineLbl=new JLabel();
  lineLbl.setBackground(ColorResource.getSelectionColor());
  lineLbl.setBounds(0,55,getWidth(),1);
  lineLbl.setOpaque(true);
  add(lineLbl);
  add(titlePanel);
  int y=55;
  int h=30;
  y+=15;
  prg=new JProgressBar();
  prg.setIndeterminate(true);
  prg.setBounds(15,y,getWidth() - 30,5);
  prg.setBorder(null);
  prg.setVisible(false);
  add(prg);
  txtURL=new JTextField();
  PopupAdapter.registerTxtPopup(txtURL);
  txtURL.setBounds(15,y,getWidth() - 30 - 110,h);
  add(txtURL);
  btnStart=createButton(""BTN_SEARCH_VIDEO"");
  btnStart.setBounds(getWidth() - 15 - 100,y,100,h);
  btnStart.setName(""START"");
  add(btnStart);
  VideoDownloadItem item1=new VideoDownloadItem();
  item1.title=""First item for text test"";
  item1.desc=""Sample description for text tesing description"";
  h=300;
  model=new VideoTableModel();
  table=new JTable(model);
  table.setRowHeight(70);
  table.setShowGrid(false);
  table.setOpaque(false);
  table.setBorder(new EmptyBorder(0,0,0,0));
  table.setShowHorizontalLines(false);
  table.setShowVerticalLines(false);
  table.setDefaultRenderer(YdlVideo.class,new VideoItemRenderer());
  table.setDefaultEditor(YdlVideo.class,new VideoItemEditor());
  table.setTableHeader(null);
  jsp=new JScrollPane();
  jsp.setBounds(15,y,getWidth() - 30,h);
  jsp.setBorder(new LineBorder(ColorResource.getDarkBgColor()));
  jsp.getViewport().setOpaque(false);
  jsp.setViewportView(table);
  jsp.setOpaque(false);
  DarkScrollBar scrollBar=new DarkScrollBar(JScrollBar.VERTICAL);
  jsp.setVerticalScrollBar(scrollBar);
  jsp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  add(jsp);
  jsp.setVisible(false);
  y+=h;
  y+=10;
  h=30;
  btnDwn=createButton(""BTN_DOWNLOAD_NOW"");
  btnDwn.setBounds(getWidth() - 15 - 150,y,150,h);
  btnDwn.setName(""DOWNLOAD"");
  btnDwn.setVisible(false);
  add(btnDwn);
  btnQ=createButton(""BTN_DOWNLOAD_LATER"");
  btnQ.setBounds(getWidth() - 15 - 150- 160,y,150,h);
  btnQ.setName(""BTN_Q"");
  add(btnQ);
  btnQ.setVisible(false);
  btnBack=createButton(""BTN_BACK"");
  btnBack.setBounds(15,y,130,h);
  btnBack.setName(""BACK"");
  add(btnBack);
  btnBack.setVisible(false);
  addWindowListener(new WindowAdapter(){
    @Override public void windowActivated(    WindowEvent e){
      txtURL.requestFocus();
    }
  }
);
}
"
3914,createButton(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaDownloaderWnd.java,xdm,10,17,0,3,0.275,0.4205,1,2,1,"private JButton createButton(String name){
  JButton btn=new CustomButton(StringResource.get(name));
  btn.setBackground(ColorResource.getDarkBtnColor());
  btn.setBorderPainted(false);
  btn.setFocusPainted(false);
  btn.setForeground(Color.WHITE);
  btn.setFont(FontResource.getNormalFont());
  btn.addActionListener(this);
  return btn;
}
"
3915,actionPerformed(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaDownloaderWnd.java,xdm,41,764,708,16,0.064,0.0574,1,3,9,"@Override public void actionPerformed(ActionEvent e){
  JComponent c=(JComponent)e.getSource();
  String name=c.getName();
  if (""START"".equals(name)) {
    model.clear();
    if (txtURL.getText().length() < 1) {
      JOptionPane.showMessageDialog(this,StringResource.get(""MSG_NO_URL""));
      return;
    }
    if (!XDMUtils.checkComponentsInstalled()) {
      JOptionPane.showMessageDialog(this,StringResource.get(""LBL_COMPONENT_MISSING""));
      return;
    }
    if (!txtURL.getText().startsWith(""http"")) {
      txtURL.setText(""http://"" + txtURL.getText());
    }
    jsp.setVisible(false);
    prg.setVisible(true);
    btnDwn.setVisible(true);
    btnDwn.setText(StringResource.get(""BTN_STOP_PROCESSING""));
    btnDwn.setName(""STOP"");
    btnStart.setVisible(false);
    txtURL.setVisible(false);
    stop=false;
    getVideoItems(txtURL.getText());
  }
  if (""DOWNLOAD"".equals(name)) {
    table.getDefaultEditor(YdlVideo.class).stopCellEditing();
    downloadVideo();
  }
  if (""CLOSE"".equals(name)) {
    stop();
    dispose();
  }
  if (""STOP"".equals(name)) {
    stop();
  }
  if (""BACK"".equals(name)) {
    table.getDefaultEditor(YdlVideo.class).stopCellEditing();
    model.clear();
    prg.setVisible(false);
    txtURL.setVisible(true);
    btnStart.setVisible(true);
    btnDwn.setName(""DOWNLOAD"");
    btnDwn.setText(StringResource.get(""BTN_DOWNLOAD_NOW""));
    btnDwn.setVisible(false);
    btnQ.setVisible(false);
    jsp.setVisible(false);
    btnBack.setVisible(false);
  }
}
"
3916,stop(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaDownloaderWnd.java,xdm,14,86,81,10,0.1,0.044,1,0,2,"private void stop(){
  prg.setVisible(false);
  txtURL.setVisible(true);
  btnStart.setVisible(true);
  btnDwn.setName(""DOWNLOAD"");
  btnDwn.setText(StringResource.get(""BTN_DOWNLOAD_NOW""));
  btnDwn.setVisible(false);
  btnQ.setVisible(false);
  jsp.setVisible(false);
  btnBack.setVisible(false);
  stop=true;
  if (ydl != null) {
    ydl.stop();
  }
}
"
3917,showVideoList(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaDownloaderWnd.java,xdm,10,42,39,8,0.1286,0.0455,1,0,1,"private void showVideoList(){
  btnStart.setVisible(false);
  txtURL.setVisible(false);
  prg.setVisible(false);
  jsp.setVisible(true);
  btnDwn.setName(""DOWNLOAD"");
  btnDwn.setText(StringResource.get(""BTN_DOWNLOAD_NOW""));
  btnDwn.setVisible(true);
  btnBack.setVisible(true);
}
"
3919,downloadVideo(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MediaDownloaderWnd.java,xdm,40,626,472,3,0.0875,0.0724,0.571428571,14,11,"private void downloadVideo(){
  for (  int index : table.getSelectedRows()) {
    YdlVideo video=(YdlVideo)model.getValueAt(index,0);
    YdlMediaFormat fmt=video.mediaFormats.get(video.index);
    String title=video.title;
    System.out.println(title + "" "" + title+ fmt.type);
    String file=XDMUtils.getFileName(title) + ""."" + fmt.ext;
switch (fmt.type) {
case YdlResponse.DASH_HTTP:
      DashMetadata dm=new DashMetadata();
    dm.setYdlUrl(txtURL.getText());
  dm.setUrl(fmt.videoSegments[0]);
dm.setUrl2(fmt.audioSegments[0]);
for (HttpHeader header : fmt.headers) {
dm.getHeaders().addHeader(header);
}
for (HttpHeader header : fmt.headers2) {
dm.getHeaders2().addHeader(header);
}
XDMApp.getInstance().addVideo(dm,file);
break;
case YdlResponse.HLS:
HlsMetadata md=new HlsMetadata();
md.setYdlUrl(txtURL.getText());
md.setUrl(fmt.url);
for (HttpHeader header : fmt.headers) {
md.getHeaders().addHeader(header);
}
XDMApp.getInstance().addVideo(md,file);
break;
case YdlResponse.HDS:
HdsMetadata hm=new HdsMetadata();
hm.setYdlUrl(txtURL.getText());
hm.setUrl(fmt.url);
for (HttpHeader header : fmt.headers) {
hm.getHeaders().addHeader(header);
}
XDMApp.getInstance().addVideo(hm,file);
break;
case YdlResponse.HTTP:
HttpMetadata ht=new HttpMetadata();
ht.setYdlUrl(txtURL.getText());
ht.setUrl(fmt.url);
for (HttpHeader header : fmt.headers) {
ht.getHeaders().addHeader(header);
}
XDMApp.getInstance().addVideo(ht,file);
break;
}
}
}
"
3921,MessageBox(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MessageBox.java,xdm,8,25,22,6,0.375,0.1667,0,1,1,"private MessageBox(){
  setLayout(null);
  MouseInputAdapter ma=new MouseInputAdapter(){
  }
;
  addMouseListener(ma);
  addMouseMotionListener(ma);
  init();
}
"
3922,"show(XDMFrame,String,String,int,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MessageBox.java,xdm,16,42,0,4,0.1597,0.3473,1,5,3,"public static int show(XDMFrame parent,String title,String msg,int buttons,int defaultButton){
  if (msgBox == null) {
    msgBox=new MessageBox();
  }
  msgBox.parent=parent;
  msgBox.lblTitle.setText(title);
  msgBox.txtMessage.setText(msg);
  msgBox.setLocation((parent.getWidth() - 350) / 2,(parent.getHeight() - 210) / 2);
  if (buttons == OK_OPTION) {
    msgBox.panel2.setVisible(false);
    msgBox.panel3.setVisible(true);
  }
 else {
    msgBox.panel2.setVisible(true);
    msgBox.panel3.setVisible(false);
  }
  msgBox.defaultButton=defaultButton;
  parent.showModal(msgBox);
  return msgBox.res;
}
"
3923,selectDefaultButton(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MessageBox.java,xdm,7,17,13,4,0.2857,0.1833,0,0,4,"public void selectDefaultButton(){
  if (defaultButton == YES) {
    msgBox.cbBtnYes.requestFocusInWindow();
  }
 else   if (defaultButton == NO) {
    msgBox.cbBtnNo.requestFocusInWindow();
  }
 else   if (defaultButton == OK) {
    msgBox.cbBtnOk.requestFocusInWindow();
  }
}
"
3927,applyStyle(JButton),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MessageBox.java,xdm,13,42,6,5,0.1868,0.2222,1,1,1,"void applyStyle(JButton btn){
  btn.addActionListener(this);
  btn.setBackground(ColorResource.getDarkerBgColor());
  btn.setForeground(Color.WHITE);
  btn.setFocusable(true);
  btn.setFont(FontResource.getBigFont());
  btn.setBorderPainted(false);
  btn.setMargin(new Insets(0,0,0,0));
  btn.getInputMap(WHEN_FOCUSED).put(KeyStroke.getKeyStroke(""ENTER""),""pressed"");
  btn.getInputMap(WHEN_FOCUSED).put(KeyStroke.getKeyStroke(""released ENTER""),""released"");
}
"
3932,actionPerformed(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\MessageBox.java,xdm,10,41,37,7,0.14,0.0397,1,1,3,"@Override public void actionPerformed(ActionEvent e){
  if (e.getSource() == cbBtnOk) {
    res=OK;
  }
 else   if (e.getSource() == cbBtnYes) {
    res=YES;
  }
 else {
    res=NO;
  }
  parent.hideModal(msgBox);
}
"
3939,"NewDownloadWindow(HttpMetadata,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\NewDownloadWindow.java,xdm,16,106,92,8,0.1106,0.0494,0.666666667,11,6,"public NewDownloadWindow(HttpMetadata metadata,String file){
  initUI();
  this.folder=Config.getInstance().getDownloadFolder();
  this.metadata=metadata;
  if (this.metadata == null) {
    this.metadata=new HttpMetadata();
  }
  if (this.metadata.getUrl() != null) {
    txtURL.setText(this.metadata.getUrl());
  }
 else {
    try {
      URL url=new URL(XDMUtils.getClipBoardText());
      txtURL.setText(url.toString());
    }
 catch (    Exception e) {
      Logger.log(e);
    }
  }
  if (file != null && file.length() > 0) {
    txtFile.setText(file);
  }
  getRootPane().setDefaultButton(btnDN);
  addWindowListener(new WindowAdapter(){
    @Override public void windowActivated(    WindowEvent e){
      txtURL.requestFocus();
    }
  }
);
  queueId="""";
}
"
3941,actionPerformed(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\NewDownloadWindow.java,xdm,18,129,105,7,0.2,0.1256,0,3,9,"@Override public void actionPerformed(ActionEvent e){
  if (e.getSource() instanceof JComponent) {
    String name=((JComponent)e.getSource()).getName();
    if (name.startsWith(""QUEUE"")) {
      String[] arr=name.split("":"");
      if (arr.length < 2) {
        queueId="""";
      }
 else {
        queueId=arr[1].trim();
      }
      createDownload(false);
    }
 else     if (name.equals(""CLOSE"")) {
      dispose();
    }
 else     if (name.equals(""DOWNLOAD_NOW"")) {
      queueId="""";
      createDownload(true);
    }
 else     if (name.equals(""BTN_MORE"")) {
      if (pop == null) {
        createPopup();
      }
      pop.show(btnMore,0,btnMore.getHeight());
    }
 else     if (name.equals(""BROWSE_FOLDER"")) {
      choseFolder();
    }
  }
}
"
3942,createDownload(boolean),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\NewDownloadWindow.java,xdm,17,100,64,5,0.1448,0.1361,0.714285714,2,6,"private void createDownload(boolean now){
  String urlStr=txtURL.getText();
  if (urlStr.length() < 1) {
    JOptionPane.showMessageDialog(this,StringResource.get(""MSG_NO_URL""));
    return;
  }
  if (!XDMUtils.validateURL(urlStr)) {
    urlStr=""http://"" + urlStr;
    if (!XDMUtils.validateURL(urlStr)) {
      JOptionPane.showMessageDialog(this,StringResource.get(""MSG_INVALID_URL""));
      return;
    }
 else {
      txtURL.setText(urlStr);
    }
  }
  if (!urlStr.equals(metadata.getUrl())) {
    metadata.setUrl(urlStr);
  }
  dispose();
  Logger.log(""file: "" + txtFile.getText());
  if (txtFile.getText().length() < 1) {
    JOptionPane.showMessageDialog(this,StringResource.get(""MSG_NO_FILE""));
    return;
  }
  XDMApp.getInstance().createDownload(txtFile.getText(),folder,metadata,now,queueId,0,0);
}
"
3943,choseFolder(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\NewDownloadWindow.java,xdm,6,11,7,3,0.25,0.0833,0.666666667,1,2,"private void choseFolder(){
  JFileChooser jfc=XDMFileChooser.getFileChooser(JFileChooser.DIRECTORIES_ONLY,new File(folder));
  if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    folder=jfc.getSelectedFile().getAbsolutePath();
    Config.getInstance().setDownloadFolder(folder);
  }
}
"
3947,update(DocumentEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\NewDownloadWindow.java,xdm,8,23,18,4,0.2031,0.0722,1,5,2,"void update(DocumentEvent e){
  try {
    Document doc=e.getDocument();
    int len=doc.getLength();
    String text=doc.getText(0,len);
    txtFile.setText(XDMUtils.getFileName(text));
  }
 catch (  Exception err) {
    Logger.log(err);
  }
}
"
3948,initUI(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\NewDownloadWindow.java,xdm,93,3930,3582,10,0.0477,0.0396,0.727272727,9,3,"private void initUI(){
  setUndecorated(true);
  try {
    if (GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().isWindowTranslucencySupported(WindowTranslucency.TRANSLUCENT)) {
      setOpacity(0.85f);
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  setIconImage(ImageResource.get(""icon.png"").getImage());
  setSize(400,210);
  setLocationRelativeTo(null);
  setAlwaysOnTop(true);
  getContentPane().setLayout(null);
  getContentPane().setBackground(ColorResource.getDarkestBgColor());
  JPanel titlePanel=new TitlePanel(null,this);
  titlePanel.setOpaque(false);
  titlePanel.setBounds(0,0,400,50);
  JButton closeBtn=new CustomButton();
  closeBtn.setBounds(365,5,30,30);
  closeBtn.setBackground(ColorResource.getDarkestBgColor());
  closeBtn.setBorderPainted(false);
  closeBtn.setFocusPainted(false);
  closeBtn.setName(""CLOSE"");
  closeBtn.setIcon(ImageResource.get(""close_btn.png""));
  closeBtn.addActionListener(this);
  titlePanel.add(closeBtn);
  JLabel titleLbl=new JLabel(StringResource.get(""ND_TITLE""));
  titleLbl.setFont(FontResource.getBiggerFont());
  titleLbl.setForeground(ColorResource.getSelectionColor());
  titleLbl.setBounds(25,15,200,30);
  titlePanel.add(titleLbl);
  JLabel lineLbl=new JLabel();
  lineLbl.setBackground(ColorResource.getSelectionColor());
  lineLbl.setBounds(0,55,400,1);
  lineLbl.setOpaque(true);
  add(lineLbl);
  txtURL=new JTextField();
  PopupAdapter.registerTxtPopup(txtURL);
  txtURL.getDocument().addDocumentListener(this);
  txtURL.setBorder(new LineBorder(ColorResource.getSelectionColor(),1));
  txtURL.setBackground(ColorResource.getDarkestBgColor());
  txtURL.setForeground(Color.WHITE);
  txtURL.setBounds(77,79,291,20);
  txtURL.setCaretColor(ColorResource.getSelectionColor());
  add(txtURL);
  txtFile=new JTextField();
  PopupAdapter.registerTxtPopup(txtFile);
  txtFile.setBorder(new LineBorder(ColorResource.getSelectionColor(),1));
  txtFile.setBackground(ColorResource.getDarkestBgColor());
  txtFile.setForeground(Color.WHITE);
  txtFile.setBounds(77,111,241,20);
  txtFile.setCaretColor(ColorResource.getSelectionColor());
  add(txtFile);
  JButton browse=new CustomButton(""..."");
  browse.setName(""BROWSE_FOLDER"");
  browse.setMargin(new Insets(0,0,0,0));
  browse.setBounds(325,111,40,20);
  browse.setFocusPainted(false);
  browse.setBackground(ColorResource.getDarkestBgColor());
  browse.setBorder(new LineBorder(ColorResource.getSelectionColor(),1));
  browse.setForeground(Color.WHITE);
  browse.addActionListener(this);
  browse.setFont(FontResource.getItemFont());
  add(browse);
  add(titlePanel);
  JLabel lblURL=new JLabel(StringResource.get(""ND_ADDRESS""),JLabel.RIGHT);
  lblURL.setFont(FontResource.getNormalFont());
  lblURL.setForeground(Color.WHITE);
  lblURL.setBounds(10,78,61,23);
  add(lblURL);
  JLabel lblFile=new JLabel(StringResource.get(""ND_FILE""),JLabel.RIGHT);
  lblFile.setFont(FontResource.getNormalFont());
  lblFile.setForeground(Color.WHITE);
  lblFile.setBounds(10,108,61,23);
  add(lblFile);
  JPanel panel=new JPanel(null);
  panel.setBounds(0,155,400,55);
  panel.setBackground(Color.DARK_GRAY);
  add(panel);
  btnMore=new CustomButton(StringResource.get(""ND_MORE""));
  btnDN=new CustomButton(StringResource.get(""ND_DOWNLOAD_NOW""));
  btnCN=new CustomButton(StringResource.get(""ND_CANCEL""));
  btnMore.setBounds(0,1,120,55);
  btnMore.setName(""BTN_MORE"");
  styleButton(btnMore);
  panel.add(btnMore);
  btnDN.setBounds(121,1,160,55);
  btnDN.setName(""DOWNLOAD_NOW"");
  styleButton(btnDN);
  panel.add(btnDN);
  btnCN.setBounds(282,1,120,55);
  btnCN.setName(""CLOSE"");
  styleButton(btnCN);
  panel.add(btnCN);
}
"
3949,createPopup(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\NewDownloadWindow.java,xdm,19,121,71,4,0.152,0.1488,1,2,1,"private void createPopup(){
  pop=new JPopupMenu();
  pop.setBackground(ColorResource.getDarkerBgColor());
  JMenu dl=new JMenu(StringResource.get(""ND_DOWNLOAD_LATER""));
  dl.setForeground(Color.WHITE);
  dl.setBorder(new EmptyBorder(5,5,5,5));
  dl.addActionListener(this);
  dl.setBackground(ColorResource.getDarkerBgColor());
  dl.setBorderPainted(false);
  pop.add(dl);
  createQueueItems(dl);
  JMenuItem ig=new JMenuItem(StringResource.get(""ND_IGNORE_URL""));
  ig.setName(""IGNORE_URL"");
  ig.setForeground(Color.WHITE);
  ig.addActionListener(this);
  pop.add(ig);
  pop.setInvoker(btnMore);
}
"
3950,styleButton(CustomButton),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\NewDownloadWindow.java,xdm,10,17,0,3,0.26,0.3295,0.75,1,1,"private void styleButton(CustomButton btn){
  btn.setBackground(ColorResource.getDarkestBgColor());
  btn.setPressedBackground(ColorResource.getDarkerBgColor());
  btn.setForeground(Color.WHITE);
  btn.setFont(FontResource.getBigFont());
  btn.setBorderPainted(false);
  btn.setMargin(new Insets(0,0,0,0));
  btn.setFocusPainted(false);
  btn.addActionListener(this);
}
"
3951,createQueueItems(JMenuItem),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\NewDownloadWindow.java,xdm,10,31,17,3,0.2143,0.1477,0.5,5,3,"private void createQueueItems(JMenuItem queueMenuItem){
  ArrayList<DownloadQueue> queues=XDMApp.getInstance().getQueueList();
  for (int i=0; i < queues.size(); i++) {
    DownloadQueue q=queues.get(i);
    JMenuItem mItem=new JMenuItem(q.getName().length() < 1 ? ""Default queue"" : q.getName());
    mItem.setName(""QUEUE:"" + q.getQueueId());
    mItem.setForeground(Color.WHITE);
    mItem.addActionListener(this);
    queueMenuItem.add(mItem);
  }
}
"
3952,"Page(String,int,XDMFrame)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\Page.java,xdm,23,213,173,12,0.0776,0.1278,1,8,1,"public Page(String title,int width,XDMFrame parent){
  setOpaque(false);
  setLayout(null);
  this.title=title;
  this.width=width;
  this.parent=parent;
  bgColor=new Color(0,0,0,200);
  MouseInputAdapter ma=new MouseInputAdapter(){
  }
;
  addMouseListener(ma);
  addMouseMotionListener(ma);
  jsp=new JScrollPane();
  jsp.setOpaque(false);
  jsp.setBorder(null);
  jsp.getViewport().setOpaque(false);
  DarkScrollBar scrollBar=new DarkScrollBar(JScrollBar.VERTICAL);
  jsp.setVerticalScrollBar(scrollBar);
  jsp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  jsp.getVerticalScrollBar().setUnitIncrement(10);
  jsp.getVerticalScrollBar().setBlockIncrement(25);
  add(jsp);
  registerMouseListener();
  init();
}
"
3953,init(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\Page.java,xdm,9,19,2,2,0.2083,0.1537,1,2,1,"private void init(){
  y=25;
  h=40;
  btnNav=new JLabel(ImageResource.get(""back24.png""));
  btnNav.setFont(FontResource.getBiggerFont());
  btnNav.setForeground(ColorResource.getSelectionColor());
  btnNav.setBounds(15,y,25,h);
  add(btnNav);
  btnNav.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      close();
    }
  }
);
  titleLbl=new JLabel(title);
  titleLbl.setFont(FontResource.getBiggerFont());
  titleLbl.setForeground(ColorResource.getSelectionColor());
  titleLbl.setBounds(50,y,200,h);
  add(titleLbl);
  y+=h;
  y+=10;
  h=2;
  JLabel lineLbl=new JLabel();
  lineLbl.setBackground(ColorResource.getSelectionColor());
  lineLbl.setBounds(0,y,width,h);
  lineLbl.setOpaque(true);
  add(lineLbl);
  y+=h;
}
"
3960,showPanel(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\Page.java,xdm,7,15,9,4,0.2653,0.125,1,1,1,"public void showPanel(){
  int x=parent.getWidth() - width;
  jsp.setBounds(0,y,width,parent.getHeight() - y);
  setBounds(x,0,width,parent.getHeight());
  parent.showDialog(this);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      jsp.getVerticalScrollBar().setValue(0);
    }
  }
);
}
"
3965,registerTxtPopup(JTextField),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\PopupAdapter.java,xdm,6,9,3,3,0.3333,0.2381,0,1,2,"public static void registerTxtPopup(JTextField txt){
  if (adapter == null) {
    adapter=new PopupAdapter();
    adapter.init();
  }
  txt.addMouseListener(adapter);
}
"
3970,mouseReleased(MouseEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\PopupAdapter.java,xdm,6,9,3,3,0.3889,0.2381,0,2,3,"@Override public void mouseReleased(MouseEvent e){
  if (e.isPopupTrigger()) {
    if (e.getSource() instanceof JTextField) {
      this.txt=(JTextField)e.getSource();
      popup.show(txt,e.getX(),e.getY());
    }
  }
}
"
3971,actionPerformed(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\PopupAdapter.java,xdm,14,60,29,4,0.3095,0.3222,0,2,6,"@Override public void actionPerformed(ActionEvent e){
  if (txt == null)   return;
  System.out.println(txt);
  String name=((JComponent)e.getSource()).getName();
  if (""MENU_CUT"".equals(name)) {
    txt.cut();
  }
 else   if (""MENU_COPY"".equals(name)) {
    txt.copy();
  }
 else   if (""MENU_SELECT_ALL"".equals(name)) {
    txt.selectAll();
  }
 else   if (""MENU_PASTE"".equals(name)) {
    txt.paste();
  }
  System.out.println(""set to null"");
  txt=null;
}
"
3972,PopupNotification(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\PopupNotification.java,xdm,6,15,15,6,-1,-1,0,0,1,"PopupNotification(){
  setFocusableWindowState(false);
  setAlwaysOnTop(true);
  add(new JButton(""test""));
  setSize(300,100);
  setVisible(true);
}
"
3976,initUI(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\PropertiesPage.java,xdm,125,6232,4714,3,0.0589,0.0965,1,11,1,"private void initUI(){
  int y=0;
  int h=0;
  JPanel panel=new JPanel();
  panel.setLayout(null);
  panel.setOpaque(false);
  y+=10;
  h=30;
  JLabel lblFileTitle=new JLabel(StringResource.get(""ND_FILE""));
  lblFileTitle.setForeground(Color.WHITE);
  lblFileTitle.setFont(FontResource.getNormalFont());
  lblFileTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblFileTitle);
  y+=h;
  h=25;
  txtDefFile=new JTextField();
  txtDefFile.setBounds(15,y,350 - 50,h);
  txtDefFile.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtDefFile.setEditable(false);
  txtDefFile.setForeground(Color.WHITE);
  txtDefFile.setOpaque(false);
  panel.add(txtDefFile);
  y+=h;
  h=30;
  JLabel lblFolderTitle=new JLabel(StringResource.get(""CD_LOC""));
  lblFolderTitle.setForeground(Color.WHITE);
  lblFolderTitle.setFont(FontResource.getNormalFont());
  lblFolderTitle.setBounds(15,y,350 - 50,h);
  panel.add(lblFolderTitle);
  y+=h;
  h=25;
  txtDefFolder=new JTextField();
  txtDefFolder.setBounds(15,y,350 - 50,h);
  txtDefFolder.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtDefFolder.setEditable(false);
  txtDefFolder.setForeground(Color.WHITE);
  txtDefFolder.setOpaque(false);
  panel.add(txtDefFolder);
  y+=h;
  h=30;
  JLabel lblUrlTitle=new JLabel(StringResource.get(""ND_ADDRESS""));
  lblUrlTitle.setForeground(Color.WHITE);
  lblUrlTitle.setFont(FontResource.getNormalFont());
  lblUrlTitle.setBounds(15,y,350 - 50,h);
  panel.add(lblUrlTitle);
  y+=h;
  h=25;
  txtUrl=new JTextField();
  txtUrl.setBounds(15,y,350 - 50,h);
  txtUrl.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtUrl.setEditable(false);
  txtUrl.setForeground(Color.WHITE);
  txtUrl.setOpaque(false);
  panel.add(txtUrl);
  y+=h;
  h=30;
  JLabel lblSizeLabel=new JLabel(StringResource.get(""PROP_SIZE""));
  lblSizeLabel.setForeground(Color.WHITE);
  lblSizeLabel.setFont(FontResource.getNormalFont());
  lblSizeLabel.setBounds(15,y,100,h);
  panel.add(lblSizeLabel);
  lblSize=new JLabel();
  lblSize.setForeground(Color.WHITE);
  lblSize.setFont(FontResource.getNormalFont());
  lblSize.setBounds(115,y,200,h);
  panel.add(lblSize);
  y+=h;
  h=30;
  JLabel lblDateLabel=new JLabel(StringResource.get(""PROP_DATE""));
  lblDateLabel.setForeground(Color.WHITE);
  lblDateLabel.setFont(FontResource.getNormalFont());
  lblDateLabel.setBounds(15,y,100,h);
  panel.add(lblDateLabel);
  lblDate=new JLabel();
  lblDate.setForeground(Color.WHITE);
  lblDate.setFont(FontResource.getNormalFont());
  lblDate.setBounds(115,y,200,h);
  panel.add(lblDate);
  y+=h;
  h=30;
  JLabel lblTypeLabel=new JLabel(StringResource.get(""PROP_TYPE""));
  lblTypeLabel.setForeground(Color.WHITE);
  lblTypeLabel.setFont(FontResource.getNormalFont());
  lblTypeLabel.setBounds(15,y,100,h);
  panel.add(lblTypeLabel);
  lblType=new JLabel();
  lblType.setForeground(Color.WHITE);
  lblType.setFont(FontResource.getNormalFont());
  lblType.setBounds(115,y,200,h);
  panel.add(lblType);
  y+=h;
  h=30;
  JLabel lblRefererLabel=new JLabel(StringResource.get(""PROP_REFERER""));
  lblRefererLabel.setForeground(Color.WHITE);
  lblRefererLabel.setFont(FontResource.getNormalFont());
  lblRefererLabel.setBounds(15,y,100,h);
  panel.add(lblRefererLabel);
  lblReferer=new JLabel();
  lblReferer.setForeground(Color.WHITE);
  lblReferer.setFont(FontResource.getNormalFont());
  lblReferer.setBounds(115,y,200,h);
  panel.add(lblReferer);
  y+=h;
  h=30;
  JLabel lblCookieTitle=new JLabel(StringResource.get(""PROP_COOKIE""));
  lblCookieTitle.setForeground(Color.WHITE);
  lblCookieTitle.setFont(FontResource.getNormalFont());
  lblCookieTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblCookieTitle);
  y+=h;
  y+=10;
  h=120;
  txtCookie=new JTextArea();
  txtCookie.setBounds(15,y,350 - 50,h);
  txtCookie.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtCookie.setEditable(false);
  txtCookie.setForeground(Color.WHITE);
  txtCookie.setOpaque(false);
  panel.add(txtCookie);
  y+=h;
  y+=50;
  panel.setPreferredSize(new Dimension(350,y));
  panel.setBounds(0,0,350,y);
  jsp.setViewportView(panel);
}
"
3977,QueuedItemsRenderer(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\QueuedItemsRenderer.java,xdm,7,21,21,7,0.1429,0,1,0,1,"public QueuedItemsRenderer(){
  setForeground(Color.WHITE);
  setFont(FontResource.getNormalFont());
  setOpaque(true);
  setPreferredSize(new Dimension(100,30));
  setBorder(new EmptyBorder(0,5,0,0));
}
"
3979,QueueListRenderer(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\QueueListRenderer.java,xdm,7,21,21,7,0.1429,0,1,0,1,"public QueueListRenderer(){
  setForeground(Color.WHITE);
  setFont(FontResource.getNormalFont());
  setOpaque(true);
  setPreferredSize(new Dimension(100,30));
  setBorder(new EmptyBorder(0,5,0,0));
}
"
3983,initUI(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\RefreshUrlPage.java,xdm,31,343,221,2,0.1484,0.1363,0.8,5,1,"private void initUI(){
  int y=0;
  int h=0;
  JPanel panel=new JPanel();
  panel.setLayout(null);
  panel.setOpaque(false);
  y+=10;
  h=40;
  JLabel lblMaxTitle=new JLabel(StringResource.get(""REF_WAITING_FOR_LINK""));
  lblMaxTitle.setForeground(Color.WHITE);
  lblMaxTitle.setFont(FontResource.getItemFont());
  lblMaxTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblMaxTitle);
  y+=h;
  y+=10;
  h=80;
  lblMonitoringTitle=new JTextArea();
  lblMonitoringTitle.setOpaque(false);
  lblMonitoringTitle.setWrapStyleWord(true);
  lblMonitoringTitle.setLineWrap(true);
  lblMonitoringTitle.setEditable(false);
  lblMonitoringTitle.setForeground(Color.WHITE);
  lblMonitoringTitle.setFont(FontResource.getNormalFont());
  lblMonitoringTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblMonitoringTitle);
  y+=h;
  btnOpenPage=createButton1(""REF_OPEN_PAGE"",15,y);
  btnOpenPage.setName(""REF_OPEN_PAGE"");
  panel.add(btnOpenPage);
  y+=btnOpenPage.getHeight();
  btnOpenPage.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (!StringUtils.isNullOrEmptyOrBlank(md.getYdlUrl())) {
        openLink();
      }
    }
  }
);
  panel.setPreferredSize(new Dimension(350,y));
  panel.setBounds(0,0,350,y);
  jsp.setViewportView(panel);
}
"
3986,"createButton1(String,int,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\RefreshUrlPage.java,xdm,9,21,6,4,0.2037,0.1944,1,5,1,"private JButton createButton1(String name,int x,int y){
  JButton btn=new JButton(StringResource.get(name));
  btn.setBackground(ColorResource.getDarkBtnColor());
  btn.setFont(FontResource.getNormalFont());
  Dimension d=btn.getPreferredSize();
  btn.setBounds(x,y,d.width,d.height);
  return btn;
}
"
3988,isValidLink(HttpMetadata),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\RefreshUrlPage.java,xdm,38,512,321,4,0.1507,0.1385,0.266666667,8,11,"@Override public boolean isValidLink(HttpMetadata metadata){
  Logger.log(""Checking refresh link with checking size "" + md.getSize());
  if (md.getType() == metadata.getType()) {
    if (md instanceof DashMetadata) {
      DashMetadata dm1=(DashMetadata)md;
      DashMetadata dm2=(DashMetadata)metadata;
      if (dm1.getLen1() == dm2.getLen1() && dm1.getLen2() == dm2.getLen2()) {
        dm1.setUrl(dm2.getUrl());
        dm1.setUrl2(dm2.getUrl2());
        dm1.setHeaders(dm2.getHeaders());
        dm1.setLen1(dm2.getLen1());
        dm1.setLen2(dm2.getLen2());
        dm1.save();
        showOkMsgAndClose();
        return true;
      }
    }
 else     if (md instanceof HlsMetadata) {
      HlsMetadata hm1=(HlsMetadata)md;
      HlsMetadata hm2=(HlsMetadata)metadata;
      if (confirmUrl("""")) {
        hm1.setUrl(hm2.getUrl());
        hm1.setHeaders(hm2.getHeaders());
        hm1.save();
        showOkMsgAndClose();
        return true;
      }
    }
 else     if (md instanceof HdsMetadata) {
      HdsMetadata hm1=(HdsMetadata)md;
      HdsMetadata hm2=(HdsMetadata)metadata;
      if (confirmUrl("""")) {
        hm1.setUrl(hm2.getUrl());
        hm1.setHeaders(hm2.getHeaders());
        hm1.save();
        showOkMsgAndClose();
        return true;
      }
    }
 else {
      boolean confirmed=false;
      if (md.getSize() > 0) {
        confirmed=md.getSize() == metadata.getSize();
      }
 else {
        confirmed=confirmUrl(StringResource.get(""MSG_REF_LINK_QUESTION""));
      }
      if (confirmed) {
        md.setUrl(metadata.getUrl());
        md.setHeaders(metadata.getHeaders());
        md.save();
        showOkMsgAndClose();
        return true;
      }
    }
  }
  return false;
}
"
3995,paintComponent(Graphics),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SegmentPanel.java,xdm,24,249,222,11,0.0929,0.0393,0.5,9,7,"public void paintComponent(Graphics g){
  if (g == null)   return;
  Graphics2D g2=(Graphics2D)g;
  g2.setPaint(Color.GRAY);
  g2.fillRect(0,0,getWidth(),getHeight());
  if (segDet == null || segDet.getChunkCount() < 1 || length < 0) {
    return;
  }
  g2.setPaint(ColorResource.getSelectionColor());
  float r=(float)getWidth() / length;
  ArrayList<SegmentInfo> list=segDet.getChunkUpdates();
  for (int i=0; i < segDet.getChunkCount(); i++) {
    SegmentInfo info=list.get(i);
    int _start=(int)(info.getStart() * r);
    int _length=(int)(info.getLength() * r);
    int _dwnld=(int)(info.getDownloaded() * r);
    if (_dwnld > _length)     _dwnld=_length;
    g2.fillRect(_start,0,_dwnld + 1,getHeight());
  }
}
"
3999,"showPanel(XDMFrame,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,11,43,31,5,0.1616,0.0818,1,5,1,"public void showPanel(XDMFrame xframe,String pageName){
  this.parent=xframe;
  int x=xframe.getWidth() - 350;
  jsp.setBounds(0,y,350,xframe.getHeight() - y);
  setBounds(x,0,350,xframe.getHeight());
  JScrollBar vertical=jsp.getVerticalScrollBar();
  vertical.setValue(vertical.getMinimum());
  setPage(pageName);
  xframe.showDialog(this);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      jsp.getVerticalScrollBar().setValue(0);
    }
  }
);
}
"
4004,init(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,9,19,2,2,0.2222,0.1815,1,2,1,"private void init(){
  y=25;
  h=40;
  btnNav=new JLabel(ImageResource.get(""back24.png""));
  btnNav.setFont(FontResource.getBiggerFont());
  btnNav.setForeground(ColorResource.getSelectionColor());
  btnNav.setBounds(15,y,25,h);
  add(btnNav);
  btnNav.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      if (currentPage == overviewPanel) {
        saveOverviewSettings();
      }
 else       if (currentPage == browserIntPanel) {
        saveMonitoringSettings();
      }
 else       if (currentPage == networkPanel) {
        saveNetworkSettings();
      }
 else       if (currentPage == advPanel) {
        saveAdvSettings();
      }
      if (level == 0) {
        close();
      }
      if (level == 1) {
        level=0;
        setPage(""PG_SETTINGS"");
      }
    }
  }
);
  titleLbl=new JLabel(StringResource.get(""TITLE_SETTINGS""));
  titleLbl.setFont(FontResource.getBiggerFont());
  titleLbl.setForeground(ColorResource.getSelectionColor());
  titleLbl.setBounds(50,y,200,h);
  add(titleLbl);
  y+=h;
  y+=10;
  h=2;
  JLabel lineLbl=new JLabel();
  lineLbl.setBackground(ColorResource.getSelectionColor());
  lineLbl.setBounds(0,y,400,h);
  lineLbl.setOpaque(true);
  add(lineLbl);
  y+=h;
}
"
4006,createOverviewPanel(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,217,19374,15312,20,0.0423,0.0899,0.666666667,22,1,"private JPanel createOverviewPanel(){
  JPanel panel=new JPanel();
  panel.setOpaque(false);
  panel.setLayout(null);
  int y=0, h=0;
  y+=10;
  y+=10;
  h=30;
  JLabel lblMonitorHeader=new JLabel(StringResource.get(""SETTINGS_MONITORING""));
  lblMonitorHeader.setForeground(Color.WHITE);
  lblMonitorHeader.setFont(FontResource.getItemFont());
  lblMonitorHeader.setBounds(15,y,350 - 30,h);
  panel.add(lblMonitorHeader);
  y+=h;
  y+=10;
  h=50;
  JTextArea lblMonitoringTitle=new JTextArea();
  lblMonitoringTitle.setOpaque(false);
  lblMonitoringTitle.setWrapStyleWord(true);
  lblMonitoringTitle.setLineWrap(true);
  lblMonitoringTitle.setEditable(false);
  lblMonitoringTitle.setForeground(Color.WHITE);
  lblMonitoringTitle.setText(StringResource.get(""HINT_BROWSER_MON""));
  lblMonitoringTitle.setFont(FontResource.getNormalFont());
  lblMonitoringTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblMonitoringTitle);
  y+=h;
  JButton btViewMonitoring=createButton1(""SETTINGS_VIEW"",15,y);
  btViewMonitoring.setName(""BTN_MONITORING"");
  panel.add(btViewMonitoring);
  y+=btViewMonitoring.getHeight();
  y+=10;
  y+=20;
  h=30;
  JLabel lblGenHeader=new JLabel(StringResource.get(""SETTINGS_GENERAL""));
  lblGenHeader.setForeground(Color.WHITE);
  lblGenHeader.setFont(FontResource.getItemFont());
  lblGenHeader.setBounds(15,y,350 - 30,h);
  panel.add(lblGenHeader);
  y+=h;
  y+=10;
  h=30;
  chkPrgWnd=createCheckBox(""SHOW_DWN_PRG"");
  chkPrgWnd.setBounds(15,y,350 - 30,h);
  panel.add(chkPrgWnd);
  y+=h;
  h=30;
  chkEndWnd=createCheckBox(""SHOW_DWN_COMPLETE"");
  chkEndWnd.setBounds(15,y,350 - 30,h);
  panel.add(chkEndWnd);
  y+=h;
  y+=10;
  h=30;
  JLabel lblMaxTitle=new JLabel(StringResource.get(""MSG_MAX_DOWNLOAD""));
  lblMaxTitle.setForeground(Color.WHITE);
  lblMaxTitle.setFont(FontResource.getNormalFont());
  lblMaxTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblMaxTitle);
  y+=3;
  h=25;
  cmbMax=new JComboBox<String>(new String[]{""1"",""2"",""5"",""10"",""50"",""N/A""});
  cmbMax.setBackground(ColorResource.getDarkerBgColor());
  cmbMax.setBounds(250,y,75,h);
  cmbMax.setRenderer(new SimpleListRenderer());
  panel.add(cmbMax);
  y+=h;
  y+=10;
  y+=10;
  y+=10;
  h=30;
  JLabel lblFolderTitle=new JLabel(StringResource.get(""SETTINGS_FOLDER""));
  lblFolderTitle.setForeground(Color.WHITE);
  lblFolderTitle.setFont(FontResource.getNormalFont());
  lblFolderTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblFolderTitle);
  y+=h;
  h=25;
  txtDefFolder=new JTextField();
  txtDefFolder.setBounds(15,y,350 - 30 - 110,h);
  txtDefFolder.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtDefFolder.setEditable(false);
  txtDefFolder.setForeground(Color.WHITE);
  txtDefFolder.setOpaque(false);
  panel.add(txtDefFolder);
  JButton btnBrowseFolder=createButton2(""SETTINGS_FOLDER_CHANGE"");
  btnBrowseFolder.setName(""SETTINGS_FOLDER_CHANGE"");
  btnBrowseFolder.setBackground(ColorResource.getDarkBtnColor());
  btnBrowseFolder.setFont(FontResource.getNormalFont());
  btnBrowseFolder.setBounds(15 + 350 - 30 - 110 + 10,y,90,h);
  panel.add(btnBrowseFolder);
  y+=h;
  y+=10;
  y+=20;
  y+=10;
  h=30;
  JLabel lblNetHeader=new JLabel(StringResource.get(""SETTINGS_NETWORK""));
  lblNetHeader.setForeground(Color.WHITE);
  lblNetHeader.setFont(FontResource.getItemFont());
  lblNetHeader.setBounds(15,y,350 - 30,h);
  panel.add(lblNetHeader);
  y+=h;
  h=40;
  JTextArea lblNetworkTitle=new JTextArea();
  lblNetworkTitle.setOpaque(false);
  lblNetworkTitle.setWrapStyleWord(true);
  lblNetworkTitle.setLineWrap(true);
  lblNetworkTitle.setEditable(false);
  lblNetworkTitle.setForeground(Color.WHITE);
  lblNetworkTitle.setText(StringResource.get(""HINT_NETWORK""));
  lblNetworkTitle.setFont(FontResource.getNormalFont());
  lblNetworkTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblNetworkTitle);
  y+=h;
  JButton btViewNet=createButton1(""SETTINGS_VIEW"",15,y);
  btViewNet.setName(""BTN_NETWORK"");
  panel.add(btViewNet);
  y+=btViewNet.getHeight();
  y+=10;
  y+=10;
  y+=10;
  h=30;
  JLabel lblSchHeader=new JLabel(StringResource.get(""SETTINGS_SCHEDULER""));
  lblSchHeader.setForeground(Color.WHITE);
  lblSchHeader.setFont(FontResource.getItemFont());
  lblSchHeader.setBounds(15,y,350 - 30,h);
  panel.add(lblSchHeader);
  y+=h;
  h=50;
  JTextArea lblScheduleTitle=new JTextArea();
  lblScheduleTitle.setOpaque(false);
  lblScheduleTitle.setWrapStyleWord(true);
  lblScheduleTitle.setLineWrap(true);
  lblScheduleTitle.setEditable(false);
  lblScheduleTitle.setForeground(Color.WHITE);
  lblScheduleTitle.setText(StringResource.get(""HINT_SCHEDULER""));
  lblScheduleTitle.setFont(FontResource.getNormalFont());
  lblScheduleTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblScheduleTitle);
  y+=h;
  JButton btViewScheduler=createButton1(""SETTINGS_VIEW"",15,y);
  btViewScheduler.setName(""Q_MAN"");
  panel.add(btViewScheduler);
  y+=btViewScheduler.getHeight();
  y+=10;
  y+=10;
  y+=10;
  h=30;
  JLabel lblPwdHeader=new JLabel(StringResource.get(""SETTINGS_CRED""));
  lblPwdHeader.setForeground(Color.WHITE);
  lblPwdHeader.setFont(FontResource.getItemFont());
  lblPwdHeader.setBounds(15,y,350 - 30,h);
  panel.add(lblPwdHeader);
  y+=h;
  h=40;
  JTextArea lblCredTitle=new JTextArea();
  lblCredTitle.setOpaque(false);
  lblCredTitle.setWrapStyleWord(true);
  lblCredTitle.setLineWrap(true);
  lblCredTitle.setEditable(false);
  lblCredTitle.setForeground(Color.WHITE);
  lblCredTitle.setText(StringResource.get(""HINT_PASSWORD""));
  lblCredTitle.setFont(FontResource.getNormalFont());
  lblCredTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblCredTitle);
  y+=h;
  JButton btViewCred=createButton1(""SETTINGS_VIEW"",15,y);
  btViewCred.setName(""PASS_MAN"");
  panel.add(btViewCred);
  y+=btViewCred.getHeight();
  y+=10;
  y+=10;
  y+=10;
  h=30;
  JLabel lblAdvHeader=new JLabel(StringResource.get(""SETTINGS_ADV""));
  lblAdvHeader.setForeground(Color.WHITE);
  lblAdvHeader.setFont(FontResource.getItemFont());
  lblAdvHeader.setBounds(15,y,350 - 30,h);
  panel.add(lblAdvHeader);
  y+=h;
  h=50;
  JTextArea lblAdvTitle=new JTextArea();
  lblAdvTitle.setOpaque(false);
  lblAdvTitle.setWrapStyleWord(true);
  lblAdvTitle.setLineWrap(true);
  lblAdvTitle.setEditable(false);
  lblAdvTitle.setForeground(Color.WHITE);
  lblAdvTitle.setText(StringResource.get(""HINT_ADV""));
  lblAdvTitle.setFont(FontResource.getNormalFont());
  lblAdvTitle.setBounds(15,y,350 - 30,h);
  panel.add(lblAdvTitle);
  y+=h;
  JButton btViewAdv=createButton1(""SETTINGS_VIEW"",15,y);
  btViewAdv.setName(""ADV_MAN"");
  panel.add(btViewAdv);
  y+=btViewAdv.getHeight();
  y+=10;
  h=30;
  panel.setPreferredSize(new Dimension(300,y + 50));
  return panel;
}
"
4007,"createButton1(String,int,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,12,21,0,3,0.1905,0.3795,1,5,1,"private JButton createButton1(String name,int x,int y){
  JButton btn=new CustomButton(StringResource.get(name));
  btn.setBackground(ColorResource.getDarkBtnColor());
  btn.setBorderPainted(false);
  btn.setFocusPainted(false);
  btn.setForeground(Color.WHITE);
  btn.setFont(FontResource.getNormalFont());
  Dimension d=btn.getPreferredSize();
  btn.setBounds(x,y,d.width,d.height);
  btn.addActionListener(this);
  return btn;
}
"
4008,createButton2(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,10,17,0,3,0.275,0.4205,1,2,1,"private JButton createButton2(String name){
  JButton btn=new CustomButton(StringResource.get(name));
  btn.setBackground(ColorResource.getDarkBtnColor());
  btn.setBorderPainted(false);
  btn.setFocusPainted(false);
  btn.setForeground(Color.WHITE);
  btn.setFont(FontResource.getNormalFont());
  btn.addActionListener(this);
  return btn;
}
"
4014,actionPerformed(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,102,4235,3319,29,0.0359,0.0917,0.6,19,38,"@Override public void actionPerformed(ActionEvent e){
  if (e.getSource() instanceof JRadioButton) {
    JRadioButton chk=(JRadioButton)e.getSource();
    if (""Q_DAILY"".equals(chk.getName()) || ""Q_ONCE"".equals(chk.getName())) {
      enableSchedulerFields();
    }
  }
  if (e.getSource() instanceof JMenuItem) {
    String name=((JMenuItem)e.getSource()).getName();
    if (name != null) {
      if (name.startsWith(""Q_MOVE_TO:"")) {
        String targetQ="""";
        if (name.endsWith("":"")) {
          targetQ="""";
        }
 else {
          targetQ=name.split("":"")[1].trim();
        }
        int index=qItemsList.getSelectedIndex();
        if (index < 0)         return;
        String id=queuedItemsModel.get(index);
        Logger.log(""Moving to target queue: "" + targetQ);
        index=qList.getSelectedIndex();
        if (index < 0)         return;
        DownloadQueue sourceQ=queueModel.getElementAt(index);
        sourceQ.removeFromQueue(id);
        QueueManager.getInstance().getQueueById(targetQ).addToQueue(id);
        loadSchedulerSettings(index);
      }
      return;
    }
  }
  if (e.getSource() instanceof JCheckBox) {
    JCheckBox chk=(JCheckBox)e.getSource();
    if (""MSG_Q_START"".equals(chk.getName())) {
      enableSchedulerFields();
    }
  }
 else   if (e.getSource() instanceof JButton) {
    JButton btn=(JButton)e.getSource();
    String name=btn.getName();
    if (""BTN_Q_SAVE"".equals(name)) {
      saveQueue();
      return;
    }
    if (""Q_MOVE_TO"".equals(name)) {
      showMoveQPopup(btn);
      return;
    }
    if (""BTN_Q_DEL"".equals(name)) {
      removeQueue();
    }
    if (""Q_MOVE_UP"".equals(name)) {
      queueMoveUp();
      return;
    }
    if (""Q_MOVE_DN"".equals(name)) {
      queueMoveDown();
      return;
    }
    if (""BTN_Q_NEW"".equals(name)) {
      createNewQueue();
      return;
    }
    if (""BTN_DEF_FILE_EXT"".equals(name)) {
      txtFileTyp.setText(XDMUtils.appendArray2Str(Config.getInstance().getDefaultFileTypes()));
      return;
    }
    if (""BTN_DEF_VID_EXT"".equals(name)) {
      txtVidType.setText(XDMUtils.appendArray2Str(Config.getInstance().getDefaultVideoTypes()));
      return;
    }
    if (""BTN_Q_NEW"".equals(name)) {
      createNewQueue();
      return;
    }
    if (""DEL_CRED"".equals(name)) {
      int index=passList.getSelectedIndex();
      if (index > -1) {
        PasswordItem item=passListModel.get(index);
        CredentialManager.getInstance().removeSavedCredential(item.host);
        loadPasswordSettings();
      }
    }
    if (""NEW_CRED"".equals(name)) {
      txtCredHostName.setText("""");
      txtUserName.setText("""");
      txtPassword.setText("""");
    }
    if (""SAVE_CRED"".equals(name)) {
      savePasswordSettings();
    }
    if (""BROWSE_ANTIVIR"".equals(name)) {
      JFileChooser jfc=new JFileChooser();
      if (jfc.showOpenDialog(parent) == JFileChooser.APPROVE_OPTION) {
        txtAntivirCmd.setText(jfc.getSelectedFile().getAbsolutePath());
      }
    }
    if (""SETTINGS_FOLDER_CHANGE"".equals(name)) {
      JFileChooser jfc=new JFileChooser();
      jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      if (jfc.showOpenDialog(parent) == JFileChooser.APPROVE_OPTION) {
        txtDefFolder.setText(jfc.getSelectedFile().getAbsolutePath());
      }
    }
    if (""FF_INSTALL"".equals(name)) {
      if (!BrowserLauncher.launchFirefox(ffAMOURL)) {
        String msg=String.format(StringResource.get(""MSG_ADDON_DESC""),""Mozilla Firefox"",ffAMOURL);
        MessageBox.show(parent,StringResource.get(""MSG_ADDON_TITLE""),msg,MessageBox.OK_OPTION,MessageBox.OK);
      }
    }
    if (""CR_INSTALL"".equals(name)) {
      if (!BrowserLauncher.launchChrome(chromeWebStoreURL)) {
        String msg=String.format(StringResource.get(""MSG_ADDON_DESC""),""Google Chrome"",chromeWebStoreURL);
        MessageBox.show(parent,StringResource.get(""MSG_ADDON_TITLE""),msg,MessageBox.OK_OPTION,MessageBox.OK);
      }
    }
    if (""CM_INSTALL"".equals(name)) {
      String msg=String.format(StringResource.get(""MSG_ADDON_DESC""),""Chromium"",chromeWebStoreURL);
      MessageBox.show(parent,StringResource.get(""MSG_ADDON_TITLE""),msg,MessageBox.OK_OPTION,MessageBox.OK);
    }
    if (""VL_INSTALL"".equals(name)) {
      String msg=String.format(StringResource.get(""MSG_ADDON_DESC""),""Vivaldi"",chromeWebStoreURL);
      MessageBox.show(parent,StringResource.get(""MSG_ADDON_TITLE""),msg,MessageBox.OK_OPTION,MessageBox.OK);
    }
    if (""OP_INSTALL"".equals(name)) {
      String msg=String.format(StringResource.get(""MSG_ADDON_DESC""),""Opera"",operaExtURL);
      MessageBox.show(parent,StringResource.get(""MSG_ADDON_TITLE""),msg,MessageBox.OK_OPTION,MessageBox.OK);
    }
    if (setPage(name)) {
      level=1;
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          jsp.getVerticalScrollBar().setValue(0);
        }
      }
);
    }
  }
}
"
4016,loadSchedulerSettings(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,7,18,15,4,0.2571,0.0917,0.5,2,2,"private void loadSchedulerSettings(int selectedQ){
  queueModel.clear();
  for (  DownloadQueue q : QueueManager.getInstance().getQueueList()) {
    queueModel.addElement(q);
  }
  qList.setSelectedIndex(selectedQ);
  qList.ensureIndexIsVisible(selectedQ);
}
"
4017,loadOverviewSettings(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,9,21,6,4,0.2037,0.1768,0.2,1,2,"private void loadOverviewSettings(){
  Config config=Config.getInstance();
  chkPrgWnd.setSelected(config.showDownloadWindow());
  System.out.println(config.showDownloadCompleteWindow());
  chkEndWnd.setSelected(config.showDownloadCompleteWindow());
  cmbMax.setSelectedItem(config.getMaxDownloads() > 0 ? config.getMaxDownloads() + """" : ""N/A"");
  txtDefFolder.setText(config.getDownloadFolder());
}
"
4018,loadMonitoringSettings(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,7,11,1,3,0.2653,0.1667,0.333333333,1,1,"private void loadMonitoringSettings(){
  Config config=Config.getInstance();
  txtFileTyp.setText(XDMUtils.appendArray2Str(config.getFileExts()));
  txtVidType.setText(XDMUtils.appendArray2Str(config.getVidExts()));
  txtBlockedHosts.setText(XDMUtils.appendArray2Str(config.getBlockedHosts()));
  chkVidPan.setSelected(config.isShowVideoNotification());
}
"
4019,loadNetworkSettings(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,29,291,176,6,0.0874,0.1317,0.076923077,2,17,"private void loadNetworkSettings(){
  Config config=Config.getInstance();
  cmbSeg.setSelectedItem(config.getMaxSegments() + """");
  cmbTimeout.setSelectedItem(config.getNetworkTimeout() > 1 ? config.getNetworkTimeout() + """" : ""N/A"");
  cmbTcp.setSelectedItem(config.getTcpWindowSize() + """");
  txtSpeedLimit.setText(config.getSpeedLimit() < 1 ? ""N/A"" : config.getSpeedLimit() + """");
  int proxyMode=config.getProxyMode();
  if (proxyMode == 0) {
    chkUsePac.setSelected(false);
    chkUseProxy.setSelected(false);
    chkUseSocks.setSelected(false);
  }
 else   if (proxyMode == 1) {
    chkUsePac.setSelected(true);
  }
 else   if (proxyMode == 2) {
    chkUseProxy.setSelected(true);
  }
 else   if (proxyMode == 3) {
    chkUseSocks.setSelected(true);
  }
  txtPACUrl.setText(config.getProxyPac());
  if (config.getProxyHost() == null || config.getProxyHost().length() < 1) {
    txtProxyHostnPort.setText("""");
  }
 else {
    txtProxyHostnPort.setText(config.getProxyHost() + (config.getProxyPort() > 0 ? "":"" + config.getProxyPort() : """"));
  }
  if (config.getSocksHost() == null || config.getSocksHost().length() < 1) {
    txtSocksHostnPort.setText("""");
  }
 else {
    txtSocksHostnPort.setText(config.getSocksHost() + (config.getSocksPort() > 0 ? "":"" + config.getSocksPort() : """"));
  }
  if (config.getProxyUser() == null || config.getProxyUser().length() < 1) {
    txtProxyUser.setText("""");
    txtProxyPass.setText("""");
  }
 else {
    txtProxyUser.setText(config.getProxyUser());
    if (config.getProxyPass() == null || config.getProxyPass().length() < 1) {
      txtProxyPass.setText("""");
    }
 else {
      txtProxyPass.setText(config.getProxyPass());
    }
  }
}
"
4020,loadPasswordSettings(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,15,87,69,6,0.14,0.0785,0.666666667,4,2,"private void loadPasswordSettings(){
  passListModel.clear();
  txtCredHostName.setText("""");
  txtUserName.setText("""");
  txtPassword.setText("""");
  Set<Entry<String,PasswordAuthentication>> credentials=CredentialManager.getInstance().getCredentials();
  Iterator<Entry<String,PasswordAuthentication>> it=credentials.iterator();
  while (it.hasNext()) {
    Entry<String,PasswordAuthentication> ent=it.next();
    PasswordItem item=new PasswordItem();
    item.host=ent.getKey();
    item.user=ent.getValue().getUserName();
    item.password=new String(ent.getValue().getPassword());
    passListModel.addElement(item);
  }
}
"
4021,savePasswordSettings(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,11,42,29,4,0.1727,0.074,0.6,4,3,"private void savePasswordSettings(){
  String host=txtCredHostName.getText();
  String user=txtUserName.getText();
  String password=txtPassword.getText();
  Logger.log(host + "" "" + user);
  if (StringUtils.isNullOrEmptyOrBlank(host) || StringUtils.isNullOrEmptyOrBlank(user)) {
    return;
  }
  CredentialManager mgr=CredentialManager.getInstance();
  mgr.addCredentialForHost(host,user,password,true);
  mgr.save();
  loadPasswordSettings();
}
"
4025,createBrowserIntPanel(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,74,2068,1435,2,0.083,0.1174,0.75,26,1,"private JPanel createBrowserIntPanel(){
  JPanel p=new JPanel();
  p.setLayout(null);
  p.setOpaque(false);
  int y=30;
  int h=70;
  JTextArea txt1=createTextArea(""DESC_MONITORING_1"");
  txt1.setBounds(15,y,350 - 30,h);
  p.add(txt1);
  y+=h;
  y+=30;
  h=25;
  JLabel lblFirefox=new JLabel(StringResource.get(""DESC_MOZILLA_FIREFOX""));
  lblFirefox.setFont(FontResource.getBigFont());
  lblFirefox.setBounds(15,y,135,h);
  p.add(lblFirefox);
  JLabel lblChrome=new JLabel(StringResource.get(""DESC_GOOGLE_CHROME""));
  lblChrome.setFont(FontResource.getBigFont());
  lblChrome.setBounds(180,y,135,h);
  p.add(lblChrome);
  y+=h;
  JButton btnFF=createButton2(""DESC_INSTALL"");
  btnFF.setName(""FF_INSTALL"");
  btnFF.setBounds(15,y,140,h);
  p.add(btnFF);
  JButton btnCr=createButton2(""DESC_INSTALL"");
  btnCr.setName(""CR_INSTALL"");
  btnCr.setBounds(180,y,140,h);
  p.add(btnCr);
  y+=h;
  y+=15;
  h=25;
  JLabel lblOpera=new JLabel(StringResource.get(""DESC_OPERA""));
  lblOpera.setFont(FontResource.getBigFont());
  lblOpera.setBounds(15,y,135,h);
  p.add(lblOpera);
  JLabel lblCm=new JLabel(StringResource.get(""DESC_CHROMIUM""));
  lblCm.setFont(FontResource.getBigFont());
  lblCm.setBounds(180,y,135,h);
  p.add(lblCm);
  y+=h;
  JButton btnOp=createButton2(""DESC_INSTALL"");
  btnOp.setName(""OP_INSTALL"");
  btnOp.setBounds(15,y,140,h);
  p.add(btnOp);
  JButton btnCm=createButton2(""DESC_INSTALL"");
  btnCm.setName(""CM_INSTALL"");
  btnCm.setBounds(180,y,140,h);
  p.add(btnCm);
  y+=h;
  y+=15;
  h=25;
  JLabel lblEdge=new JLabel(StringResource.get(""DESC_VIVALDI""));
  lblEdge.setFont(FontResource.getBigFont());
  lblEdge.setName(""VL_INSTALL"");
  lblEdge.setBounds(15,y,135,h);
  p.add(lblEdge);
  y+=h;
  JButton btnEdge=createButton2(""DESC_INSTALL"");
  btnEdge.setName(""VL_INSTALL"");
  btnEdge.addActionListener(this);
  btnEdge.setBounds(15,y,140,h);
  p.add(btnEdge);
  y+=h;
  y+=40;
  h=50;
  JTextArea txt2=createTextArea(""DESC_OTHER_BROWSERS"");
  txt2.setBounds(15,y,350 - 30,h);
  p.add(txt2);
  y+=h;
  h=30;
  JLabel labelMoz=new JLabel(StringResource.get(""DESC_MOZ""));
  labelMoz.setCursor(new Cursor(Cursor.HAND_CURSOR));
  labelMoz.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      showMsgFF();
    }
  }
);
  Font font=FontResource.getNormalFont();
  Map attributes=font.getAttributes();
  attributes.put(TextAttribute.UNDERLINE,TextAttribute.UNDERLINE_ON);
  labelMoz.setBounds(15,y,350 - 30,h);
  labelMoz.setFont(font.deriveFont(attributes));
  labelMoz.setForeground(Color.WHITE);
  p.add(labelMoz);
  y+=h;
  h=30;
  JLabel labelCr=new JLabel(StringResource.get(""DESC_CHROME""));
  labelCr.setCursor(new Cursor(Cursor.HAND_CURSOR));
  labelCr.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      showMsgChrome();
    }
  }
);
  labelCr.setBounds(15,y,350 - 30,h);
  labelCr.setFont(font.deriveFont(attributes));
  labelCr.setForeground(Color.WHITE);
  p.add(labelCr);
  y+=h;
  y+=40;
  h=40;
  JTextArea txt3=createTextArea(""DESC_FILETYPES"");
  txt3.setBounds(15,y,350 - 40,h);
  p.add(txt3);
  y+=h;
  h=70;
  txtFileTyp=new JTextArea();
  txtFileTyp.setBorder(new LineBorder(ColorResource.getDarkBgColor()));
  txtFileTyp.setOpaque(false);
  txtFileTyp.setWrapStyleWord(true);
  txtFileTyp.setLineWrap(true);
  txtFileTyp.setForeground(Color.WHITE);
  txtFileTyp.setFont(FontResource.getNormalFont());
  txtFileTyp.setBounds(15,y,350 - 40,h);
  p.add(txtFileTyp);
  y+=h;
  y+=10;
  h=25;
  JButton btnDef1=createButton2(""DESC_DEF"");
  btnDef1.setName(""BTN_DEF_FILE_EXT"");
  btnDef1.setBounds(310 - 125,y,140,h);
  p.add(btnDef1);
  y+=h;
  y+=40;
  h=30;
  chkVidPan=createCheckBox(""OPT_VID_PANE"");
  chkVidPan.setBounds(15,y,350 - 30,h);
  p.add(chkVidPan);
  y+=h;
  y+=10;
  h=40;
  JTextArea txt4=createTextArea(""DESC_VIDEOTYPES"");
  txt4.setBounds(15,y,350 - 40,h);
  p.add(txt4);
  y+=h;
  h=70;
  txtVidType=new JTextArea();
  txtVidType.setOpaque(false);
  txtVidType.setBorder(new LineBorder(ColorResource.getDarkBgColor()));
  txtVidType.setWrapStyleWord(true);
  txtVidType.setLineWrap(true);
  txtVidType.setForeground(Color.WHITE);
  txtVidType.setFont(FontResource.getNormalFont());
  txtVidType.setBounds(15,y,350 - 40,h);
  p.add(txtVidType);
  y+=h;
  y+=10;
  h=25;
  JButton btnDef2=createButton2(""DESC_DEF"");
  btnDef2.setName(""BTN_DEF_VID_EXT"");
  btnDef2.setBounds(310 - 125,y,140,h);
  p.add(btnDef2);
  y+=h;
  y+=40;
  h=40;
  JTextArea txt6=createTextArea(""DESC_SITEEXCEPTIONS"");
  txt6.setBounds(15,y,350 - 30,h);
  p.add(txt6);
  y+=h;
  h=70;
  txtBlockedHosts=new JTextArea();
  txtBlockedHosts.setOpaque(false);
  txtBlockedHosts.setBorder(new LineBorder(ColorResource.getDarkBgColor()));
  txtBlockedHosts.setWrapStyleWord(true);
  txtBlockedHosts.setLineWrap(true);
  txtBlockedHosts.setForeground(Color.WHITE);
  txtBlockedHosts.setFont(FontResource.getNormalFont());
  txtBlockedHosts.setBounds(15,y,350 - 40,h);
  p.add(txtBlockedHosts);
  y+=h;
  y+=20;
  y+=30;
  p.setPreferredSize(new Dimension(350,y));
  return p;
}
"
4028,createNetworkPanel(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,179,12587,9243,3,0.0524,0.1099,0.571428571,12,1,"private JPanel createNetworkPanel(){
  JPanel p=new JPanel();
  p.setLayout(null);
  p.setOpaque(false);
  int y=20;
  int h=50;
  h=30;
  JLabel lbl1=new JLabel(StringResource.get(""DESC_NET""));
  lbl1.setForeground(Color.WHITE);
  lbl1.setFont(FontResource.getItemFont());
  lbl1.setBounds(15,y,350 - 30,h);
  p.add(lbl1);
  y+=h;
  y+=20;
  h=25;
  JLabel lbl2=new JLabel(StringResource.get(""DESC_NET1""));
  lbl2.setForeground(Color.WHITE);
  lbl2.setFont(FontResource.getNormalFont());
  lbl2.setBounds(15,y,200,h);
  p.add(lbl2);
  y+=5;
  h=20;
  cmbTimeout=new JComboBox<String>(new String[]{""10"",""30"",""60"",""120"",""180"",""360"",""N/A""});
  cmbTimeout.setBackground(ColorResource.getDarkerBgColor());
  cmbTimeout.setBounds(250,y,75,h);
  cmbTimeout.setRenderer(new SimpleListRenderer());
  p.add(cmbTimeout);
  y+=h;
  y+=10;
  h=25;
  JLabel lbl3=new JLabel(StringResource.get(""DESC_NET2""));
  lbl3.setForeground(Color.WHITE);
  lbl3.setFont(FontResource.getNormalFont());
  lbl3.setBounds(15,y,200,h);
  p.add(lbl3);
  y+=5;
  h=20;
  cmbSeg=new JComboBox<String>(new String[]{""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"",""11"",""12"",""13"",""14"",""15"",""16"",""20"",""25"",""30"",""32""});
  cmbSeg.setBackground(ColorResource.getDarkerBgColor());
  cmbSeg.setBounds(250,y,75,h);
  cmbSeg.setRenderer(new SimpleListRenderer());
  p.add(cmbSeg);
  y+=h;
  y+=10;
  h=25;
  JLabel lbl4=new JLabel(StringResource.get(""DESC_NET3""));
  lbl4.setForeground(Color.WHITE);
  lbl4.setFont(FontResource.getNormalFont());
  lbl4.setBounds(15,y,200,h);
  p.add(lbl4);
  y+=5;
  h=20;
  cmbTcp=new JComboBox<String>(new String[]{""8"",""16"",""32"",""64""});
  cmbTcp.setBackground(ColorResource.getDarkerBgColor());
  cmbTcp.setBounds(250,y,75,h);
  cmbTcp.setRenderer(new SimpleListRenderer());
  p.add(cmbTcp);
  y+=h;
  y+=50;
  h=30;
  JLabel lbl51=new JLabel(StringResource.get(""SPEED_LIMIT_TITLE""));
  lbl51.setForeground(Color.WHITE);
  lbl51.setFont(FontResource.getItemFont());
  lbl51.setBounds(15,y,350 - 30,h);
  p.add(lbl51);
  y+=h;
  h=30;
  JLabel lbl71=new JLabel(StringResource.get(""MSG_SPEED_LIMIT""));
  lbl71.setForeground(Color.WHITE);
  lbl71.setFont(FontResource.getNormalFont());
  lbl71.setBounds(15,y,350 - 30,h);
  p.add(lbl71);
  y+=h;
  h=25;
  txtSpeedLimit=new JTextField();
  txtSpeedLimit.setBounds(15,y,350 - 250,h);
  txtSpeedLimit.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtSpeedLimit.setEditable(true);
  txtSpeedLimit.setCaretColor(ColorResource.getActiveTabColor());
  txtSpeedLimit.setForeground(Color.WHITE);
  txtSpeedLimit.setOpaque(false);
  p.add(txtSpeedLimit);
  y+=h;
  y+=50;
  h=30;
  JLabel lbl5=new JLabel(StringResource.get(""DESC_NET4""));
  lbl5.setForeground(Color.WHITE);
  lbl5.setFont(FontResource.getItemFont());
  lbl5.setBounds(15,y,350 - 30,h);
  p.add(lbl5);
  y+=h;
  y+=10;
  h=30;
  chkUsePac=createCheckBox(""DESC_NET5"");
  chkUsePac.setBounds(15,y,350 - 30,h);
  p.add(chkUsePac);
  y+=h;
  h=25;
  txtPACUrl=new JTextField();
  txtPACUrl.setBounds(15,y,350 - 30 - 10,h);
  txtPACUrl.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtPACUrl.setEditable(true);
  txtPACUrl.setForeground(Color.WHITE);
  txtPACUrl.setCaretColor(ColorResource.getActiveTabColor());
  txtPACUrl.setOpaque(false);
  p.add(txtPACUrl);
  y+=h;
  y+=10;
  h=30;
  chkUseProxy=createCheckBox(""DESC_NET6"");
  chkUseProxy.setBounds(15,y,350 - 30,h);
  p.add(chkUseProxy);
  y+=h;
  h=25;
  txtProxyHostnPort=new JTextField();
  txtProxyHostnPort.setBounds(15,y,350 - 30 - 10,h);
  txtProxyHostnPort.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtProxyHostnPort.setEditable(true);
  txtProxyHostnPort.setCaretColor(ColorResource.getActiveTabColor());
  txtProxyHostnPort.setForeground(Color.WHITE);
  txtProxyHostnPort.setOpaque(false);
  p.add(txtProxyHostnPort);
  y+=h;
  y+=10;
  h=30;
  chkUseSocks=createCheckBox(""DESC_NET9"");
  chkUseSocks.setBounds(15,y,350 - 30,h);
  p.add(chkUseSocks);
  y+=h;
  h=25;
  txtSocksHostnPort=new JTextField();
  txtSocksHostnPort.setBounds(15,y,350 - 30 - 10,h);
  txtSocksHostnPort.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtSocksHostnPort.setEditable(true);
  txtSocksHostnPort.setCaretColor(ColorResource.getActiveTabColor());
  txtSocksHostnPort.setForeground(Color.WHITE);
  txtSocksHostnPort.setOpaque(false);
  p.add(txtSocksHostnPort);
  y+=h;
  y+=10;
  h=30;
  JLabel lbl6=new JLabel(StringResource.get(""DESC_NET7""));
  lbl6.setForeground(Color.WHITE);
  lbl6.setFont(FontResource.getNormalFont());
  lbl6.setBounds(15,y,350 - 30,h);
  p.add(lbl6);
  y+=h;
  h=25;
  txtProxyUser=new JTextField();
  txtProxyUser.setBounds(15,y,350 - 30 - 10,h);
  txtProxyUser.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtProxyUser.setCaretColor(ColorResource.getActiveTabColor());
  txtProxyUser.setEditable(true);
  txtProxyUser.setForeground(Color.WHITE);
  txtProxyUser.setOpaque(false);
  p.add(txtProxyUser);
  y+=h;
  y+=10;
  h=30;
  JLabel lbl7=new JLabel(StringResource.get(""DESC_NET8""));
  lbl7.setForeground(Color.WHITE);
  lbl7.setFont(FontResource.getNormalFont());
  lbl7.setBounds(15,y,350 - 30,h);
  p.add(lbl7);
  y+=h;
  h=25;
  txtProxyPass=new JPasswordField();
  txtProxyPass.setBounds(15,y,320 - 10,h);
  txtProxyPass.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtProxyPass.setCaretColor(ColorResource.getActiveTabColor());
  txtProxyPass.setEditable(true);
  txtProxyPass.setForeground(Color.WHITE);
  txtProxyPass.setOpaque(false);
  p.add(txtProxyPass);
  y+=h;
  y+=50;
  p.setPreferredSize(new Dimension(350,y));
  return p;
}
"
4030,createSchedulerPanel(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,206,18643,16171,3,0.0258,0.0558,0.777777778,30,9,"private JPanel createSchedulerPanel(){
  JPanel p=new JPanel();
  p.setLayout(null);
  p.setOpaque(false);
  int y=5;
  h=30;
  JLabel lbl67=new JLabel(StringResource.get(""Q_LIST_DESC""));
  lbl67.setForeground(Color.WHITE);
  lbl67.setFont(FontResource.getNormalFont());
  lbl67.setBounds(15,y,350 - 30,h);
  p.add(lbl67);
  y+=h;
  int h=100;
  queueModel=new DefaultListModel<DownloadQueue>();
  qList=new JList<DownloadQueue>(queueModel);
  qList.setCellRenderer(new QueueListRenderer());
  qList.setBorder(null);
  qList.setOpaque(false);
  qList.setSelectedIndex(0);
  qList.addListSelectionListener(this);
  JScrollPane jsp2=new JScrollPane();
  jsp2.setBorder(new LineBorder(ColorResource.getDarkBgColor()));
  jsp2.getViewport().setOpaque(false);
  jsp2.setViewportView(qList);
  jsp2.setBounds(15,y,350 - 40,h);
  jsp2.setOpaque(false);
  DarkScrollBar scrollBar=new DarkScrollBar(JScrollBar.VERTICAL);
  jsp2.setVerticalScrollBar(scrollBar);
  jsp2.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  p.add(jsp2);
  y+=h;
  y+=10;
  h=25;
  JButton btnSave=createButton2(""DESC_PASS_NEW"");
  btnSave.setName(""BTN_Q_NEW"");
  btnSave.setBounds(15,y,80,h);
  p.add(btnSave);
  JButton btnDel=createButton2(""DESC_PASS_DEL"");
  btnDel.setName(""BTN_Q_DEL"");
  btnDel.setBounds(15 + 80 + 10,y,80,h);
  p.add(btnDel);
  JButton btnNew=createButton2(""DESC_SAVE_Q"");
  btnNew.setName(""BTN_Q_SAVE"");
  btnNew.setBounds(350 - 25 - 80,y,80,h);
  p.add(btnNew);
  y+=h;
  y+=20;
  h=30;
  JLabel lbl6=new JLabel(StringResource.get(""MSG_QNAME""));
  lbl6.setForeground(Color.WHITE);
  lbl6.setFont(FontResource.getNormalFont());
  lbl6.setBounds(15,y,350 - 30,h);
  p.add(lbl6);
  y+=h;
  h=25;
  txtQueueName=new JTextField();
  txtQueueName.setCaretColor(Color.WHITE);
  txtQueueName.setBounds(15,y,350 - 30 - 10,h);
  txtQueueName.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtQueueName.setEditable(true);
  txtQueueName.setForeground(Color.WHITE);
  txtQueueName.setOpaque(false);
  p.add(txtQueueName);
  y+=h;
  y+=20;
  h=30;
  JLabel lbl69=new JLabel(StringResource.get(""Q_LIST_FILES""));
  lbl69.setForeground(Color.WHITE);
  lbl69.setFont(FontResource.getNormalFont());
  lbl69.setBounds(15,y,350 - 30,h);
  p.add(lbl69);
  y+=h;
  h=100;
  queuedItemsModel=new DefaultListModel<String>();
  qItemsList=new JList<String>(queuedItemsModel);
  qItemsList.setCellRenderer(new QueuedItemsRenderer());
  qItemsList.setBorder(null);
  qItemsList.setOpaque(false);
  qItemsList.addListSelectionListener(this);
  JScrollPane jsp3=new JScrollPane();
  jsp3.setBorder(new LineBorder(ColorResource.getDarkBgColor()));
  jsp3.getViewport().setOpaque(false);
  jsp3.setViewportView(qItemsList);
  jsp3.setBounds(15,y,350 - 40,h);
  jsp3.setOpaque(false);
  DarkScrollBar scrollBar2=new DarkScrollBar(JScrollBar.VERTICAL);
  jsp3.setVerticalScrollBar(scrollBar2);
  jsp3.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  jsp3.setAutoscrolls(true);
  p.add(jsp3);
  y+=h;
  y+=10;
  h=25;
  JButton btnQMoveUp=createButton2(""Q_MOVE_UP"");
  btnQMoveUp.setName(""Q_MOVE_UP"");
  btnQMoveUp.setBounds(15,y,100,h);
  p.add(btnQMoveUp);
  JButton btnQMoveDown=createButton2(""Q_MOVE_DN"");
  btnQMoveDown.setName(""Q_MOVE_DN"");
  btnQMoveDown.setBounds(15 + 100 + 5,y,100,h);
  p.add(btnQMoveDown);
  btnQMoveTo=createButton2(""Q_MOVE_TO"");
  btnQMoveTo.setName(""Q_MOVE_TO"");
  btnQMoveTo.setBounds(350 - 25 - 100,y,100,h);
  p.add(btnQMoveTo);
  y+=h;
  y+=20;
  h=30;
  JLabel lbl68=new JLabel(StringResource.get(""Q_SCHEDULE_TXT""));
  lbl68.setForeground(Color.WHITE);
  lbl68.setFont(FontResource.getNormalFont());
  lbl68.setBounds(15,y,350 - 30,h);
  p.add(lbl68);
  y+=h;
  y+=10;
  h=20;
  chkQStart=createCheckBox(""MSG_Q_START"");
  chkQStart.setBounds(15,y,150,h);
  chkQStart.addActionListener(this);
  p.add(chkQStart);
  spinnerDateModel1=new SpinnerDateModel(new Date(),null,null,Calendar.HOUR_OF_DAY);
  spStartTime=new JSpinner(spinnerDateModel1);
  spStartTime.setForeground(Color.WHITE);
  spStartTime.setBackground(ColorResource.getDarkBgColor());
  spStartTime.setBorder(null);
  JSpinner.DateEditor ed1=new JSpinner.DateEditor(spStartTime,""hh:mm a"");
  int n=ed1.getComponentCount();
  for (int i=0; i < n; i++) {
    Component c=ed1.getComponent(i);
    if (c instanceof JTextField) {
      c.setForeground(Color.WHITE);
      c.setBackground(ColorResource.getDarkBtnColor());
    }
  }
  spStartTime.setEditor(ed1);
  spStartTime.setBounds(210,y,115,h);
  p.add(spStartTime);
  y+=h;
  y+=5;
  h=20;
  chkQStop=createCheckBox(""MSG_Q_STOP"");
  chkQStop.setBounds(15,y,150,h);
  p.add(chkQStop);
  spinnerDateModel2=new SpinnerDateModel(new Date(),null,null,Calendar.HOUR_OF_DAY);
  spEndTime=new JSpinner(spinnerDateModel2);
  spEndTime.setBorder(null);
  JSpinner.DateEditor ed2=new JSpinner.DateEditor(spEndTime,""hh:mm a"");
  n=ed2.getComponentCount();
  for (int i=0; i < n; i++) {
    Component c=ed2.getComponent(i);
    if (c instanceof JTextField) {
      c.setForeground(Color.WHITE);
      c.setBackground(ColorResource.getDarkBtnColor());
    }
  }
  spEndTime.setEditor(ed2);
  spEndTime.setBounds(210,y,115,h);
  p.add(spEndTime);
  y+=h;
  y+=20;
  ButtonGroup radioGroup=new ButtonGroup();
  h=30;
  radOnetime=createRadioButton(""MSQ_Q_ONETIME"",FontResource.getNormalFont());
  radOnetime.setName(""Q_ONCE"");
  radOnetime.addActionListener(this);
  radOnetime.setBounds(15,y,120,h);
  p.add(radOnetime);
  radOnetime.setEnabled(false);
  radioGroup.add(radOnetime);
  y+=5;
  h=20;
  spinnerDateModel3=new SpinnerDateModel(new Date(),DateTimeUtils.getBeginDate(),DateTimeUtils.getEndDate(),Calendar.DAY_OF_MONTH);
  spExecDate=new JSpinner(spinnerDateModel3);
  spExecDate.setBorder(null);
  JSpinner.DateEditor ed3=new JSpinner.DateEditor(spExecDate,""dd-MMM-yy"");
  n=ed3.getComponentCount();
  for (int i=0; i < n; i++) {
    Component c=ed3.getComponent(i);
    if (c instanceof JTextField) {
      c.setForeground(Color.WHITE);
      c.setBackground(ColorResource.getDarkBtnColor());
    }
  }
  spExecDate.setEditor(ed3);
  spExecDate.setBounds(120,y,205,h);
  p.add(spExecDate);
  y+=h;
  y+=15;
  radPeriodic=createRadioButton(""MSG_Q_DAILY"",FontResource.getNormalFont());
  radPeriodic.setName(""Q_DAILY"");
  radPeriodic.addActionListener(this);
  radPeriodic.setBounds(15,y,100,h);
  p.add(radPeriodic);
  radioGroup.add(radPeriodic);
  h=20;
  int x=120;
  chkDays=new JCheckBox[7];
  for (int i=1; i < 8; i++) {
    JCheckBox chkDay=createCheckBox(""MSG_Q_D"" + i,FontResource.getNormalFont());
    chkDay.setBounds(x,y,100,h);
    p.add(chkDay);
    chkDays[i - 1]=chkDay;
    x+=100;
    if (i % 2 == 0) {
      x=120;
      y+=h;
    }
  }
  y+=h;
  y+=20;
  y+=50;
  p.setPreferredSize(new Dimension(350,y));
  return p;
}
"
4031,createAdvPanel(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,83,2501,1599,3,0.0849,0.1388,1,6,1,"private JPanel createAdvPanel(){
  JPanel p=new JPanel();
  p.setLayout(null);
  p.setOpaque(false);
  int y=20;
  int h=0;
  y+=h;
  h=30;
  chkHaltAfterFinish=createCheckBox(""MSG_HALT"");
  chkHaltAfterFinish.setBounds(15,y,350,h);
  p.add(chkHaltAfterFinish);
  y+=h;
  h=30;
  chkKeepAwake=createCheckBox(""MSG_AWAKE"");
  chkKeepAwake.setBounds(15,y,350,h);
  p.add(chkKeepAwake);
  y+=h;
  h=30;
  chkExecCmd=createCheckBox(""EXEC_CMD"");
  chkExecCmd.setBounds(15,y,350,h);
  p.add(chkExecCmd);
  y+=h;
  h=25;
  txtCustomCmd=new JTextField();
  txtCustomCmd.setBounds(15,y,350 - 30 - 10,h);
  txtCustomCmd.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtCustomCmd.setForeground(Color.WHITE);
  txtCustomCmd.setOpaque(false);
  p.add(txtCustomCmd);
  y+=h;
  y+=20;
  h=30;
  chkExecAntivir=createCheckBox(""EXE_ANTI_VIR"");
  chkExecAntivir.setBounds(15,y,350,h);
  p.add(chkExecAntivir);
  y+=h;
  y+=5;
  h=30;
  JLabel lbl12=new JLabel(StringResource.get(""ANTIVIR_CMD""));
  lbl12.setForeground(Color.WHITE);
  lbl12.setFont(FontResource.getNormalFont());
  lbl12.setBounds(15,y,350 - 30,h);
  p.add(lbl12);
  y+=h;
  h=25;
  txtAntivirCmd=new JTextField();
  txtAntivirCmd.setBounds(15,y,350 - 30 - 10- 100,h);
  txtAntivirCmd.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtAntivirCmd.setForeground(Color.WHITE);
  txtAntivirCmd.setOpaque(false);
  p.add(txtAntivirCmd);
  JButton btnBrowse=createButton2(""BTN_BROWSE"");
  btnBrowse.setName(""BROWSE_ANTIVIR"");
  btnBrowse.setBackground(ColorResource.getDarkBtnColor());
  btnBrowse.setFont(FontResource.getNormalFont());
  btnBrowse.setBounds(15 + 350 - 30 - 110 + 10,y,90,h);
  p.add(btnBrowse);
  y+=h;
  h=30;
  JLabel lbl1=new JLabel(StringResource.get(""ANTIVIR_ARGS""));
  lbl1.setForeground(Color.WHITE);
  lbl1.setFont(FontResource.getNormalFont());
  lbl1.setBounds(15,y,350 - 30,h);
  p.add(lbl1);
  y+=h;
  h=25;
  txtAntivirArgs=new JTextField();
  txtAntivirArgs.setBounds(15,y,350 - 30 - 10,h);
  txtAntivirArgs.setBorder(new LineBorder(ColorResource.getDarkBtnColor()));
  txtAntivirArgs.setForeground(Color.WHITE);
  txtAntivirArgs.setOpaque(false);
  p.add(txtAntivirArgs);
  y+=h;
  y+=20;
  h=30;
  chkAutoStart=createCheckBox(""AUTO_START"");
  chkAutoStart.setBounds(15,y,350,h);
  p.add(chkAutoStart);
  y+=h;
  y+=50;
  p.setPreferredSize(new Dimension(350,y));
  return p;
}
"
4032,loadAdvSettings(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,11,27,0,4,0.1591,0.159,0.3,1,4,"private void loadAdvSettings(){
  Config config=Config.getInstance();
  chkHaltAfterFinish.setSelected(config.isAutoShutdown());
  chkKeepAwake.setSelected(config.isKeepAwake());
  chkExecCmd.setSelected(config.isExecCmd());
  chkExecAntivir.setSelected(config.isExecAntivir());
  chkAutoStart.setSelected(XDMUtils.isAlreadyAutoStart());
  if (!StringUtils.isNullOrEmptyOrBlank(config.getCustomCmd()))   txtCustomCmd.setText(config.getCustomCmd());
  if (!StringUtils.isNullOrEmptyOrBlank(config.getAntivirCmd()))   txtAntivirArgs.setText(config.getAntivirCmd());
  if (!StringUtils.isNullOrEmptyOrBlank(config.getAntivirExe()))   txtAntivirCmd.setText(config.getAntivirExe());
}
"
4033,saveAdvSettings(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,17,104,72,6,0.105,0.0852,0.2,4,2,"private void saveAdvSettings(){
  Config config=Config.getInstance();
  config.setAutoShutdown(chkHaltAfterFinish.isSelected());
  config.setKeepAwake(chkKeepAwake.isSelected());
  config.setExecCmd(chkExecCmd.isSelected());
  config.setExecAntivir(chkExecAntivir.isSelected());
  if (chkAutoStart.isSelected()) {
    XDMUtils.addToStartup();
  }
 else {
    XDMUtils.removeFromStartup();
  }
  String customCmd=txtCustomCmd.getText();
  config.setCustomCmd(customCmd);
  String antivirExec=txtAntivirCmd.getText();
  config.setAntivirExe(antivirExec);
  String antivirCmd=txtAntivirArgs.getText();
  config.setAntivirCmd(antivirCmd);
}
"
4034,"createRadioButton(String,Font)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,10,17,0,3,0.3667,0.4356,1,3,1,"private JRadioButton createRadioButton(String name,Font font){
  JRadioButton chk=new JRadioButton(StringResource.get(name));
  chk.setIcon(ImageResource.get(""unchecked.png""));
  chk.setSelectedIcon(ImageResource.get(""checked.png""));
  chk.setOpaque(false);
  chk.setFocusPainted(false);
  chk.setForeground(Color.WHITE);
  chk.setFont(font);
  return chk;
}
"
4036,updateSchedulerFields(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,36,533,436,8,0.066,0.057,0.25,10,12,"private void updateSchedulerFields(){
  int index=qList.getSelectedIndex();
  if (index < 0)   return;
  DownloadQueue q=queueModel.getElementAt(index);
  txtQueueName.setText(q.getName());
  loadQueuedItems(q);
  btnQMoveTo.setEnabled(QueueManager.getInstance().getQueueList().size() > 1 && q.getQueuedItems().size() > 0);
  Date startTime=DateTimeUtils.addTimePart(q.getStartTime());
  Date endTime=DateTimeUtils.addTimePart(q.getEndTime());
  if (startTime == null) {
    endTime=null;
  }
  chkQStart.setSelected(startTime != null);
  chkQStop.setSelected(endTime != null);
  if (startTime == null) {
    startTime=DateTimeUtils.getDefaultStart();
  }
  if (endTime == null || endTime.before(startTime)) {
    endTime=DateTimeUtils.getDefaultEnd();
  }
  spinnerDateModel1.setValue(startTime);
  spinnerDateModel2.setValue(endTime);
  for (int i=1; i <= 7; i++) {
    JCheckBox chk=chkDays[i - 1];
    chk.setSelected(false);
  }
  int mask=0x01;
  if (q.isPeriodic()) {
    for (int i=1; i <= 7; i++) {
      JCheckBox chk=chkDays[i - 1];
      chk.setSelected((q.getDayMask() & mask) == mask);
      mask=mask << 1;
    }
    radPeriodic.setSelected(true);
  }
 else {
    Date execDate=q.getExecDate();
    if (execDate == null || execDate.before(new Date())) {
      execDate=new Date();
    }
    radOnetime.setSelected(true);
    spinnerDateModel3.setValue(execDate);
  }
  enableSchedulerFields();
}
"
4037,loadQueuedItems(DownloadQueue),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,8,21,14,4,0.25,0.108,1,3,3,"private void loadQueuedItems(DownloadQueue q){
  queuedItemsModel.clear();
  ArrayList<String> idList=q.getQueuedItems();
  for (int i=0; i < idList.size(); i++) {
    queuedItemsModel.addElement(idList.get(i));
  }
  if (idList.size() > 0) {
    qItemsList.setSelectedIndex(0);
  }
}
"
4038,enableSchedulerFields(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,10,17,0,3,0.225,0.2278,0,1,4,"private void enableSchedulerFields(){
  radOnetime.setEnabled(chkQStart.isSelected());
  radPeriodic.setEnabled(chkQStart.isSelected());
  spExecDate.setEnabled(chkQStart.isSelected());
  spStartTime.setEnabled(chkQStart.isSelected());
  spEndTime.setEnabled(chkQStart.isSelected());
  chkQStop.setEnabled(chkQStart.isSelected());
  spExecDate.setEnabled(radOnetime.isSelected() && chkQStart.isSelected());
  for (int i=0; i < 7; i++) {
    chkDays[i].setEnabled(chkQStart.isSelected() && radPeriodic.isSelected());
  }
}
"
4039,saveQueue(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,33,428,328,6,0.0758,0.0926,0.3,8,9,"private void saveQueue(){
  int index=qList.getSelectedIndex();
  if (index < 0)   return;
  DownloadQueue q=queueModel.getElementAt(index);
  if (txtQueueName.getText().length() > 0) {
    q.setName(txtQueueName.getText());
  }
  if (chkQStart.isSelected()) {
    q.setStartTime(DateTimeUtils.getTimePart(spinnerDateModel1.getDate()));
    System.out.println(spinnerDateModel1.getDate());
    if (chkQStop.isSelected()) {
      q.setEndTime(DateTimeUtils.getTimePart(spinnerDateModel2.getDate()));
    }
 else {
      q.setEndTime(-1);
    }
    if (radOnetime.isSelected()) {
      q.setPeriodic(false);
      q.setExecDate(spinnerDateModel3.getDate());
      q.setDayMask(0);
    }
 else {
      q.setPeriodic(true);
      q.setExecDate(null);
      int dayMask=0;
      int mask=0x01;
      for (int i=1; i <= 7; i++) {
        JCheckBox chk=chkDays[i - 1];
        if (chk.isSelected()) {
          dayMask|=mask;
        }
        mask=mask << 1;
      }
      q.setDayMask(dayMask);
    }
  }
 else {
    q.setStartTime(-1);
  }
  ArrayList<String> newOrder=new ArrayList<String>(queuedItemsModel.size());
  for (int i=0; i < queuedItemsModel.size(); i++) {
    newOrder.add(queuedItemsModel.get(i));
  }
  q.reorderItems(newOrder);
  QueueManager.getInstance().saveQueues();
}
"
4040,queueMoveUp(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,11,19,0,3,0.3636,0.3086,0,3,3,"private void queueMoveUp(){
  int index=qItemsList.getSelectedIndex();
  if (index < 0) {
    return;
  }
  if (index == 0) {
    return;
  }
  String prevId=queuedItemsModel.get(index - 1);
  String nextId=queuedItemsModel.get(index);
  queuedItemsModel.set(index,prevId);
  queuedItemsModel.set(index - 1,nextId);
  qItemsList.setSelectedIndex(index - 1);
  qItemsList.ensureIndexIsVisible(index - 1);
}
"
4041,queueMoveDown(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,11,19,0,3,0.3247,0.2556,0,3,3,"private void queueMoveDown(){
  int index=qItemsList.getSelectedIndex();
  if (index < 0)   return;
  if (index == queuedItemsModel.size() - 1) {
    return;
  }
  String prevId=queuedItemsModel.get(index);
  String nextId=queuedItemsModel.get(index + 1);
  queuedItemsModel.set(index + 1,prevId);
  queuedItemsModel.set(index,nextId);
  qItemsList.setSelectedIndex(index + 1);
  qItemsList.ensureIndexIsVisible(index + 1);
}
"
4043,removeQueue(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,7,13,5,3,0.2857,0.1375,0.5,2,3,"private void removeQueue(){
  int index=qList.getSelectedIndex();
  if (index < 1)   return;
  DownloadQueue q=queueModel.get(index);
  QueueManager.getInstance().removeQueue(q.getQueueId());
  loadSchedulerSettings(index < QueueManager.getInstance().getQueueList().size() ? index : index - 1);
}
"
4044,createNewQueue(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,6,10,5,3,0.3889,0.1429,0.333333333,2,2,"private void createNewQueue(){
  int index=QueueManager.getInstance().getQueueList().size();
  QueueManager.getInstance().createNewQueue();
  int count=QueueManager.getInstance().getQueueList().size();
  loadSchedulerSettings(index < count ? index : 0);
}
"
4045,showMoveQPopup(JButton),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,19,139,107,3,0.1255,0.0843,0.6,8,5,"private void showMoveQPopup(JButton btn){
  int index=qList.getSelectedIndex();
  if (index < 0) {
    return;
  }
  DownloadQueue q=queueModel.get(index);
  String qid=q.getQueueId();
  if (qid == null)   return;
  JPopupMenu popupMenu=new JPopupMenu();
  for (int i=0; i < QueueManager.getInstance().getQueueList().size(); i++) {
    DownloadQueue tq=QueueManager.getInstance().getQueueList().get(i);
    if (qid.equals(tq.getQueueId())) {
      continue;
    }
    JMenuItem item=new JMenuItem(tq.getName());
    item.setName(""Q_MOVE_TO:"" + tq.getQueueId());
    item.addActionListener(this);
    item.setForeground(Color.WHITE);
    item.setFont(FontResource.getNormalFont());
    popupMenu.add(item);
  }
  popupMenu.setInvoker(btn);
  popupMenu.show(btn,0,btn.getHeight());
}
"
4046,saveOverviewSettings(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,12,42,18,4,0.1667,0.1548,0.166666667,2,2,"private void saveOverviewSettings(){
  Config config=Config.getInstance();
  config.setShowDownloadWindow(chkPrgWnd.isSelected());
  config.setShowDownloadCompleteWindow(chkEndWnd.isSelected());
  String text=cmbMax.getSelectedItem() + """";
  if (""N/A"".equals(text)) {
    config.setMaxDownloads(0);
  }
 else {
    config.setMaxDownloads(Integer.parseInt(text));
  }
  config.setDownloadFolder(txtDefFolder.getText());
  config.save();
}
"
4047,saveMonitoringSettings(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,7,11,1,3,0.2653,0.1667,0.333333333,1,1,"private void saveMonitoringSettings(){
  Config config=Config.getInstance();
  config.setFileExts(XDMUtils.appendStr2Array(txtFileTyp.getText()));
  config.setVidExts(XDMUtils.appendStr2Array(txtVidType.getText()));
  config.setBlockedHosts(XDMUtils.appendStr2Array(txtBlockedHosts.getText()));
  config.setShowVideoNotification(chkVidPan.isSelected());
}
"
4048,saveNetworkSettings(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SettingsPage.java,xdm,55,1294,1103,10,0.0552,0.0506,0.076923077,14,18,"private void saveNetworkSettings(){
  Config config=Config.getInstance();
  config.setNetworkTimeout(cmbTimeout.getSelectedItem().equals(""N/A"") ? 0 : Integer.parseInt(cmbTimeout.getSelectedItem() + """"));
  config.setMaxSegments(Integer.parseInt(cmbSeg.getSelectedItem() + """"));
  config.setTcpWindowSize(Integer.parseInt(cmbTcp.getSelectedItem() + """"));
  try {
    int speedLimit=Integer.parseInt(txtSpeedLimit.getText());
    config.setSpeedLimit(speedLimit);
  }
 catch (  Exception e) {
  }
  int proxyMode=0;
  if (chkUsePac.isSelected()) {
    proxyMode=1;
  }
 else   if (chkUseProxy.isSelected()) {
    proxyMode=2;
  }
 else   if (chkUseSocks.isSelected()) {
    proxyMode=3;
  }
  config.setProxyMode(proxyMode);
  config.setProxyPac(txtPACUrl.getText());
  String proxyText=txtProxyHostnPort.getText();
  if (proxyText.length() > 0) {
    String host=null;
    int port=80;
    if (proxyText.indexOf("":"") != -1) {
      String[] arr=proxyText.split("":"");
      host=arr[0];
      try {
        port=Integer.parseInt(arr[1]);
      }
 catch (      Exception e) {
        host=null;
        port=0;
      }
    }
 else {
      host=proxyText;
    }
    if (port > 0 && host != null && host.length() > 0) {
      config.setProxyHost(host);
      config.setProxyPort(port);
    }
  }
  String socksText=txtSocksHostnPort.getText();
  if (socksText.length() > 0) {
    String host=null;
    int port=1080;
    if (socksText.indexOf("":"") != -1) {
      String[] arr=socksText.split("":"");
      host=arr[0];
      try {
        port=Integer.parseInt(arr[1]);
      }
 catch (      Exception e) {
        host=null;
        port=0;
      }
    }
 else {
      host=socksText;
    }
    if (port > 0 && host != null && host.length() > 0) {
      config.setSocksHost(host);
      config.setSocksPort(port);
    }
  }
  config.setProxyUser(txtProxyUser.getText());
  config.setProxyPass(txtProxyPass.getText());
}
"
4052,SimpleListRenderer(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\SimpleListRenderer.java,xdm,7,21,21,7,0.1429,0,1,0,1,"public SimpleListRenderer(){
  setForeground(Color.WHITE);
  setFont(FontResource.getNormalFont());
  setOpaque(true);
  setPreferredSize(new Dimension(100,30));
  setBorder(new EmptyBorder(0,5,0,0));
}
"
4059,createTray(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\TrayHandler.java,xdm,9,34,32,7,0.1389,0.0417,0.625,10,4,"public static void createTray(){
  if (!SystemTray.isSupported()) {
    Logger.log(""SystemTray is not supported"");
    return;
  }
  if (XDMUtils.detectOS() == XDMUtils.LINUX) {
    return;
  }
  final PopupMenu popup=new PopupMenu();
  final TrayIcon trayIcon=new TrayIcon(ImageResource.get(""icon.png"").getImage());
  trayIcon.setImageAutoSize(true);
  final SystemTray tray=SystemTray.getSystemTray();
  act=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      MenuItem c=(MenuItem)e.getSource();
      String name=c.getName();
      System.out.println(name);
      if (""ADD_URL"".equals(name)) {
        XDMApp.getInstance().addDownload(null,null);
      }
 else       if (""RESTORE"".equals(name)) {
        XDMApp.getInstance().showMainWindow();
      }
 else       if (""EXIT"".equals(name)) {
        XDMApp.getInstance().exit();
      }
    }
  }
;
  MenuItem addUrlItem=new MenuItem(StringResource.get(""MENU_ADD_URL""));
  addUrlItem.addActionListener(act);
  addUrlItem.setName(""ADD_URL"");
  MenuItem restoreItem=new MenuItem(StringResource.get(""MSG_RESTORE""));
  restoreItem.addActionListener(act);
  restoreItem.setName(""RESTORE"");
  MenuItem exitItem=new MenuItem(StringResource.get(""MENU_EXIT""));
  exitItem.addActionListener(act);
  exitItem.setName(""EXIT"");
  popup.add(addUrlItem);
  popup.add(restoreItem);
  popup.add(exitItem);
  trayIcon.setPopupMenu(popup);
  try {
    tray.add(trayIcon);
  }
 catch (  AWTException e) {
    Logger.log(""TrayIcon could not be added."");
  }
}
"
4061,UpdateNotifyPanel(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\UpdateNotifyPanel.java,xdm,15,90,75,6,0.15,0.0657,0.714285714,4,1,"public UpdateNotifyPanel(){
  super(new BorderLayout());
  setBorder(new EmptyBorder(10,15,10,15));
  JPanel p2=new JPanel(new BorderLayout());
  lbl=new JLabel();
  lbl.setFont(FontResource.getItemFont());
  p2.add(lbl);
  desc=new JLabel();
  p2.add(desc,BorderLayout.SOUTH);
  add(p2,BorderLayout.CENTER);
  JButton btn=new JButton(StringResource.get(""LBL_INSTALL_NOW""));
  btn.setFont(FontResource.getItemFont());
  btn.setName(""OPT_UPDATE_FFMPEG"");
  btn.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (mode == UpdateChecker.APP_UPDATE_AVAILABLE) {
        XDMUtils.browseURL(""http://xdman.sourceforge.net/update/update.php?ver="" + XDMApp.APP_VERSION);
      }
 else {
        FFmpegDownloader fd=new FFmpegDownloader();
        fd.start();
      }
      XDMApp.getInstance().clearNotifications();
    }
  }
);
  add(btn,BorderLayout.EAST);
}
"
4064,"VideoDownloadWindow(HttpMetadata,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoDownloadWindow.java,xdm,10,41,37,7,0.15,0.0476,0.666666667,7,4,"public VideoDownloadWindow(HttpMetadata metadata,String file){
  this.folder=Config.getInstance().getDownloadFolder();
  this.metadata=metadata;
  if (this.metadata == null) {
    this.metadata=new HttpMetadata();
  }
  initUI();
  if (file != null && file.length() > 0) {
    txtFile.setText(file);
  }
  getRootPane().setDefaultButton(btnDN);
  addWindowListener(new WindowAdapter(){
    @Override public void windowActivated(    WindowEvent e){
      txtFile.requestFocus();
    }
  }
);
  queueId="""";
}
"
4066,actionPerformed(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoDownloadWindow.java,xdm,20,160,130,8,0.19,0.1229,0,3,10,"@Override public void actionPerformed(ActionEvent e){
  if (e.getSource() instanceof JComponent) {
    String name=((JComponent)e.getSource()).getName();
    if (name.startsWith(""QUEUE"")) {
      System.out.println(name);
      String[] arr=name.split("":"");
      if (arr.length < 2) {
        queueId="""";
      }
 else {
        queueId=arr[1].trim();
      }
      createDownload(false);
    }
 else     if (name.equals(""STREAM"")) {
      updateAppliableFormats();
    }
 else     if (name.equals(""CLOSE"")) {
      dispose();
    }
 else     if (name.equals(""DOWNLOAD_NOW"")) {
      queueId="""";
      createDownload(true);
    }
 else     if (name.equals(""BTN_MORE"")) {
      if (pop == null) {
        createPopup();
      }
      pop.show(btnMore,0,btnMore.getHeight());
    }
 else     if (name.equals(""BROWSE_FOLDER"")) {
      choseFolder();
    }
  }
}
"
4067,createDownload(boolean),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoDownloadWindow.java,xdm,22,223,215,17,0.072,0.0256,0.75,2,3,"private void createDownload(boolean now){
  String fileName=txtFile.getText();
  if (fileName.length() < 1) {
    JOptionPane.showMessageDialog(this,StringResource.get(""MSG_NO_URL""));
    return;
  }
  dispose();
  Logger.log(""file: "" + txtFile.getText());
  if (txtFile.getText().length() < 1) {
    JOptionPane.showMessageDialog(this,StringResource.get(""MSG_NO_FILE""));
    return;
  }
  XDMApp.getInstance().createDownload(txtFile.getText(),folder,metadata,now,queueId,0,cmbStmAction.getSelectedIndex());
}
"
4068,choseFolder(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoDownloadWindow.java,xdm,6,11,7,3,0.25,0.0833,0.666666667,1,2,"private void choseFolder(){
  JFileChooser jfc=XDMFileChooser.getFileChooser(JFileChooser.DIRECTORIES_ONLY,new File(folder));
  if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    folder=jfc.getSelectedFile().getAbsolutePath();
    Config.getInstance().setDownloadFolder(folder);
  }
}
"
4072,update(DocumentEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoDownloadWindow.java,xdm,8,23,18,4,0.2031,0.0722,1,5,2,"void update(DocumentEvent e){
  try {
    Document doc=e.getDocument();
    int len=doc.getLength();
    String text=doc.getText(0,len);
    txtFile.setText(XDMUtils.getFileName(text));
  }
 catch (  Exception err) {
    Logger.log(err);
  }
}
"
4073,initUI(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoDownloadWindow.java,xdm,106,5263,4961,24,0.0369,0.0288,0.727272727,9,4,"private void initUI(){
  setUndecorated(true);
  try {
    if (GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().isWindowTranslucencySupported(WindowTranslucency.TRANSLUCENT)) {
      setOpacity(0.85f);
    }
  }
 catch (  Exception e) {
    Logger.log(e);
  }
  setIconImage(ImageResource.get(""icon.png"").getImage());
  setSize(400,210);
  setLocationRelativeTo(null);
  setAlwaysOnTop(true);
  getContentPane().setLayout(null);
  getContentPane().setBackground(ColorResource.getDarkestBgColor());
  JPanel titlePanel=new TitlePanel(null,this);
  titlePanel.setOpaque(false);
  titlePanel.setBounds(0,0,400,50);
  JButton closeBtn=new CustomButton();
  closeBtn.setBounds(365,5,30,30);
  closeBtn.setBackground(ColorResource.getDarkestBgColor());
  closeBtn.setBorderPainted(false);
  closeBtn.setFocusPainted(false);
  closeBtn.setName(""CLOSE"");
  closeBtn.setIcon(ImageResource.get(""close_btn.png""));
  closeBtn.addActionListener(this);
  titlePanel.add(closeBtn);
  JLabel titleLbl=new JLabel(StringResource.get(""VID_TITLE""));
  titleLbl.setFont(FontResource.getBiggerFont());
  titleLbl.setForeground(ColorResource.getSelectionColor());
  titleLbl.setBounds(25,15,200,30);
  titlePanel.add(titleLbl);
  JLabel lineLbl=new JLabel();
  lineLbl.setBackground(ColorResource.getSelectionColor());
  lineLbl.setBounds(0,55,400,1);
  lineLbl.setOpaque(true);
  add(lineLbl);
  txtFile=new JTextField();
  txtFile.setBorder(new LineBorder(ColorResource.getSelectionColor(),1));
  txtFile.setBackground(ColorResource.getDarkestBgColor());
  txtFile.setForeground(Color.WHITE);
  txtFile.setBounds(77,79,241,20);
  txtFile.setCaretColor(ColorResource.getSelectionColor());
  add(txtFile);
  JButton browse=new CustomButton(""..."");
  browse.setName(""BROWSE_FOLDER"");
  browse.setMargin(new Insets(0,0,0,0));
  browse.setBounds(325,79,40,20);
  browse.setFocusPainted(false);
  browse.setBackground(ColorResource.getDarkestBgColor());
  browse.setBorder(new LineBorder(ColorResource.getSelectionColor(),1));
  browse.setForeground(Color.WHITE);
  browse.addActionListener(this);
  browse.setFont(FontResource.getItemFont());
  add(browse);
  add(titlePanel);
  JLabel lblFile=new JLabel(StringResource.get(""ND_FILE""),JLabel.RIGHT);
  lblFile.setFont(FontResource.getNormalFont());
  lblFile.setForeground(Color.WHITE);
  lblFile.setBounds(10,79,61,23);
  add(lblFile);
  formatListModel=new DefaultComboBoxModel<MediaFormat>(MediaFormats.getSupportedFormats());
  JLabel lblStream=new JLabel(StringResource.get(""O_STM_FTM""),JLabel.RIGHT);
  lblStream.setFont(FontResource.getNormalFont());
  lblStream.setForeground(Color.WHITE);
  lblStream.setBounds(10,111,61,20);
  add(lblStream);
  cmbStmAction=new JComboBox<String>(new String[]{StringResource.get(""VID_FMT_BOTH""),StringResource.get(""VID_FMT_AUDIO""),StringResource.get(""VID_FMT_VIDEO"")});
  cmbStmAction.addActionListener(this);
  cmbStmAction.setOpaque(true);
  cmbStmAction.setBounds(77,111,291,20);
  cmbStmAction.setName(""STREAM"");
  add(cmbStmAction);
  JPanel panel=new JPanel(null);
  panel.setBounds(0,155,400,55);
  panel.setBackground(Color.DARK_GRAY);
  add(panel);
  btnMore=new CustomButton(StringResource.get(""ND_MORE""));
  btnDN=new CustomButton(StringResource.get(""ND_DOWNLOAD_NOW""));
  btnCN=new CustomButton(StringResource.get(""ND_CANCEL""));
  btnMore.setBounds(0,1,120,55);
  btnMore.setName(""BTN_MORE"");
  styleButton(btnMore);
  panel.add(btnMore);
  btnDN.setBounds(121,1,160,55);
  btnDN.setName(""DOWNLOAD_NOW"");
  styleButton(btnDN);
  panel.add(btnDN);
  btnCN.setBounds(282,1,120,55);
  btnCN.setName(""CLOSE"");
  styleButton(btnCN);
  panel.add(btnCN);
  Logger.log(""Dash metadata? "" + (metadata instanceof DashMetadata));
  cmbStmAction.setEnabled(metadata != null && metadata instanceof DashMetadata);
}
"
4074,createPopup(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoDownloadWindow.java,xdm,19,121,71,4,0.152,0.1488,1,2,1,"private void createPopup(){
  pop=new JPopupMenu();
  pop.setBackground(ColorResource.getDarkerBgColor());
  JMenu dl=new JMenu(StringResource.get(""ND_DOWNLOAD_LATER""));
  dl.setForeground(Color.WHITE);
  dl.setBorder(new EmptyBorder(5,5,5,5));
  dl.addActionListener(this);
  dl.setBackground(ColorResource.getDarkerBgColor());
  dl.setBorderPainted(false);
  pop.add(dl);
  createQueueItems(dl);
  JMenuItem ig=new JMenuItem(StringResource.get(""ND_IGNORE_URL""));
  ig.setName(""IGNORE_URL"");
  ig.setForeground(Color.WHITE);
  ig.addActionListener(this);
  pop.add(ig);
  pop.setInvoker(btnMore);
}
"
4075,styleButton(CustomButton),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoDownloadWindow.java,xdm,10,17,0,3,0.26,0.3295,0.75,1,1,"private void styleButton(CustomButton btn){
  btn.setBackground(ColorResource.getDarkestBgColor());
  btn.setPressedBackground(ColorResource.getDarkerBgColor());
  btn.setForeground(Color.WHITE);
  btn.setFont(FontResource.getBigFont());
  btn.setBorderPainted(false);
  btn.setMargin(new Insets(0,0,0,0));
  btn.setFocusPainted(false);
  btn.addActionListener(this);
}
"
4076,createQueueItems(JMenuItem),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoDownloadWindow.java,xdm,10,31,17,3,0.2143,0.1477,0.5,5,3,"private void createQueueItems(JMenuItem queueMenuItem){
  ArrayList<DownloadQueue> queues=XDMApp.getInstance().getQueueList();
  for (int i=0; i < queues.size(); i++) {
    DownloadQueue q=queues.get(i);
    JMenuItem mItem=new JMenuItem(q.getName().length() < 1 ? ""Default queue"" : q.getName());
    mItem.setName(""QUEUE:"" + q.getQueueId());
    mItem.setForeground(Color.WHITE);
    mItem.addActionListener(this);
    queueMenuItem.add(mItem);
  }
}
"
4077,updateAppliableFormats(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoDownloadWindow.java,xdm,13,50,22,3,0.2436,0.184,0.666666667,3,8,"private void updateAppliableFormats(){
  int index=cmbStmAction.getSelectedIndex();
  if (index < 0)   return;
  MediaFormat[] fmts=MediaFormats.getSupportedFormats();
  formatListModel.removeAllElements();
  for (  MediaFormat fmt : fmts) {
    if (index == 1) {
      if (fmt.isAudioOnly()) {
        formatListModel.addElement(fmt);
      }
    }
 else     if (index == 2) {
      if (!fmt.isAudioOnly() && fmt.getWidth() > 0) {
        formatListModel.addElement(fmt);
      }
    }
 else {
      formatListModel.addElement(fmt);
    }
  }
}
"
4087,"addVideo(HttpMetadata,String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoPopup.java,xdm,27,224,97,6,0.1222,0.2004,0.444444444,5,3,"public synchronized void addVideo(HttpMetadata metadata,String file,String info){
  VideoPopupItem item=new VideoPopupItem();
  item.setMetadata(metadata);
  item.setInfo(info);
  item.setFile(file);
  item.setTimestamp(System.currentTimeMillis());
  if (addItem(item)) {
    CustomButton cb=new CustomButton();
    cb.setHorizontalAlignment(JButton.LEFT);
    cb.setHorizontalTextPosition(JButton.LEFT);
    cb.setMargin(new Insets(0,0,0,0));
    cb.setForeground(Color.WHITE);
    cb.setName(metadata.getId());
    cb.setText(item.toString());
    cb.setBackground(ColorResource.getDarkestBgColor());
    cb.setBorderPainted(false);
    cb.setFocusPainted(false);
    cb.setPreferredSize(new Dimension(250,30));
    cb.setMinimumSize(new Dimension(250,30));
    cb.setMaximumSize(new Dimension(250,30));
    cb.addActionListener(this);
    menuBox.add(cb,0);
    if (!isVisible()) {
      setVisible(true);
    }
    revalidate();
    repaint();
  }
}
"
4088,arrangeList(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoPopup.java,xdm,8,20,12,3,0.25,0.1235,0,2,2,"private void arrangeList(){
  videoItems.clear();
  ArrayList<VideoPopupItem> itemsCopy=new ArrayList<VideoPopupItem>();
  itemsCopy.addAll(itemList);
  Collections.sort(itemsCopy,this);
  for (  VideoPopupItem item : itemsCopy) {
    videoItems.addElement(item);
  }
}
"
4089,VideoPopup(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoPopup.java,xdm,21,207,204,19,0.0576,0.0048,0,2,1,"private VideoPopup(){
  itemList=new ArrayList<VideoPopupItem>();
  videoItems=new DefaultListModel<VideoPopupItem>();
  init();
  Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
  Insets scnMax=Toolkit.getDefaultToolkit().getScreenInsets(this.getGraphicsConfiguration());
  this.setLocation(d.width - getWidth() - 50,d.height - scnMax.bottom - getHeight()- 30);
}
"
4090,init(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoPopup.java,xdm,88,3657,3486,52,0.0341,0.0284,0.888888889,10,4,"private void init(){
  try {
    setUndecorated(true);
    setSize(250,40);
    setIconImage(ImageResource.get(""icon.png"").getImage());
    setFocusableWindowState(false);
    setType(Type.UTILITY);
    setAlwaysOnTop(true);
    try {
      if (GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().isWindowTranslucencySupported(WindowTranslucency.TRANSLUCENT)) {
        setOpacity(0.85f);
      }
    }
 catch (    Exception e) {
      Logger.log(e);
    }
    panel=new JPanel(new BorderLayout());
    panel.setBackground(ColorResource.getDarkestBgColor());
    add(panel);
    bottomPanel=new TitlePanel(new BorderLayout(),this);
    bottomPanel.setBorder(new EmptyBorder(0,20,0,0));
    bottomPanel.setOpaque(true);
    bottomPanel.setBackground(ColorResource.getDarkerBgColor());
    panel.add(bottomPanel);
    JButton closeBtn=new CustomButton();
    closeBtn.setPreferredSize(new Dimension(30,40));
    closeBtn.setMinimumSize(new Dimension(30,40));
    closeBtn.setBackground(ColorResource.getDarkerBgColor());
    closeBtn.setBorderPainted(false);
    closeBtn.setFocusPainted(false);
    closeBtn.setName(""CLOSE"");
    closeBtn.setIcon(ImageResource.get(""close_btn.png""));
    closeBtn.setMargin(new Insets(0,0,0,0));
    closeBtn.addActionListener(this);
    bottomPanel.add(closeBtn,BorderLayout.EAST);
    JButton popupBtn=new CustomButton();
    popupBtn.setBackground(ColorResource.getDarkerBgColor());
    popupBtn.setFont(FontResource.getItemFont());
    popupBtn.setPreferredSize(new Dimension(200,40));
    popupBtn.setMinimumSize(new Dimension(200,40));
    popupBtn.setBorderPainted(false);
    popupBtn.setForeground(Color.WHITE);
    popupBtn.setText(""DOWNLOAD VIDEO"");
    popupBtn.setFocusPainted(false);
    popupBtn.setName(""EXPAND"");
    popupBtn.addActionListener(this);
    bottomPanel.add(popupBtn);
    itemPanel=new JPanel(new BorderLayout());
    itemPanel.setOpaque(false);
    itemListBox=new JList<VideoPopupItem>(videoItems);
    itemListBox.setOpaque(false);
    itemListBox.setCellRenderer(new SimpleListRenderer());
    itemListBox.addMouseMotionListener(new MouseAdapter(){
      public void mouseMoved(      MouseEvent me){
        Point p=new Point(me.getX(),me.getY());
        int index=itemListBox.locationToIndex(p);
        if (index != mHoveredJListIndex) {
          mHoveredJListIndex=index;
          if (mHoveredJListIndex != -1) {
            itemListBox.setSelectedIndex(mHoveredJListIndex);
          }
 else {
            itemListBox.clearSelection();
          }
        }
      }
      @Override public void mouseExited(      MouseEvent e){
        itemListBox.clearSelection();
        itemListBox.repaint();
      }
    }
);
    JScrollPane jsp=new JScrollPane();
    jsp.setOpaque(false);
    jsp.setBorder(null);
    jsp.getViewport().setOpaque(false);
    DarkScrollBar scrollBar=new DarkScrollBar(JScrollBar.VERTICAL);
    jsp.setVerticalScrollBar(scrollBar);
    jsp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
    jsp.getVerticalScrollBar().setUnitIncrement(10);
    jsp.getVerticalScrollBar().setBlockIncrement(25);
    menuBox=Box.createVerticalBox();
    menuBox.add(Box.createVerticalGlue());
    jsp.setViewportView(menuBox);
    itemPanel.add(jsp);
    closePopupBtn=new CustomButton();
    closePopupBtn.setBackground(ColorResource.getDarkerBgColor());
    closePopupBtn.setBorderPainted(false);
    closePopupBtn.setFocusPainted(false);
    closePopupBtn.setName(""COLAPSE"");
    closePopupBtn.addActionListener(this);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
"
4093,actionPerformed(ActionEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoPopup.java,xdm,19,152,133,7,0.1053,0.0568,0.571428571,4,7,"@Override public void actionPerformed(ActionEvent e){
  String name=((JComponent)e.getSource()).getName();
  for (  VideoPopupItem item : itemList) {
    if (name.equals(item.getMetadata().getId())) {
      collapse();
      HttpMetadata md=item.getMetadata().derive();
      Logger.log(""dash metdata ? "" + (md instanceof DashMetadata));
      XDMApp.getInstance().addVideo(md,item.getFile());
    }
  }
  if (name.equals(""CLOSE"")) {
    collapse();
    setVisible(false);
    menuBox.removeAll();
    itemList.clear();
  }
 else   if (name.equals(""COLAPSE"")) {
    collapse();
  }
 else   if (name.equals(""EXPAND"")) {
    if (!expanded) {
      expand();
    }
 else {
      collapse();
    }
  }
}
"
4094,expand(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoPopup.java,xdm,29,341,276,8,0.1172,0.0618,1,7,4,"private void expand(){
  initialY=getLocationOnScreen().y;
  int screenHeight=Toolkit.getDefaultToolkit().getScreenSize().height;
  int preferedExpandedHeight=400;
  int bottomTaskbarHeight, topTaskbarHeight;
  Insets scnMax=Toolkit.getDefaultToolkit().getScreenInsets(this.getGraphicsConfiguration());
  bottomTaskbarHeight=scnMax.bottom;
  topTaskbarHeight=scnMax.top;
  upward=initialY > (screenHeight - (bottomTaskbarHeight + topTaskbarHeight)) / 2;
  arrangeList();
  panel.remove(bottomPanel);
  panel.add(itemPanel);
  if (upward) {
    if (getY() - topTaskbarHeight < preferedExpandedHeight) {
      preferedExpandedHeight=getY() - topTaskbarHeight;
    }
    setLocation(getX(),initialY - preferedExpandedHeight + getHeight());
    panel.add(bottomPanel,BorderLayout.SOUTH);
    itemPanel.add(closePopupBtn,BorderLayout.NORTH);
    closePopupBtn.setIcon(ImageResource.get(""down_arrow.png""));
  }
 else {
    if (screenHeight - getY() - bottomTaskbarHeight < preferedExpandedHeight) {
      preferedExpandedHeight=screenHeight - getY() - bottomTaskbarHeight;
    }
    panel.add(bottomPanel,BorderLayout.NORTH);
    itemPanel.add(closePopupBtn,BorderLayout.SOUTH);
    closePopupBtn.setIcon(ImageResource.get(""up_arrow.png""));
  }
  setSize(getWidth(),preferedExpandedHeight);
  revalidate();
  repaint();
  expanded=true;
}
"
4095,collapse(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoPopup.java,xdm,14,85,79,9,0.1327,0.0453,0,2,2,"private void collapse(){
  panel.remove(bottomPanel);
  panel.remove(itemPanel);
  int height=getHeight();
  int locationY=getY() + height - 40;
  setSize(getWidth(),40);
  if (upward) {
    setLocation(getX(),locationY);
  }
  panel.add(bottomPanel);
  revalidate();
  repaint();
  expanded=false;
  upward=false;
}
"
4096,"compare(VideoPopupItem,VideoPopupItem)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoPopup.java,xdm,7,15,9,4,0.25,0.225,1,3,4,"@Override public int compare(VideoPopupItem item1,VideoPopupItem item2){
  int ret=0;
  if (item1.getTimestamp() > item2.getTimestamp()) {
    ret=1;
  }
 else   if (item1.getTimestamp() < item2.getTimestamp()) {
    ret=1;
  }
  return upward ? ret : -ret;
}
"
4097,addItem(VideoPopupItem),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\VideoPopup.java,xdm,14,60,29,3,0.2321,0.1489,0.75,7,7,"private boolean addItem(VideoPopupItem item){
  if (item.getMetadata() == null) {
    return false;
  }
  for (int i=0; i < itemList.size(); i++) {
    VideoPopupItem p=itemList.get(i);
    HttpMetadata m1=item.getMetadata();
    HttpMetadata m2=p.getMetadata();
    if (m1.getType() == m2.getType()) {
      if (m1.getUrl().equals(m2.getUrl())) {
        if (m1 instanceof DashMetadata) {
          DashMetadata dm1=(DashMetadata)m1;
          DashMetadata dm2=(DashMetadata)m2;
          if (dm1.getUrl2().equals(dm2.getUrl2())) {
            return false;
          }
        }
 else {
          return false;
        }
      }
    }
  }
  itemList.add(item);
  return true;
}
"
4117,XDMFrame(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMFrame.java,xdm,26,275,225,6,0.0931,0.0521,1,1,1,"public XDMFrame(){
  setUndecorated(true);
  createCursors();
  contentPane=new JPanel(new BorderLayout());
  modalPane=new LayeredPanel(150);
  modalPane.setVisible(false);
  dialogPane=new LayeredPanel(40);
  dialogPane.setVisible(false);
  createResizeGrip();
  panTitle=new TitlePanel(new BorderLayout(),this);
  panTitle.setBackground(ColorResource.getTitleColor());
  panTitle.setBorder(new EmptyBorder(5,5,0,5));
  panTitle.setOpaque(true);
  registerTitlePanel(panTitle);
  panClient=new JPanel(new BorderLayout());
  panClient.setBackground(Color.WHITE);
  JPanel panContent=new JPanel(new BorderLayout());
  panContent.add(panTitle,BorderLayout.NORTH);
  panContent.add(panClient);
  contentPane.add(panContent);
  layeredPane=new JLayeredPane();
  layeredPane.add(contentPane,new Integer(DEFAULT_LAYER));
  layeredPane.add(modalPane,new Integer(MODAL_LAYER));
  layeredPane.add(dialogPane,new Integer(DIALOG_LAYER));
  super.add(layeredPane);
  super.addComponentListener(this);
}
"
4124,createResizeGrip(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMFrame.java,xdm,62,1781,1671,36,0.0842,0.0372,1,29,2,"private void createResizeGrip(){
  GripMouseAdapter gma=new GripMouseAdapter();
  lblRightGrip=new JLabel();
  lblRightGrip.setMaximumSize(new Dimension(2,lblRightGrip.getMaximumSize().height));
  lblRightGrip.setPreferredSize(new Dimension(2,lblRightGrip.getPreferredSize().height));
  lblRightGrip.setBackground(Color.BLACK);
  lblRightGrip.setOpaque(true);
  contentPane.add(lblRightGrip,BorderLayout.EAST);
  lblBottomGrip=new JLabel();
  lblBottomGrip.setMaximumSize(new Dimension(lblBottomGrip.getPreferredSize().width,2));
  lblBottomGrip.setPreferredSize(new Dimension(lblBottomGrip.getPreferredSize().width,2));
  lblBottomGrip.setBackground(Color.BLACK);
  lblBottomGrip.setOpaque(true);
  contentPane.add(lblBottomGrip,BorderLayout.SOUTH);
  lblLeftGrip=new JLabel();
  lblLeftGrip.setMaximumSize(new Dimension(2,lblLeftGrip.getPreferredSize().height));
  lblLeftGrip.setPreferredSize(new Dimension(2,lblLeftGrip.getPreferredSize().height));
  lblLeftGrip.setBackground(Color.BLACK);
  lblLeftGrip.setOpaque(true);
  contentPane.add(lblLeftGrip,BorderLayout.WEST);
  lblTopGrip=new JLabel();
  lblTopGrip.setMaximumSize(new Dimension(lblTopGrip.getPreferredSize().width,2));
  lblTopGrip.setPreferredSize(new Dimension(lblTopGrip.getPreferredSize().width,2));
  lblTopGrip.setBackground(Color.BLACK);
  lblTopGrip.setOpaque(true);
  contentPane.add(lblTopGrip,BorderLayout.NORTH);
  if (isResizable()) {
    lblTopGrip.addMouseListener(gma);
    lblTopGrip.addMouseMotionListener(new MouseMotionAdapter(){
      @Override public void mouseDragged(      MouseEvent me){
        int y=me.getYOnScreen();
        int diff=XDMFrame.this.getLocationOnScreen().y - y;
        XDMFrame.this.setLocation(XDMFrame.this.getLocation().x,me.getLocationOnScreen().y);
        XDMFrame.this.setSize(XDMFrame.this.getWidth(),XDMFrame.this.getHeight() + diff);
      }
    }
);
    lblRightGrip.addMouseListener(gma);
    lblRightGrip.addMouseMotionListener(new MouseMotionAdapter(){
      @Override public void mouseDragged(      MouseEvent me){
        int x=me.getXOnScreen();
        int diff=x - XDMFrame.this.getLocationOnScreen().x;
        XDMFrame.this.setSize(diff,XDMFrame.this.getHeight());
      }
    }
);
    lblLeftGrip.addMouseListener(gma);
    lblLeftGrip.addMouseMotionListener(new MouseMotionAdapter(){
      @Override public void mouseDragged(      MouseEvent me){
        int x=me.getXOnScreen();
        int diff=XDMFrame.this.getLocationOnScreen().x - x;
        XDMFrame.this.setLocation(me.getLocationOnScreen().x,XDMFrame.this.getLocation().y);
        XDMFrame.this.setSize(diff + XDMFrame.this.getWidth(),XDMFrame.this.getHeight());
      }
    }
);
    lblBottomGrip.addMouseListener(gma);
    lblBottomGrip.addMouseMotionListener(new MouseMotionAdapter(){
      @Override public void mouseDragged(      MouseEvent me){
        int y=me.getYOnScreen();
        int diff=y - XDMFrame.this.getLocationOnScreen().y;
        XDMFrame.this.setSize(XDMFrame.this.getWidth(),diff);
      }
    }
);
  }
}
"
4129,registerTitlePanel(JPanel),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMFrame.java,xdm,54,1392,1353,39,0.04,0.0171,1,5,3,"void registerTitlePanel(JPanel panel){
  vBox=Box.createVerticalBox();
  vBox.setOpaque(true);
  vBox.setBackground(ColorResource.getTitleColor());
  Box hBox=Box.createHorizontalBox();
  hBox.setBackground(ColorResource.getTitleColor());
  if (minimizeBox) {
    JButton btn=createTransparentButton(ImageResource.get(""min_btn.png""),new Dimension(30,30),actMin);
    hBox.add(btn);
  }
  if (maximizeBox) {
    JButton btn=createTransparentButton(ImageResource.get(""max_btn.png""),new Dimension(30,30),actMax);
    hBox.add(btn);
  }
  JButton btn=createTransparentButton(ImageResource.get(""close_btn.png""),new Dimension(30,30),actClose);
  hBox.add(btn);
  vBox.add(hBox);
  vBox.add(Box.createVerticalGlue());
  panel.add(vBox,BorderLayout.EAST);
}
"
4132,createCursors(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMFrame.java,xdm,7,11,1,3,0.2381,0.1667,0,0,1,"private void createCursors(){
  curDefault=new Cursor(Cursor.DEFAULT_CURSOR);
  curNResize=new Cursor(Cursor.N_RESIZE_CURSOR);
  curWResize=new Cursor(Cursor.W_RESIZE_CURSOR);
  curEResize=new Cursor(Cursor.E_RESIZE_CURSOR);
  curSResize=new Cursor(Cursor.S_RESIZE_CURSOR);
}
"
4133,"createTransparentButton(ImageIcon,Dimension,ActionListener)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMFrame.java,xdm,10,17,0,3,0.24,0.3636,1,4,1,"JButton createTransparentButton(ImageIcon icon,Dimension d,ActionListener actionListener){
  CustomButton btn=new CustomButton(icon);
  btn.setBackground(ColorResource.getTitleColor());
  btn.setBorderPainted(false);
  btn.setContentAreaFilled(false);
  btn.setFocusPainted(false);
  btn.setPreferredSize(d);
  btn.addActionListener(actionListener);
  return btn;
}
"
4137,componentResized(ComponentEvent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMFrame.java,xdm,6,15,15,4,0.1667,0,0,1,1,"@Override public void componentResized(ComponentEvent c){
  contentPane.setSize(super.getWidth(),super.getHeight());
  modalPane.setSize(super.getWidth(),super.getHeight());
  dialogPane.setSize(super.getWidth(),super.getHeight());
  revalidate();
}
"
4139,showModal(MessageBox),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMFrame.java,xdm,10,37,29,5,0.2667,0.1429,1,1,1,"public void showModal(MessageBox component){
  lastFocusOwner=getMostRecentFocusOwner();
  System.out.println(""Last focus owner: "" + lastFocusOwner);
  modalPane.add(component);
  component.setVisible(true);
  modalPane.setVisible(true);
  revalidate();
  component.selectDefaultButton();
  startModal(component);
}
"
4140,hideModal(MessageBox),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMFrame.java,xdm,10,42,39,7,0.2,0.0571,0,1,2,"public void hideModal(MessageBox component){
  modalPane.remove(component);
  component.setVisible(false);
  modalPane.setVisible(false);
  revalidate();
  stopModal();
  if (lastFocusOwner == null) {
    requestFocusInWindow();
  }
 else {
    lastFocusOwner.requestFocusInWindow();
  }
}
"
4141,showDialog(JComponent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMFrame.java,xdm,7,17,13,4,0.3571,0.1389,0,1,1,"public void showDialog(JComponent component){
  dialogPane.removeAll();
  dialogPane.add(component);
  component.setVisible(true);
  dialogPane.setVisible(true);
  revalidate();
}
"
4142,hideDialog(JComponent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMFrame.java,xdm,6,13,11,4,0.3333,0.0833,0,1,1,"public void hideDialog(JComponent component){
  dialogPane.remove(component);
  component.setVisible(false);
  dialogPane.setVisible(false);
  revalidate();
}
"
4143,startModal(Component),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMFrame.java,xdm,16,88,56,6,0.1875,0.146,0,5,8,"private synchronized void startModal(Component comp){
  try {
    if (SwingUtilities.isEventDispatchThread()) {
      EventQueue theQueue=Toolkit.getDefaultToolkit().getSystemEventQueue();
      while (comp.isVisible()) {
        AWTEvent event=theQueue.getNextEvent();
        Object source=event.getSource();
        if (event instanceof ActiveEvent) {
          ((ActiveEvent)event).dispatch();
        }
 else         if (source instanceof Component) {
          ((Component)source).dispatchEvent(event);
        }
 else         if (source instanceof MenuComponent) {
          ((MenuComponent)source).dispatchEvent(event);
        }
 else {
          System.err.println(""Unable to dispatch: "" + event);
        }
      }
    }
 else {
      while (comp.isVisible()) {
        wait();
      }
    }
  }
 catch (  InterruptedException ignored) {
  }
}
"
4145,XDMTableCellRenderer(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\components\XDMTableCellRenderer.java,xdm,49,1031,886,7,0.0755,0.0603,0.75,4,1,"public XDMTableCellRenderer(){
  titleLbl=new JLabel(""This is sample title text"");
  titleLbl.setForeground(Color.BLACK);
  iconLbl=new JLabel();
  iconLbl.setForeground(Color.BLACK);
  statLbl=new JLabel(""This is sample status text"");
  statLbl.setForeground(Color.BLACK);
  dateLbl=new JLabel(""Yesterday"");
  dateLbl.setForeground(Color.BLACK);
  lineLbl=new JLabel();
  iconLbl.setOpaque(false);
  iconLbl.setPreferredSize(new Dimension(56,56));
  iconLbl.setIcon(ImageResource.get(""doc.png""));
  titleLbl.setBackground(Color.WHITE);
  titleLbl.setFont(FontResource.getItemFont());
  titleLbl.setOpaque(false);
  statLbl.setBackground(Color.WHITE);
  statLbl.setFont(FontResource.getNormalFont());
  statLbl.setOpaque(false);
  dateLbl.setBackground(Color.WHITE);
  dateLbl.setOpaque(false);
  dateLbl.setFont(FontResource.getNormalFont());
  lineLbl=new JLabel();
  lineLbl.setBackground(ColorResource.getWhite());
  lineLbl.setOpaque(true);
  lineLbl.setMinimumSize(new Dimension(10,1));
  lineLbl.setMaximumSize(new Dimension(lineLbl.getMaximumSize().width,1));
  lineLbl.setPreferredSize(new Dimension(lineLbl.getPreferredSize().width,1));
  pcell=new JPanel(new BorderLayout());
  pcell.setBackground(Color.WHITE);
  pcell.add(iconLbl,BorderLayout.WEST);
  Box box=Box.createHorizontalBox();
  box.add(statLbl);
  box.add(Box.createHorizontalGlue());
  box.add(dateLbl);
  box.setBorder(new EmptyBorder(0,0,10,0));
  JPanel p=new JPanel(new BorderLayout());
  p.setOpaque(false);
  p.add(titleLbl);
  p.add(box,BorderLayout.SOUTH);
  p.setBorder(new EmptyBorder(5,0,5,5));
  pcell.add(p);
  pcell.add(lineLbl,BorderLayout.SOUTH);
  pcell.setBorder(new EmptyBorder(0,15,0,15));
}
"
4149,installUI(JComponent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMButtonUI.java,xdm,9,20,4,3,0.3333,0.3095,1,2,3,"@Override public void installUI(JComponent c){
  super.installUI(c);
  if (c instanceof JButton) {
    JButton btn=(JButton)c;
    if (!(c instanceof CustomButton)) {
      c.setForeground(Color.WHITE);
      c.setBackground(ColorResource.getButtonBackColor());
      btn.setBorderPainted(false);
    }
  }
}
"
4150,"paintButtonNormal(Graphics,AbstractButton)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMButtonUI.java,xdm,6,10,5,3,0.3889,0.1905,0,5,3,"protected void paintButtonNormal(Graphics g,AbstractButton b){
  if (!b.isOpaque()) {
    Graphics2D g2=(Graphics2D)g;
    g2.setPaint(b.getBackground());
    g2.fillRect(0,0,b.getWidth(),b.getHeight());
  }
}
"
4151,"paintButtonPressed(Graphics,AbstractButton)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMButtonUI.java,xdm,11,52,49,9,0.1818,0.0617,0,3,1,"protected void paintButtonPressed(Graphics g,AbstractButton b){
  Graphics2D g2=(Graphics2D)g;
  g2.setColor(b.getBackground());
  g2.fillRect(0,0,b.getWidth(),b.getHeight());
}
"
4152,"paintButtonRollOver(Graphics,AbstractButton)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMButtonUI.java,xdm,10,42,39,8,0.2,0.0694,0,3,1,"protected void paintButtonRollOver(Graphics g,AbstractButton b){
  Graphics2D g2=(Graphics2D)g;
  g2.setColor(b.getBackground());
  g2.fillRect(0,0,b.getWidth(),b.getHeight());
}
"
4155,createArrowButton(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMComboBoxUI.java,xdm,9,15,0,3,0.3333,0.4381,1,1,1,"protected JButton createArrowButton(){
  JButton button=new CustomButton();
  button.setBackground(ColorResource.getDarkBgColor());
  button.setIcon(ImageResource.get(""down_arrow.png""));
  button.setBorderPainted(false);
  button.setFocusPainted(false);
  button.setName(""ComboBox.arrowButton"");
  return button;
}
"
4158,initClassDefaults(UIDefaults),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMLookAndFeel.java,xdm,7,19,17,5,0.1667,0.0247,0,1,1,"@Override public void initClassDefaults(UIDefaults table){
  super.initClassDefaults(table);
  table.putDefaults(new Object[]{""ButtonUI"",XDMButtonUI.class.getName(),""ScrollBarUI"",XDMScrollBarUI.class.getName(),""MenuItemUI"",XDMMenuItemUI.class.getName(),""MenuUI"",XDMMenuUI.class.getName(),""CheckBoxMenuItemUI"",XDMMenuItemUI.class.getName(),""TreeUI"",XDMTreeUI.class.getName(),""SpinnerUI"",XDMSpinnerUI.class.getName(),""ProgressBarUI"",XDMProgressBarUI.class.getName(),""ComboBoxUI"",XDMComboBoxUI.class.getName()});
  System.setProperty(""xdm.defaulttheme"",""true"");
  UIManager.put(""Table.focusCellHighlightBorder"",new EmptyBorder(1,1,1,1));
  UIManager.put(""ComboBox.rendererUseListColors"",Boolean.TRUE);
}
"
4168,installUI(JComponent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMMenuItemUI.java,xdm,12,57,48,7,0.2222,0.1144,0,2,2,"@Override public void installUI(JComponent c){
  super.installUI(c);
  c.setBorder(null);
  if (c instanceof AbstractButton) {
    AbstractButton btn=(AbstractButton)c;
    btn.setBorder(new EmptyBorder(5,10,5,10));
    btn.setBorderPainted(false);
  }
}
"
4169,"paintButtonPressed(Graphics,AbstractButton)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMMenuItemUI.java,xdm,7,15,9,3,0.2857,0.1333,0,4,1,"protected void paintButtonPressed(Graphics g,AbstractButton b){
  Color c=g.getColor();
  Graphics2D g2=(Graphics2D)g;
  g2.setPaint(colorSelect);
  g2.fillRect(0,0,b.getWidth(),b.getHeight());
  g.setColor(c);
}
"
4170,"paintBackground(Graphics,JMenuItem,Color)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMMenuItemUI.java,xdm,24,228,180,11,0.1354,0.0855,0,8,7,"@Override protected void paintBackground(Graphics g,JMenuItem menuItem,Color bgColor){
  ButtonModel model=menuItem.getModel();
  Color oldColor=g.getColor();
  int menuWidth=menuItem.getWidth();
  int menuHeight=menuItem.getHeight();
  Color bgc=(Color)menuItem.getClientProperty(""bgColor"");
  if (bgc != null) {
    g.setColor(bgc);
  }
 else {
    g.setColor(colorBg);
  }
  g.fillRect(0,0,menuWidth,menuHeight);
  if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {
    paintButtonPressed(g,menuItem);
  }
 else {
  }
  if (menuItem instanceof JCheckBoxMenuItem) {
    if (((JCheckBoxMenuItem)menuItem).isSelected()) {
    }
  }
  g.setColor(oldColor);
}
"
4173,installUI(JComponent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMMenuUI.java,xdm,11,49,43,7,0.2121,0.0833,0,2,2,"@Override public void installUI(JComponent c){
  super.installUI(c);
  if (c instanceof AbstractButton) {
    AbstractButton btn=(AbstractButton)c;
    btn.setBorder(new EmptyBorder(5,10,5,10));
    btn.setBorderPainted(false);
  }
}
"
4174,"paintButtonPressed(Graphics,AbstractButton)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMMenuUI.java,xdm,26,319,313,22,0.0769,0.0232,0,4,1,"protected void paintButtonPressed(Graphics g,AbstractButton b){
  Color c=g.getColor();
  Graphics2D g2=(Graphics2D)g;
  g2.setPaint(colorSelect);
  g2.fillRect(0,0,b.getWidth(),b.getHeight());
  g.setColor(c);
}
"
4175,"paintBackground(Graphics,JMenuItem,Color)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMMenuUI.java,xdm,18,144,135,13,0.1333,0.0498,0,6,4,"@Override protected void paintBackground(Graphics g,JMenuItem menuItem,Color bgColor){
  ButtonModel model=menuItem.getModel();
  Color oldColor=g.getColor();
  if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {
    paintButtonPressed(g,menuItem);
  }
 else {
    g.setColor(this.colorBg);
  }
  g.setColor(oldColor);
}
"
4177,"paint(Graphics,JComponent)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMProgressBarUI.java,xdm,7,10,0,2,0.3929,0.246,0,3,3,"@Override public void paint(Graphics g,JComponent c){
  if (!(g instanceof Graphics2D)) {
    return;
  }
  Graphics2D g2=(Graphics2D)g;
  g2.setPaint(Color.GRAY);
  g2.fillRect(0,0,c.getWidth(),c.getHeight());
  if (progressBar.isIndeterminate()) {
    paintIndeterminate(g,c);
  }
 else {
    paintDeterminate(g,c);
  }
}
"
4178,"paintIndeterminate(Graphics,JComponent)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMProgressBarUI.java,xdm,10,37,29,5,0.175,0.0682,1,6,4,"@Override protected void paintIndeterminate(Graphics g,JComponent c){
  Insets b=progressBar.getInsets();
  int barRectWidth=progressBar.getWidth() - (b.right + b.left);
  int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);
  if (barRectWidth <= 0 || barRectHeight <= 0) {
    return;
  }
  Graphics2D g2=(Graphics2D)g;
  boxRect=getBox(boxRect);
  if (boxRect != null) {
    g2.setPaint(ColorResource.getSelectionColor());
    g2.fillRect(boxRect.x,boxRect.y,boxRect.width,boxRect.height);
  }
}
"
4179,"paintDeterminate(Graphics,JComponent)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMProgressBarUI.java,xdm,10,29,13,2,0.2222,0.117,1,7,4,"@Override protected void paintDeterminate(Graphics g,JComponent c){
  Insets b=progressBar.getInsets();
  int barRectWidth=progressBar.getWidth() - (b.right + b.left);
  int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);
  if (barRectWidth <= 0 || barRectHeight <= 0) {
    return;
  }
  int amountFull=getAmountFull(b,barRectWidth,barRectHeight);
  Graphics2D g2=(Graphics2D)g;
  g2.setColor(ColorResource.getSelectionColor());
  if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {
    g2.fillRect(0,0,amountFull,c.getHeight());
  }
 else {
  }
}
"
4181,XDMScrollBarUI(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMScrollBarUI.java,xdm,7,6,0,2,0.2321,0.2183,0,0,1,"public XDMScrollBarUI(){
  roColor1=new Color(170,170,170);
  barColor1=new Color(215,215,215);
  trackColor1=new Color(240,240,240);
  roColor2=new Color(160,160,160);
  barColor2=new Color(130,130,130);
  trackColor2=new Color(70,70,70);
}
"
4182,installUI(JComponent),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMScrollBarUI.java,xdm,7,16,11,4,0.3333,0.1481,0,1,4,"@Override public void installUI(JComponent c){
  super.installUI(c);
  darkMode=scrollbar instanceof DarkScrollBar;
  if ((scrollbar.getOrientation() == JScrollBar.HORIZONTAL)) {
    c.setPreferredSize(new Dimension(15,darkMode ? 8 : 15));
  }
 else {
    c.setPreferredSize(new Dimension(darkMode ? 8 : 15,15));
  }
}
"
4183,"paintThumb(Graphics,JComponent,Rectangle)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMScrollBarUI.java,xdm,15,92,79,7,0.1273,0.0498,0,6,6,"protected void paintThumb(Graphics g,JComponent c,Rectangle thumbBounds){
  if (thumbBounds.isEmpty() || !scrollbar.isEnabled()) {
    return;
  }
  int w=thumbBounds.width;
  int h=thumbBounds.height;
  g.translate(thumbBounds.x,thumbBounds.y);
  Graphics2D g2=(Graphics2D)g;
  if (isThumbRollover()) {
    g2.setColor(darkMode ? roColor2 : roColor1);
  }
 else {
    g2.setColor(darkMode ? barColor2 : barColor1);
  }
  g.fillRect(0,0,w,h);
  g.translate(-thumbBounds.x,-thumbBounds.y);
}
"
4184,"paintTrack(Graphics,JComponent,Rectangle)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMScrollBarUI.java,xdm,6,9,3,3,0.2667,0.1929,0,3,2,"@Override protected void paintTrack(Graphics g,JComponent c,Rectangle r){
  g.setColor(darkMode ? trackColor2 : trackColor1);
  g.translate(r.x,r.y);
  g.fillRect(0,0,r.width,r.height);
  g.translate(-r.x,-r.y);
}
"
4187,createZeroButton(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMScrollBarUI.java,xdm,8,15,2,3,0.5625,0.3148,0,2,1,"protected JButton createZeroButton(){
  JButton button=new JButton();
  Dimension zeroDim=new Dimension(0,0);
  button.setPreferredSize(zeroDim);
  button.setMinimumSize(zeroDim);
  button.setMaximumSize(zeroDim);
  return button;
}
"
4188,createScrollButton(int),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMScrollBarUI.java,xdm,24,162,48,5,0.1458,0.2159,1,2,7,"private JButton createScrollButton(int orientation){
  darkMode=scrollbar instanceof DarkScrollBar;
  if (darkMode) {
    return createZeroButton();
  }
  CustomButton btn=new CustomButton();
  btn.setBackground(darkMode ? trackColor2 : trackColor1);
  btn.setContentAreaFilled(false);
  btn.setHorizontalAlignment(JButton.CENTER);
  btn.setMargin(new Insets(0,0,0,0));
  btn.setBorderPainted(false);
  if (orientation == SwingConstants.NORTH) {
    btn.setIcon(ImageResource.get(""up_arrow.png""));
    btn.setPreferredSize(new Dimension(15,18));
  }
  if (orientation == SwingConstants.SOUTH) {
    btn.setIcon(ImageResource.get(""down_arrow.png""));
    btn.setPreferredSize(new Dimension(15,18));
  }
  if (orientation == SwingConstants.EAST) {
    btn.setIcon(ImageResource.get(""right_arrow.png""));
    btn.setPreferredSize(new Dimension(18,15));
  }
  if (orientation == SwingConstants.WEST) {
    btn.setIcon(ImageResource.get(""left_arrow.png""));
    btn.setPreferredSize(new Dimension(18,15));
  }
  return btn;
}
"
4190,createNextButton(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMSpinnerUI.java,xdm,12,21,0,3,0.2708,0.5,1,1,1,"protected Component createNextButton(){
  CustomButton btn=new CustomButton();
  btn.setBackground(ColorResource.getDarkBtnColor());
  btn.setContentAreaFilled(false);
  btn.setHorizontalAlignment(JButton.CENTER);
  btn.setMargin(new Insets(0,0,0,0));
  btn.setBorderPainted(false);
  btn.setIcon(ImageResource.get(""up_arrow.png""));
  btn.setName(""Spinner.nextButton"");
  installNextButtonListeners(btn);
  return btn;
}
"
4191,createPreviousButton(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMSpinnerUI.java,xdm,12,21,0,3,0.2708,0.5,1,1,1,"protected Component createPreviousButton(){
  CustomButton btn=new CustomButton();
  btn.setBackground(ColorResource.getDarkBtnColor());
  btn.setContentAreaFilled(false);
  btn.setHorizontalAlignment(JButton.CENTER);
  btn.setMargin(new Insets(0,0,0,0));
  btn.setBorderPainted(false);
  btn.setIcon(ImageResource.get(""down_arrow.png""));
  btn.setName(""Spinner.previousButton"");
  installPreviousButtonListeners(btn);
  return btn;
}
"
4205,addCustomEntriesToTable(UIDefaults),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMTheme.java,xdm,55,54,0,2,0.3527,0.6499,0.2,1,1,"public void addCustomEntriesToTable(UIDefaults table){
  super.addCustomEntriesToTable(table);
  table.put(""Menu.foreground"",ColorResource.getDeepFontColor());
  table.put(""PopupMenu.border"",new LineBorder(ColorResource.getDarkBgColor()));
  table.put(""PopupMenu.background"",ColorResource.getDarkerBgColor());
  table.put(""MenuItem.foreground"",ColorResource.getDeepFontColor());
  table.put(""MenuItem.selectionForeground"",Color.WHITE);
  table.put(""Menu.selectionForeground"",Color.WHITE);
  table.put(""ComboBox.selectionBackground"",ColorResource.getSelectionColor());
  table.put(""ComboBox.selectionForeground"",Color.WHITE);
  table.put(""ComboBox.disabledForeground"",Color.GRAY);
  table.put(""ComboBox.disabledBackground"",ColorResource.getDarkerBgColor());
  table.put(""ComboBox.foreground"",Color.WHITE);
  table.put(""ComboBox.background"",ColorResource.getDarkBgColor());
  table.put(""Label.foreground"",Color.WHITE);
  table.put(""Panel.background"",ColorResource.getDarkerBgColor());
  table.put(""ScrollBar.width"",new Integer(15));
  table.put(""Popup.background"",ColorResource.getDarkerBgColor());
  table.put(""TextArea.background"",ColorResource.getDarkerBgColor());
  table.put(""TextArea.foreground"",Color.WHITE);
  table.put(""TextArea.selectionBackground"",ColorResource.getSelectionColor());
  table.put(""TextArea.selectionForeground"",Color.WHITE);
  table.put(""TextArea.caretForeground"",ColorResource.getSelectionColor());
  table.put(""TextField.background"",ColorResource.getDarkerBgColor());
  table.put(""TextField.border"",new LineBorder(ColorResource.getDarkBgColor(),1));
  table.put(""TextField.foreground"",Color.WHITE);
  table.put(""TextField.selectionBackground"",ColorResource.getSelectionColor());
  table.put(""TextField.selectionForeground"",Color.WHITE);
  table.put(""TextField.caretForeground"",ColorResource.getSelectionColor());
  table.put(""PasswordField.background"",ColorResource.getDarkerBgColor());
  table.put(""PasswordField.border"",new LineBorder(ColorResource.getDarkBgColor(),1));
  table.put(""PasswordField.foreground"",Color.WHITE);
  table.put(""PasswordField.selectionBackground"",ColorResource.getSelectionColor());
  table.put(""PasswordField.selectionForeground"",Color.WHITE);
  table.put(""PasswordField.caretForeground"",ColorResource.getSelectionColor());
  table.put(""ComboBox.border"",new LineBorder(ColorResource.getDarkBgColor(),1));
  table.put(""List.selectionBackground"",ColorResource.getSelectionColor());
  table.put(""List.selectionForeground"",Color.WHITE);
  table.put(""List.focusCellHighlightBorder"",ColorResource.getSelectionColor());
  table.put(""List.border"",new LineBorder(Color.WHITE,1));
  table.put(""ScrollPane.border"",new LineBorder(ColorResource.getDarkBgColor(),1));
  table.put(""TableHeader.background"",ColorResource.getDarkerBgColor());
  table.put(""TableHeader.cellBorder"",new LineBorder(ColorResource.getDarkBgColor(),1));
  table.put(""TableHeader.foreground"",Color.WHITE);
  table.put(""OptionPane.messageForeground"",Color.WHITE);
  table.put(""OptionPane.background"",ColorResource.getDarkerBgColor());
  table.put(""Tree.textBackground"",ColorResource.getDarkestBgColor());
  table.put(""Tree.selectionBackground"",ColorResource.getSelectionColor());
  table.put(""Tree.selectionForeground"",Color.WHITE);
  table.put(""Tree.selectionBorderColor"",ColorResource.getSelectionColor());
  table.put(""Tree.textForeground"",Color.WHITE);
  table.put(""ToggleButton.background"",ColorResource.getDarkerBgColor());
  table.put(""ToggleButton.border"",new LineBorder(ColorResource.getDarkBgColor(),1));
  table.put(""ToggleButton.foreground"",Color.WHITE);
  table.put(""ToggleButton.select"",ColorResource.getSelectionColor());
}
"
4209,"paint(Graphics,JComponent)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\laf\XDMToolBarButtonUI.java,xdm,8,18,8,3,0.3438,0.1543,0,4,2,"public void paint(Graphics g,JComponent c){
  AbstractButton b=(AbstractButton)c;
  ButtonModel bm=b.getModel();
  if (bm.isRollover()) {
    paintButtonRollOver(g,b);
  }
 else {
    paintButtonNormal(g,b);
  }
  super.paint(g,c);
}
"
4232,loadNoto(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\res\FontResource.java,xdm,10,32,19,3,0.2286,0.1174,1,4,3,"private static Font loadNoto(String sfont){
  try {
    InputStream inStream=StringResource.class.getResourceAsStream(""/fonts/"" + sfont);
    if (inStream == null) {
      inStream=new FileInputStream(""fonts/"" + sfont);
    }
    Logger.log(""Loading "" + sfont);
    Font font=Font.createFont(Font.TRUETYPE_FONT,inStream);
    Logger.log(""Loaded "" + font);
    return font;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}
"
4233,loadNotoRegular(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\res\FontResource.java,xdm,6,12,9,4,0.2778,0.1429,1,0,3,"private static Font loadNotoRegular(){
  if (notoNormal == null) {
    notoNormal=loadNoto(""NotoSansUI-Regular.ttf"");
    if (notoNormal == null) {
      Logger.log(""Noto regular font could not be loaded"");
      notoNormal=new Font(Font.DIALOG,Font.PLAIN,12);
    }
  }
  return notoNormal;
}
"
4234,loadNotoBold(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\res\FontResource.java,xdm,7,18,15,5,0.2,0.1,1,0,3,"private static Font loadNotoBold(){
  if (notoBold == null) {
    notoBold=loadNoto(""NotoSansUI-Bold.ttf"");
    if (notoBold == null) {
      Logger.log(""Noto regular font could not be loaded"");
      notoBold=new Font(Font.DIALOG,Font.BOLD,12);
    }
  }
  return notoBold;
}
"
4246,loadDefaultLanguage(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\ui\res\StringResource.java,xdm,7,14,7,3,0.2857,0.1833,0,1,2,"private static void loadDefaultLanguage() throws Exception {
  strings=new Properties();
  InputStream inStream=StringResource.class.getResourceAsStream(""/lang/en.txt"");
  if (inStream == null) {
    inStream=new FileInputStream(""lang/en.txt"");
  }
  strings.load(inStream);
}
"
4250,"parseDoc(Document,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\F4MManifest.java,xdm,68,2099,1920,9,0.0426,0.033,0.4,27,18,"private void parseDoc(Document doc,String surl) throws XPathExpressionException {
  if (xpath == null) {
    initXPath();
  }
  baseUrl=xpath.evaluate(""/ns:manifest/ns:baseURL"",doc);
  if (StringUtils.isNullOrEmptyOrBlank(baseUrl)) {
    try {
      URL url=new URL(surl);
      StringBuilder sb=new StringBuilder();
      sb.append(url.getProtocol());
      sb.append(""://"");
      sb.append(url.getHost());
      int port=url.getPort();
      if (port < 1) {
        port=url.getDefaultPort();
      }
      sb.append(port == 80 ? """" : port);
      String path=url.getPath();
      String[] arr=path.split(""/"");
      for (int i=0; i < arr.length - 1; i++) {
        if (arr[i].length() > 0) {
          sb.append(""/"" + arr[i]);
        }
      }
      baseUrl=sb.toString();
      System.out.println(""*** URL: "" + baseUrl);
    }
 catch (    Exception e) {
    }
  }
  pv=xpath.evaluate(""/ns:manifest/ns:pv-2.0"",doc);
  NodeList mediaNodeList=(NodeList)xpath.evaluate(""/ns:manifest/ns:media"",doc,XPathConstants.NODESET);
  F4MMedia media=null;
  for (int i=0; i < mediaNodeList.getLength(); i++) {
    Node mediaNode=mediaNodeList.item(i);
    NamedNodeMap attrMap=mediaNode.getAttributes();
    Node bitRateAttr=attrMap.getNamedItem(""bitrate"");
    long bitRate=0;
    if (bitRateAttr != null) {
      bitRate=Long.parseLong(bitRateAttr.getNodeValue());
    }
    boolean mediaFound=false;
    if (this.selectedBitRate > 0) {
      if (this.selectedBitRate == bitRate) {
        mediaFound=true;
      }
    }
 else {
      mediaFound=true;
    }
    if (mediaFound) {
      media=new F4MMedia();
      media.setBaseUrl(baseUrl);
      media.setBitRate(bitRate);
      media.setUrl(attrMap.getNamedItem(""url"").getNodeValue());
      Node bootstrapInfoIdNode=attrMap.getNamedItem(""bootstrapInfoId"");
      String bootstrapInfoStr=null;
      if (bootstrapInfoIdNode != null) {
        String bootstrapInfoId=bootstrapInfoIdNode.getNodeValue();
        bootstrapInfoStr=xpath.evaluate(""/ns:manifest/ns:bootstrapInfo[@id='"" + bootstrapInfoId + ""']"",doc);
      }
 else {
        bootstrapInfoStr=xpath.evaluate(""/ns:manifest/ns:bootstrapInfo"",doc);
      }
      media.setBootstrap(Base64.decode(bootstrapInfoStr));
      break;
    }
  }
  if (media == null) {
    Logger.log(""Could not find media"");
    return;
  }
  int pos=0;
  BufferPointer ptr=new BufferPointer();
  ptr.setBuf(media.getBootstrap());
  ptr.setPos(pos);
  BoxInfo boxInfo=readBoxHeader(ptr);
  pos=ptr.getPos();
  long boxSize=boxInfo.getBoxSize();
  String boxType=boxInfo.getBoxType();
  if (boxType.equals(""abst""))   parseBootstrapBox(media.bootstrap,pos);
  if (fragsPerSeg == 0)   fragsPerSeg=fragCount;
  if (live) {
    fromTimestamp=-1;
    Logger.log(""F4M Parser: [Live stream]"");
  }
 else {
    Logger.log(""F4M Parser: [Not Live stream]"");
  }
  Logger.log(""F4M Parser: Start- "" + start);
  selectedMedia=media;
}
"
4252,loadDoc(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\F4MManifest.java,xdm,14,79,67,6,0.1234,0.0713,1,7,4,"private Document loadDoc(String fileName){
  FileReader r=null;
  try {
    r=new FileReader(fileName);
    DocumentBuilderFactory domFactory=DocumentBuilderFactory.newInstance();
    domFactory.setNamespaceAware(true);
    DocumentBuilder builder=domFactory.newDocumentBuilder();
    Document doc=builder.parse(new InputSource(r));
    return doc;
  }
 catch (  Exception e) {
    Logger.log(e);
  }
 finally {
    if (r != null) {
      try {
        r.close();
      }
 catch (      Exception ee) {
      }
    }
  }
  return null;
}
"
4258,"parseBootstrapBox(byte[],int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\F4MManifest.java,xdm,59,1300,889,8,0.0504,0.0796,0.428571429,29,9,"private void parseBootstrapBox(byte[] bootstrapInfo,int pos){
  System.out.println(""parsing abst"");
  live=false;
  isMetadata=true;
  int version=readByte(bootstrapInfo,pos);
  int flags=(int)readInt24(bootstrapInfo,pos + 1);
  int bootstrapVersion=(int)readInt32(bootstrapInfo,pos + 4);
  int b=readByte(bootstrapInfo,pos + 8);
  int profile=(b & 0xC0) >> 6;
  int update=(b & 0x10) >> 4;
  if (((b & 0x20) >> 5) > 0) {
    live=true;
    isMetadata=false;
  }
  if (update == 0) {
    segTable.clear();
    fragTable.clear();
  }
  int timescale=(int)readInt32(bootstrapInfo,pos + 9);
  long currentMediaTime=readInt64(bootstrapInfo,13);
  long smpteTimeCodeOffset=readInt64(bootstrapInfo,21);
  pos+=29;
  BufferPointer bPtr=new BufferPointer();
  bPtr.setBuf(bootstrapInfo);
  bPtr.setPos(pos);
  String movieIdentifier=readString(bPtr);
  Logger.log(""[F4M Parser- movieIdentifier: "" + movieIdentifier);
  pos=bPtr.getPos();
  int serverEntryCount=readByte(bootstrapInfo,pos++);
  bPtr.setPos(pos);
  for (int i=0; i < serverEntryCount; i++)   readString(bPtr);
  int qualityEntryCount=readByte(bootstrapInfo,pos++);
  bPtr.setPos(pos);
  for (int i=0; i < qualityEntryCount; i++)   readString(bPtr);
  String drmData=readString(bPtr);
  String smetadata=readString(bPtr);
  pos=bPtr.getPos();
  int segRunTableCount=readByte(bootstrapInfo,pos++);
  long boxSize=0;
  BufferPointer ptr=new BufferPointer();
  ptr.setBuf(bootstrapInfo);
  for (int i=0; i < segRunTableCount; i++) {
    ptr.setPos(pos);
    String boxType="""";
    BoxInfo boxInfo=readBoxHeader(ptr);
    boxSize=boxInfo.getBoxSize();
    boxType=boxInfo.getBoxType();
    pos=ptr.getPos();
    if (boxType.equals(""asrt""))     parseAsrtBox(bootstrapInfo,pos);
    pos+=boxSize;
  }
  int fragRunTableCount=readByte(bootstrapInfo,pos++);
  for (int i=0; i < fragRunTableCount; i++) {
    ptr.setPos(pos);
    BoxInfo boxInfo=readBoxHeader(ptr);
    pos=ptr.getPos();
    boxSize=boxInfo.getBoxSize();
    String boxType=boxInfo.getBoxType();
    Logger.log(""555 "" + boxType + "" ""+ boxSize);
    if (boxType.equals(""afrt""))     parseAfrtBox(bootstrapInfo,pos);
    pos+=(int)boxSize;
  }
  parseSegAndFragTable();
}
"
4259,parseSegAndFragTable(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\F4MManifest.java,xdm,33,423,318,5,0.1212,0.0695,1,8,18,"private void parseSegAndFragTable(){
  Logger.log(""parseSegAndFragTable called"");
  if ((segTable.size() == 0) || (fragTable.size() == 0)) {
    System.out.println(""return as zero "" + segTable.size() + "" ""+ fragTable.size());
    return;
  }
  Segment firstSegment=segTable.get(0);
  Segment lastSegment=segTable.get(segTable.size() - 1);
  Fragment firstFragment=fragTable.get(0);
  Fragment lastFragment=fragTable.get(fragTable.size() - 1);
  if ((lastFragment.fragmentDuration == 0) && (lastFragment.discontinuityIndicator == 0)) {
    live=false;
    if (fragTable.size() > 0)     fragTable.remove(fragTable.size() - 1);
    if (fragTable.size() > 0)     lastFragment=fragTable.get(fragTable.size() - 1);
  }
  boolean invalidFragCount=false;
  Segment prev=segTable.get(0);
  fragCount=prev.fragmentsPerSegment;
  for (int i=0; i < segTable.size(); i++) {
    Segment current=segTable.get(i);
    fragCount+=(current.firstSegment - prev.firstSegment - 1) * prev.fragmentsPerSegment;
    fragCount+=current.fragmentsPerSegment;
    prev=current;
  }
  if ((fragCount & 0x80000000) == 0)   fragCount+=firstFragment.firstFragment - 1;
  if ((fragCount & 0x80000000) != 0) {
    fragCount=0;
    invalidFragCount=true;
  }
  if (fragCount < lastFragment.firstFragment)   fragCount=lastFragment.firstFragment;
  if (segStart < 0) {
    if (live)     segStart=lastSegment.firstSegment;
 else     segStart=firstSegment.firstSegment;
    if (segStart < 1)     segStart=1;
  }
  if (fragStart < 0) {
    if (live && !invalidFragCount)     fragStart=fragCount - 2;
 else     fragStart=firstFragment.firstFragment - 1;
    if (fragStart < 0)     fragStart=0;
  }
}
"
4260,"parseAsrtBox(byte[],int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\F4MManifest.java,xdm,23,167,81,2,0.1304,0.1298,0.4,11,4,"private void parseAsrtBox(byte[] asrt,int pos){
  System.out.println(""parsing asrt"");
  int version=readByte(asrt,(int)pos);
  int flags=(int)readInt24(asrt,pos + 1);
  int qualityEntryCount=readByte(asrt,pos + 4);
  segTable.clear();
  pos+=5;
  BufferPointer bPtr=new BufferPointer();
  for (int i=0; i < qualityEntryCount; i++) {
    bPtr.setBuf(asrt);
    bPtr.setPos(pos);
    readString(bPtr);
    pos=bPtr.getPos();
  }
  int segCount=(int)readInt32(asrt,pos);
  pos+=4;
  System.out.println(""segcount: "" + segCount);
  for (int i=0; i < segCount; i++) {
    int firstSegment=(int)readInt32(asrt,pos);
    Segment segEntry=new Segment();
    segEntry.firstSegment=firstSegment;
    segEntry.fragmentsPerSegment=(int)readInt32(asrt,pos + 4);
    if ((segEntry.fragmentsPerSegment & 0x80000000) > 0)     segEntry.fragmentsPerSegment=0;
    pos+=8;
    segTable.add(segEntry);
  }
}
"
4261,"parseAfrtBox(byte[],int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\F4MManifest.java,xdm,28,231,84,3,0.1037,0.1373,0.4,12,7,"private void parseAfrtBox(byte[] afrt,int pos){
  System.out.println(""Parse afrt"");
  fragTable.clear();
  int version=readByte(afrt,pos);
  int flags=(int)readInt24(afrt,pos + 1);
  int timescale=(int)readInt32(afrt,pos + 4);
  int qualityEntryCount=readByte(afrt,pos + 8);
  pos+=9;
  BufferPointer args=new BufferPointer();
  for (int i=0; i < qualityEntryCount; i++) {
    args.setBuf(afrt);
    args.setPos(pos);
    readString(args);
    pos=args.getPos();
  }
  int fragEntries=(int)readInt32(afrt,pos);
  pos+=4;
  for (int i=0; i < fragEntries; i++) {
    int firstFragment=(int)readInt32(afrt,pos);
    Fragment fragEntry=new Fragment();
    fragEntry.firstFragment=firstFragment;
    fragEntry.firstFragmentTimestamp=readInt64(afrt,pos + 4);
    fragEntry.fragmentDuration=(int)readInt32(afrt,pos + 12);
    duration+=fragEntry.fragmentDuration;
    fragEntry.discontinuityIndicator=0;
    pos+=16;
    if (fragEntry.fragmentDuration == 0)     fragEntry.discontinuityIndicator=readByte(afrt,pos++);
    fragTable.add(fragEntry);
    if ((fromTimestamp > 0) && (fragEntry.firstFragmentTimestamp > 0) && (fragEntry.firstFragmentTimestamp < fromTimestamp))     start=fragEntry.firstFragment + 1;
  }
}
"
4262,readBoxHeader(BufferPointer),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\F4MManifest.java,xdm,18,104,55,3,0.2014,0.1365,0.333333333,6,2,"private BoxInfo readBoxHeader(BufferPointer ptr){
  int pos=ptr.getPos();
  byte[] bytesData=ptr.getBuf();
  StringBuilder boxType=new StringBuilder();
  long boxSize=0;
  boxSize=readInt32(bytesData,pos);
  boxType.append(readStringBytes(bytesData,pos + 4,4));
  if (boxSize == 1) {
    boxSize=readInt64(bytesData,pos + 8) - 16;
    pos+=16;
  }
 else {
    boxSize-=8;
    pos+=8;
  }
  ptr.setPos(pos);
  BoxInfo boxInfo=new BoxInfo();
  boxInfo.setBoxSize(boxSize);
  boxInfo.setBoxType(boxType.toString());
  return boxInfo;
}
"
4263,"readStringBytes(byte[],int,long)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\F4MManifest.java,xdm,6,11,7,3,0.2667,0.1214,0.333333333,5,3,"private String readStringBytes(byte[] bytesData,int pos,long len){
  StringBuilder resultValue=new StringBuilder();
  for (int i=0; i < len; i++) {
    resultValue.append((char)bytesData[pos + i]);
  }
  return resultValue.toString();
}
"
4266,"readInt24(byte[],int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\F4MManifest.java,xdm,6,12,9,3,0.2667,0.0619,0,5,1,"private long readInt24(byte[] data,int pos){
  long iValLo=(data[pos + 2] & 0xFF + ((data[pos + 1] & 0xFF) * 256));
  long iValHi=data[pos + 0] & 0xFF;
  long iVal=iValLo + (iValHi * 65536);
  return iVal;
}
"
4267,"readInt32(byte[],int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\F4MManifest.java,xdm,6,12,9,3,0.3333,0.0714,0,5,1,"private static long readInt32(byte[] data,int pos){
  long iValLo=((long)(data[pos + 3] & 0xFF) + (long)(data[pos + 2] & 0xFF) * 256);
  long iValHi=((long)(data[pos + 1] & 0xFF) + ((long)(data[pos + 0] & 0xFF) * 256));
  long iVal=iValLo + (iValHi * 65536);
  return iVal;
}
"
4268,"readInt64(byte[],int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\F4MManifest.java,xdm,6,11,7,3,0.2857,0.0714,0,5,1,"private static long readInt64(byte[] data,int pos){
  long iValLo=readInt32(data,pos + 4);
  long iValHi=readInt32(data,pos + 0);
  long iVal=iValLo + (iValHi * 4294967296L);
  return iVal;
}
"
4308,"M3U8Manifest(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\M3U8Manifest.java,xdm,7,20,19,6,0.1667,0.025,0,6,1,"public M3U8Manifest(String file,String playlistUrl) throws Exception {
  this.playlistUrl=playlistUrl;
  this.mediaUrls=new ArrayList<String>();
  this.mediaProperties=new ArrayList<M3U8MediaInfo>();
  ArrayList<String> urlList=parseManifest(file);
  makeMediaUrls(urlList);
}
"
4311,makeMediaUrls(ArrayList<String>),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\M3U8Manifest.java,xdm,19,117,63,3,0.1498,0.1116,1,10,8,"private void makeMediaUrls(ArrayList<String> list) throws Exception {
  String base_url="""";
  URI uri=null;
  for (int i=0; i < list.size(); i++) {
    String item=list.get(i);
    String item_url=null;
    if (item.startsWith(""/"")) {
      if (StringUtils.isNullOrEmpty(base_url)) {
        if (uri == null) {
          uri=new URI(this.playlistUrl);
        }
        base_url=uri.getScheme() + ""://"" + uri.getHost()+ """"+ (uri.getPort() > 0 ? "":"" + uri.getPort() : """");
      }
      item_url=base_url + item;
    }
 else     if (item.startsWith(""http://"") || item.startsWith(""https://"")) {
      item_url=item;
    }
 else {
      int index=this.playlistUrl.lastIndexOf('/');
      item_url=this.playlistUrl.substring(0,index) + ""/"";
      item_url+=item;
    }
    mediaUrls.add(item_url);
  }
}
"
4312,parseManifest(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\downloaders\metadata\manifests\M3U8Manifest.java,xdm,37,592,518,9,0.0662,0.0878,1,12,14,"private ArrayList<String> parseManifest(String file) throws IOException {
  ArrayList<String> urlList=new ArrayList<String>();
  BufferedReader r=null;
  try {
    r=new BufferedReader(new InputStreamReader(new FileInputStream(file)));
    boolean expect=false;
    while (true) {
      String line=r.readLine();
      if (line == null)       break;
      String highline=line.toUpperCase().trim();
      if (highline.length() < 1)       continue;
      if (highline.startsWith(""#EXT-X-KEY"")) {
        encrypted=true;
        break;
      }
      if (expect) {
        urlList.add(line.trim());
        expect=false;
      }
      if (highline.startsWith(""#EXT-X-STREAM-INF"")) {
        masterPlaylist=true;
        expect=true;
        String[] arr=highline.split("":"");
        if (arr.length > 1) {
          mediaProperties.add(M3U8MediaInfo.parse(arr[1].trim()));
        }
      }
      if (highline.startsWith(""#EXTINF"")) {
        masterPlaylist=false;
        expect=true;
        try {
          String[] arr=highline.split("":"");
          if (arr.length > 1) {
            mediaProperties.add(M3U8MediaInfo.parse(arr[1].trim()));
            String str=arr[1].trim().split("","")[0];
            duration+=Float.parseFloat(str);
          }
        }
 catch (        Exception e) {
          Logger.log(e);
        }
      }
    }
  }
 catch (  Exception e) {
    Logger.log(e);
    throw new IOException(""Unable to parse menifest"");
  }
 finally {
    try {
      if (r != null)       r.close();
    }
 catch (    Exception e) {
    }
  }
  return urlList;
}
"
4325,init(BrowserProxyInfo),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\proxy\AbstractAutoProxyHandler.java,xdm,37,432,198,5,0.1351,0.2736,0.5,31,54,"public void init(BrowserProxyInfo paramBrowserProxyInfo) throws Exception {
  if (!isSupported(paramBrowserProxyInfo.getType())) {
    throw new Exception(""Unable to support proxy type: "" + paramBrowserProxyInfo.getType());
  }
  this.bpi=paramBrowserProxyInfo;
  this.autoProxyScript=new StringBuffer();
  this.autoProxyScript.append(""var _mon = new Array('JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC');\nvar _day = new Array('SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT');\nfunction _isGmt(i) {\n return typeof i == 'string' && i == 'GMT'; }"");
  this.autoProxyScript.append(""function dnsDomainIs(host, domain) {\nif (domain != null && domain.charAt(0) != '.')\nreturn shExpMatch(host, domain);\nreturn shExpMatch(host, '*' + domain); }"");
  this.autoProxyScript.append(""function isPlainHostName(host){\nreturn (dnsDomainLevels(host) == 0); }"");
  this.autoProxyScript.append(""function convert_addr(ipchars) {\n    var bytes = ipchars.split('.');\n    var result = ((bytes[0] & 0xff) << 24) |\n                 ((bytes[1] & 0xff) << 16) |\n                 ((bytes[2] & 0xff) <<  8) |\n                  (bytes[3] & 0xff);\n    return result;\n}\n"");
  this.autoProxyScript.append(""function isInNet(ipaddr, pattern, maskstr) {\n    var ipPattern = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\n    var test = ipaddr.match(ipPattern);\n    if (test == null) {\n        ipaddr = dnsResolve(ipaddr);\n        if (ipaddr == null)\n            return false;\n    } else if ((test[1] > 255) || (test[2] > 255) || \n               (test[3] > 255) || (test[4] > 255) ) {\n        return false;\n    }\n    var host = convert_addr(ipaddr);\n    var pat  = convert_addr(pattern);\n    var mask = convert_addr(maskstr);\n    return ((host & mask) == (pat & mask));\n    \n}\n"");
  this.autoProxyScript.append(getBrowserSpecificAutoProxy());
  this.autoProxyScript.append(""function isResolvable(host){\nreturn (dnsResolve(host) != ''); }"");
  this.autoProxyScript.append(""function localHostOrDomainIs(host, hostdom){\nreturn shExpMatch(hostdom, host + '*'); }"");
  this.autoProxyScript.append(""function dnsDomainLevels(host){\nvar s = host + '';\nfor (var i=0, j=0; i < s.length; i++)\nif (s.charAt(i) == '.')\nj++;\nreturn j; }"");
  this.autoProxyScript.append(""function myIpAddress(){\nreturn '"");
  try {
    InetAddress localInetAddress=InetAddress.getLocalHost();
    this.autoProxyScript.append(localInetAddress.getHostAddress());
  }
 catch (  Throwable localThrowable) {
    localThrowable.printStackTrace();
    this.autoProxyScript.append(""127.0.0.1"");
  }
  this.autoProxyScript.append(""'; }"");
  this.autoProxyScript.append(""function shExpMatch(str, shexp){ \n if (typeof str != 'string' || typeof shexp != 'string') return false; \n if (shexp == '*') return true; \n if (str == '' && shexp == '') return true; \n str = str.toLowerCase();\n shexp = shexp.toLowerCase();\n var index = shexp.indexOf('*');\n if (index == -1) { return (str == shexp); } \n else if (index == 0) { \n for (var i=0; i <= str.length; i++) { \n if (shExpMatch(str.substring(i), shexp.substring(1))) return true; \n } return false; } \nelse { \nvar sub = null, sub2 = null; \nsub = shexp.substring(0, index);\nif (index <= str.length) sub2 = str.substring(0, index); \nif (sub != '' && sub2 != '' && sub == sub2) { \nreturn shExpMatch(str.substring(index), shexp.substring(index)); }\nelse { return false; }\n} }"");
  this.autoProxyScript.append(""function _dateRange(day1, month1, year1, day2, month2, year2, gmt){\nif (typeof day1 != 'number' || day1 <= 0 || typeof month1 != 'string' || typeof year1 != 'number' || year1 <= 0\n || typeof day2 != 'number' || day2 <= 0 || typeof month2 != 'string' || typeof year2 != 'number' || year2 <= 0\n || typeof gmt != 'boolean') return false; \nvar m1 = -1, m2 = -1;\nfor (var i=0; i < _mon.length; i++){\nif (_mon[i] == month1)\nm1 = i;\nif (_mon[i] == month2)\nm2 = i;\n}\nvar cur = new Date();\nvar d1 = new Date(year1, m1, day1, 0, 0, 0);\nvar d2 = new Date(year2, m2, day2, 23, 59, 59);\nif (gmt == true)\ncur = new Date(cur.getTime() - cur.getTimezoneOffset() * 60 * 1000);\nreturn ((d1.getTime() <= cur.getTime()) && (cur.getTime() <= d2.getTime()));\n}\nfunction dateRange(p1, p2, p3, p4, p5, p6, p7){\nvar cur = new Date();\nif (typeof p1 == 'undefined')\nreturn false;\nelse if (typeof p2 == 'undefined' || _isGmt(p2))\n{\nif ((typeof p1) == 'string')\nreturn _dateRange(1, p1, cur.getFullYear(), 31, p1, cur.getFullYear(), _isGmt(p2));\nelse if (typeof p1 == 'number' && p1 > 31)\nreturn _dateRange(1, 'JAN', p1, 31, 'DEC', p1, _isGmt(p2));\nelse {\nfor (var i=0; i < _mon.length; i++)\nif (_dateRange(p1, _mon[i], cur.getFullYear(), p1, _mon[i], cur.getFullYear(), _isGmt(p2)))\n return true;\nreturn false;\n}\n}\nelse if (typeof p3 == 'undefined' || _isGmt(p3))\n{\nif ((typeof p1) == 'string')\nreturn _dateRange(1, p1, cur.getFullYear(), 31, p2, cur.getFullYear(), _isGmt(p3));\nelse if (typeof p1 == 'number' && typeof p2 == 'number' && (p1 > 31 || p2 > 31))\nreturn _dateRange(1, 'JAN', p1, 31, 'DEC', p2, _isGmt(p3));\nelse \n{\nif ((typeof p2) == 'string')\n{\nreturn _dateRange(p1, p2, cur.getFullYear(), p1, p2, cur.getFullYear(), _isGmt(p3));\n}\nelse \n{\nfor (var i=0; i < _mon.length; i++)\nif (_dateRange(p1, _mon[i], cur.getFullYear(), p2, _mon[i], cur.getFullYear(), _isGmt(p3)))\nreturn true;\nreturn false;\n}\n}\n}\nelse if (typeof p4 == 'undefined' || _isGmt(p4))\nreturn _dateRange(p1, p2, p3, p1, p2, p3, _isGmt(p4));\nelse if (typeof p5 == 'undefined' || _isGmt(p5))\n{\nif (typeof p2 == 'number')\nreturn _dateRange(1, p1, p2, 31, p3, p4, _isGmt(p5));\nelse \nreturn _dateRange(p1, p2, cur.getFullYear(), p3, p4, cur.getFullYear(), _isGmt(p5))\n}\nelse if (typeof p6 == 'undefined')\nreturn false;\nelse \nreturn _dateRange(p1, p2, p3, p4, p5, p6, _isGmt(p7));\n}"");
  this.autoProxyScript.append(""function timeRange(p1, p2, p3, p4, p5, p6, p7) {\nif (typeof p1 == 'undefined')\nreturn false;\nelse if (typeof p2 == 'undefined' || _isGmt(p2))\nreturn _timeRange(p1, 0, 0, p1, 59, 59, _isGmt(p2));\nelse if (typeof p3 == 'undefined' || _isGmt(p3))\nreturn _timeRange(p1, 0, 0, p2, 0, 0, _isGmt(p3));\nelse if (typeof p4 == 'undefined')\nreturn false;\nelse if (typeof p5 == 'undefined' || _isGmt(p5))\nreturn _timeRange(p1, p2, 0, p3, p4, 0, _isGmt(p5));\nelse if (typeof p6 == 'undefined')\nreturn false;\nelse \nreturn _timeRange(p1, p2, p3, p4, p5, p6, _isGmt(p7));\n}\nfunction _timeRange(hour1, min1, sec1, hour2, min2, sec2, gmt) {\nif (typeof hour1 != 'number' || typeof min1 != 'number' || typeof sec1 != 'number' \n|| hour1 < 0 || min1 < 0 || sec1 < 0 \n|| typeof hour2 != 'number' || typeof min2 != 'number' || typeof sec2 != 'number' \n|| hour2 < 0 || min2 < 0 || sec2 < 0 \n|| typeof gmt != 'boolean')  return false; \nvar cur = new Date();\nvar d1 = new Date();\nvar d2 = new Date();\nd1.setHours(hour1);\nd1.setMinutes(min1);\nd1.setSeconds(sec1);\nd2.setHours(hour2);\nd2.setMinutes(min2);\nd2.setSeconds(sec2);\nif (gmt == true)\ncur = new Date(cur.getTime() - cur.getTimezoneOffset() * 60 * 1000);\nreturn ((d1.getTime() <= cur.getTime()) && (cur.getTime() <= d2.getTime()));\n}"");
  this.autoProxyScript.append(""function weekdayRange(wd1, wd2, gmt){\nif (typeof wd1 == 'undefined') \nreturn false;\nelse if (typeof wd2 == 'undefined' || _isGmt(wd2)) \nreturn _weekdayRange(wd1, wd1, _isGmt(wd2)); \nelse \nreturn _weekdayRange(wd1, wd2, _isGmt(gmt)); }\nfunction _weekdayRange(wd1, wd2, gmt) {\nif (typeof wd1 != 'string' || typeof wd2 != 'string' || typeof gmt != 'boolean') return false; \nvar w1 = -1, w2 = -1;\nfor (var i=0; i < _day.length; i++) {\nif (_day[i] == wd1)\nw1 = i;\nif (_day[i] == wd2)\nw2 = i; }\nvar cur = new Date();\nif (gmt == true)\ncur = new Date(cur.getTime() - cur.getTimezoneOffset() * 60 * 1000);\nvar w3 = cur.getDay();\nif (w1 > w2)\nw2 = w2 + 7;\nif (w1 > w3)\nw3 = w3 + 7;\nreturn (w1 <= w3 && w3 <= w2); }"");
  this.autoProxyScript.append("" function alert() {} "");
  URL localURL1=null;
  try {
    localURL1=new URL(this.bpi.getAutoConfigURL());
  }
 catch (  MalformedURLException localMalformedURLException) {
    throw new Exception(""Auto config URL is malformed"");
  }
  URLConnection localURLConnection=getDirectURLConnection(localURL1);
  if (localURLConnection != null) {
    if (isSupportedINSFile(localURLConnection) == true) {
      URL localURL2=getAutoConfigURLFromINS(localURLConnection);
      localURLConnection=getDirectURLConnection(localURL2);
    }
    this.jsPacScript=getJSFileFromURL(localURLConnection);
    this.autoProxyScript.append(this.jsPacScript);
  }
}
"
4326,isSupportedINSFile(URLConnection),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\proxy\AbstractAutoProxyHandler.java,xdm,10,33,21,3,0.3,0.1705,0,4,4,"private static boolean isSupportedINSFile(URLConnection paramURLConnection){
  boolean bool=false;
  String str1=paramURLConnection.getURL().getFile();
  if ((str1 != null) && (str1.toLowerCase().endsWith("".ins"") == true)) {
    bool=true;
  }
 else   if (paramURLConnection != null) {
    String str2=paramURLConnection.getContentType();
    bool=""application/x-internet-signup"".equalsIgnoreCase(str2);
  }
  return bool;
}
"
4331,extractAutoProxySetting(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\proxy\AbstractAutoProxyHandler.java,xdm,19,132,93,5,0.1675,0.0833,1,6,5,"protected final ProxyInfo[] extractAutoProxySetting(String paramString){
  if (paramString != null) {
    StringTokenizer localStringTokenizer=new StringTokenizer(paramString,"";"",false);
    ProxyInfo[] arrayOfProxyInfo=new ProxyInfo[localStringTokenizer.countTokens()];
    int i=0;
    while (localStringTokenizer.hasMoreTokens()) {
      String str=localStringTokenizer.nextToken();
      int j=str.indexOf(""PROXY"");
      if (j != -1) {
        arrayOfProxyInfo[(i++)]=new ProxyInfo(str.substring(j + 6));
      }
 else {
        j=str.indexOf(""SOCKS"");
        if (j != -1) {
          arrayOfProxyInfo[(i++)]=new ProxyInfo(null,str.substring(j + 6));
        }
 else {
          arrayOfProxyInfo[(i++)]=new ProxyInfo(null,-1);
        }
      }
    }
    return arrayOfProxyInfo;
  }
  return new ProxyInfo[]{new ProxyInfo(null)};
}
"
4334,init(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\proxy\AutoProxyResolver.java,xdm,6,8,1,2,0.3333,0.2444,0.6,2,1,"private static void init(String pacURL) throws Exception {
  BrowserProxyInfo b=new BrowserProxyInfo();
  b.setType(2);
  b.setAutoConfigURL(pacURL);
  handler=new XDMAutoProxyHandler();
  handler.init(b);
}
"
4373,"ProxyInfo(String,String)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\proxy\ProxyInfo.java,xdm,26,206,87,9,0.1615,0.1788,0,8,1,"public ProxyInfo(String paramString1,int paramInt1,String paramString2,int paramInt2){
  this.proxy=paramString1;
  this.port=paramInt1;
  this.socksProxy=paramString2;
  this.socksPort=paramInt2;
}
"
4382,toString(),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\proxy\ProxyInfo.java,xdm,6,13,11,4,0.25,0.0714,0,6,3,"public String toString(){
  if (this.proxy != null) {
    return this.proxy + "":"" + this.port;
  }
  if (this.socksProxy != null) {
    return this.socksProxy + "":"" + this.socksPort;
  }
  return ""DIRECT"";
}
"
4383,dnsResolve(String),D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\proxy\XDMAutoProxyHandler.java,xdm,6,12,9,4,0.2778,0.1389,0,3,2,"public String dnsResolve(String paramString){
  String str="""";
  try {
    str=InetAddress.getByName(paramString).getHostAddress();
  }
 catch (  UnknownHostException localUnknownHostException) {
    localUnknownHostException.printStackTrace();
  }
  return str;
}
"
4387,"positiveMin(int,int)",D:\temp\case study\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman-code-191a918b3ffef3cf9a4b0ea8599ea7ccffe9323a\xdman\network\http\proxy\XDMAutoProxyHandler.java,xdm,9,24,12,3,0.4444,0.2571,0,2,4,"private int positiveMin(int paramInt1,int paramInt2){
  if (paramInt1 < 0) {
    return paramInt2;
  }
  if (paramInt2 < 0) {
    return paramInt1;
  }
  if (paramInt1 > paramInt2) {
    return paramInt2;
  }
  return paramInt1;
}
"
